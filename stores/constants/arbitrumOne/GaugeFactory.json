{
  "address": "0x2B0BB6962e89bD5FE9510Ff09Af8D709be21AAD7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_internal_bribe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_external_bribe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPair",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "allowedRewards",
          "type": "address[]"
        }
      ],
      "name": "createGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "last_gauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x09f6670bba024fa701ea9d9b3063e28841cf575d2835f1cf7b62e001ba978aef",
  "receipt": {
    "to": null,
    "from": "0x53f3B51FD7F327E1Ec4E6eAa3A049149cB2acaD2",
    "contractAddress": "0x2B0BB6962e89bD5FE9510Ff09Af8D709be21AAD7",
    "transactionIndex": 1,
    "gasUsed": "22312361",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9549973db6314c602849799444ad26a0d1adc452c46b8d6a18749a87566b018b",
    "transactionHash": "0x09f6670bba024fa701ea9d9b3063e28841cf575d2835f1cf7b62e001ba978aef",
    "logs": [],
    "blockNumber": 58031998,
    "cumulativeGasUsed": "22312361",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "816572db58a4a8203fcf6f77728173df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_internal_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_external_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"allowedRewards\",\"type\":\"address[]\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/GaugeFactory.sol\":\"GaugeFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363735353339323034313033\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Gauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\nimport \\\"contracts/interfaces/IBribe.sol\\\";\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\nimport \\\"contracts/interfaces/IGauge.sol\\\";\\nimport \\\"contracts/interfaces/IPair.sol\\\";\\nimport \\\"contracts/interfaces/IVoter.sol\\\";\\nimport \\\"contracts/interfaces/IVotingEscrow.sol\\\";\\n\\n// Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\\ncontract Gauge is IGauge {\\n    address public immutable stake; // the LP token that needs to be staked for rewards\\n    address public immutable _ve; // the ve token used for gauges\\n    address public immutable internal_bribe;\\n    address public immutable external_bribe;\\n    address public immutable voter;\\n\\n    uint256 public derivedSupply;\\n    mapping(address => uint256) public derivedBalances;\\n\\n    bool public isForPair;\\n\\n    uint256 internal constant DURATION = 7 days; // rewards are released over 7 days\\n    uint256 internal constant PRECISION = 10**18;\\n    uint256 internal constant MAX_REWARD_TOKENS = 16;\\n\\n    // default snx staking contract implementation\\n    mapping(address => uint256) public rewardRate;\\n    mapping(address => uint256) public periodFinish;\\n    mapping(address => uint256) public lastUpdateTime;\\n    mapping(address => uint256) public rewardPerTokenStored;\\n\\n    mapping(address => mapping(address => uint256)) public lastEarn;\\n    mapping(address => mapping(address => uint256))\\n        public userRewardPerTokenStored;\\n\\n    mapping(address => uint256) public tokenIds;\\n\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n\\n    address[] public rewards;\\n    mapping(address => bool) public isReward;\\n\\n    /// @notice A checkpoint for marking balance\\n    struct Checkpoint {\\n        uint256 timestamp;\\n        uint256 balanceOf;\\n    }\\n\\n    /// @notice A checkpoint for marking reward rate\\n    struct RewardPerTokenCheckpoint {\\n        uint256 timestamp;\\n        uint256 rewardPerToken;\\n    }\\n\\n    /// @notice A checkpoint for marking supply\\n    struct SupplyCheckpoint {\\n        uint256 timestamp;\\n        uint256 supply;\\n    }\\n\\n    /// @notice A record of balance checkpoints for each account, by index\\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint256) public numCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\\n    /// @notice The number of checkpoints\\n    uint256 public supplyNumCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping(address => mapping(uint256 => RewardPerTokenCheckpoint))\\n        public rewardPerTokenCheckpoints;\\n    /// @notice The number of checkpoints for each token\\n    mapping(address => uint256) public rewardPerTokenNumCheckpoints;\\n\\n    uint256 public fees0;\\n    uint256 public fees1;\\n\\n    event Deposit(address indexed from, uint256 tokenId, uint256 amount);\\n    event Withdraw(address indexed from, uint256 tokenId, uint256 amount);\\n    event NotifyReward(\\n        address indexed from,\\n        address indexed reward,\\n        uint256 amount\\n    );\\n    event ClaimFees(address indexed from, uint256 claimed0, uint256 claimed1);\\n    event ClaimRewards(\\n        address indexed from,\\n        address indexed reward,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        address _stake,\\n        address _internal_bribe,\\n        address _external_bribe,\\n        address __ve,\\n        address _voter,\\n        bool _forPair,\\n        address[] memory _allowedRewardTokens\\n    ) {\\n        stake = _stake;\\n        internal_bribe = _internal_bribe;\\n        external_bribe = _external_bribe;\\n        _ve = __ve;\\n        voter = _voter;\\n        isForPair = _forPair;\\n\\n        for (uint256 i; i < _allowedRewardTokens.length; i++) {\\n            if (_allowedRewardTokens[i] != address(0)) {\\n                isReward[_allowedRewardTokens[i]] = true;\\n                rewards.push(_allowedRewardTokens[i]);\\n            }\\n        }\\n    }\\n\\n    // simple re-entrancy check\\n    uint256 internal _unlocked = 1;\\n    modifier lock() {\\n        require(_unlocked == 1);\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n\\n    function claimFees()\\n        external\\n        lock\\n        returns (uint256 claimed0, uint256 claimed1)\\n    {\\n        return _claimFees();\\n    }\\n\\n    function _claimFees()\\n        internal\\n        returns (uint256 claimed0, uint256 claimed1)\\n    {\\n        if (!isForPair) {\\n            return (0, 0);\\n        }\\n        (claimed0, claimed1) = IPair(stake).claimFees();\\n        if (claimed0 > 0 || claimed1 > 0) {\\n            uint256 _fees0 = fees0 + claimed0;\\n            uint256 _fees1 = fees1 + claimed1;\\n            (address _token0, address _token1) = IPair(stake).tokens();\\n            if (\\n                _fees0 > IBribe(internal_bribe).left(_token0) &&\\n                _fees0 / DURATION > 0\\n            ) {\\n                fees0 = 0;\\n                _safeApprove(_token0, internal_bribe, _fees0);\\n                IBribe(internal_bribe).notifyRewardAmount(_token0, _fees0);\\n            } else {\\n                fees0 = _fees0;\\n            }\\n            if (\\n                _fees1 > IBribe(internal_bribe).left(_token1) &&\\n                _fees1 / DURATION > 0\\n            ) {\\n                fees1 = 0;\\n                _safeApprove(_token1, internal_bribe, _fees1);\\n                IBribe(internal_bribe).notifyRewardAmount(_token1, _fees1);\\n            } else {\\n                fees1 = _fees1;\\n            }\\n\\n            emit ClaimFees(msg.sender, claimed0, claimed1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Determine the prior balance for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param timestamp The timestamp to get the balance at\\n     * @return The balance the account had as of the given block\\n     */\\n    function getPriorBalanceIndex(address account, uint256 timestamp)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].timestamp <= timestamp) {\\n            return (nCheckpoints - 1);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 lower = 0;\\n        uint256 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    function getPriorSupplyIndex(uint256 timestamp)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 nCheckpoints = supplyNumCheckpoints;\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\\n            return (nCheckpoints - 1);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (supplyCheckpoints[0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 lower = 0;\\n        uint256 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    function getPriorRewardPerToken(address token, uint256 timestamp)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 nCheckpoints = rewardPerTokenNumCheckpoints[token];\\n        if (nCheckpoints == 0) {\\n            return (0, 0);\\n        }\\n\\n        // First check most recent balance\\n        if (\\n            rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp <=\\n            timestamp\\n        ) {\\n            return (\\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1]\\n                    .rewardPerToken,\\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp\\n            );\\n        }\\n\\n        // Next check implicit zero balance\\n        if (rewardPerTokenCheckpoints[token][0].timestamp > timestamp) {\\n            return (0, 0);\\n        }\\n\\n        uint256 lower = 0;\\n        uint256 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            RewardPerTokenCheckpoint memory cp = rewardPerTokenCheckpoints[\\n                token\\n            ][center];\\n            if (cp.timestamp == timestamp) {\\n                return (cp.rewardPerToken, cp.timestamp);\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return (\\n            rewardPerTokenCheckpoints[token][lower].rewardPerToken,\\n            rewardPerTokenCheckpoints[token][lower].timestamp\\n        );\\n    }\\n\\n    function _writeCheckpoint(address account, uint256 balance) internal {\\n        uint256 _timestamp = block.timestamp;\\n        uint256 _nCheckPoints = numCheckpoints[account];\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp\\n        ) {\\n            checkpoints[account][_nCheckPoints - 1].balanceOf = balance;\\n        } else {\\n            checkpoints[account][_nCheckPoints] = Checkpoint(\\n                _timestamp,\\n                balance\\n            );\\n            numCheckpoints[account] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeRewardPerTokenCheckpoint(\\n        address token,\\n        uint256 reward,\\n        uint256 timestamp\\n    ) internal {\\n        uint256 _nCheckPoints = rewardPerTokenNumCheckpoints[token];\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp ==\\n            timestamp\\n        ) {\\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1]\\n                .rewardPerToken = reward;\\n        } else {\\n            rewardPerTokenCheckpoints[token][\\n                _nCheckPoints\\n            ] = RewardPerTokenCheckpoint(timestamp, reward);\\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeSupplyCheckpoint() internal {\\n        uint256 _nCheckPoints = supplyNumCheckpoints;\\n        uint256 _timestamp = block.timestamp;\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\\n        ) {\\n            supplyCheckpoints[_nCheckPoints - 1].supply = derivedSupply;\\n        } else {\\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\\n                _timestamp,\\n                derivedSupply\\n            );\\n            supplyNumCheckpoints = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function rewardsListLength() external view returns (uint256) {\\n        return rewards.length;\\n    }\\n\\n    // returns the last time the reward was modified or periodFinish if the reward has ended\\n    function lastTimeRewardApplicable(address token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return Math.min(block.timestamp, periodFinish[token]);\\n    }\\n\\n    function getReward(address account, address[] memory tokens) external lock {\\n        require(msg.sender == account || msg.sender == voter);\\n        _unlocked = 1;\\n        IVoter(voter).distribute(address(this));\\n        _unlocked = 2;\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            (\\n                rewardPerTokenStored[tokens[i]],\\n                lastUpdateTime[tokens[i]]\\n            ) = _updateRewardPerToken(tokens[i], type(uint256).max, true);\\n\\n            uint256 _reward = earned(tokens[i], account);\\n            lastEarn[tokens[i]][account] = block.timestamp;\\n            userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[\\n                tokens[i]\\n            ];\\n            if (_reward > 0) _safeTransfer(tokens[i], account, _reward);\\n\\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\\n        }\\n\\n        uint256 _derivedBalance = derivedBalances[account];\\n        derivedSupply -= _derivedBalance;\\n        _derivedBalance = derivedBalance(account);\\n        derivedBalances[account] = _derivedBalance;\\n        derivedSupply += _derivedBalance;\\n\\n        _writeCheckpoint(account, derivedBalances[account]);\\n        _writeSupplyCheckpoint();\\n    }\\n\\n    function rewardPerToken(address token) public view returns (uint256) {\\n        if (derivedSupply == 0) {\\n            return rewardPerTokenStored[token];\\n        }\\n        return\\n            rewardPerTokenStored[token] +\\n            (((lastTimeRewardApplicable(token) -\\n                Math.min(lastUpdateTime[token], periodFinish[token])) *\\n                rewardRate[token] *\\n                PRECISION) / derivedSupply);\\n    }\\n\\n    function derivedBalance(address account) public view returns (uint256) {\\n        return balanceOf[account];\\n    }\\n\\n    function batchRewardPerToken(address token, uint256 maxRuns) external {\\n        (\\n            rewardPerTokenStored[token],\\n            lastUpdateTime[token]\\n        ) = _batchRewardPerToken(token, maxRuns);\\n    }\\n\\n    function _batchRewardPerToken(address token, uint256 maxRuns)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        uint256 _startTimestamp = lastUpdateTime[token];\\n        uint256 reward = rewardPerTokenStored[token];\\n\\n        if (supplyNumCheckpoints == 0) {\\n            return (reward, _startTimestamp);\\n        }\\n\\n        if (rewardRate[token] == 0) {\\n            return (reward, block.timestamp);\\n        }\\n\\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\\n\\n        for (uint256 i = _startIndex; i < _endIndex; i++) {\\n            SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\\n            if (sp0.supply > 0) {\\n                SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\\n                (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\\n                    token,\\n                    sp1.timestamp,\\n                    sp0.timestamp,\\n                    sp0.supply,\\n                    _startTimestamp\\n                );\\n                reward += _reward;\\n                _writeRewardPerTokenCheckpoint(token, reward, _endTime);\\n                _startTimestamp = _endTime;\\n            }\\n        }\\n\\n        return (reward, _startTimestamp);\\n    }\\n\\n    function _calcRewardPerToken(\\n        address token,\\n        uint256 timestamp1,\\n        uint256 timestamp0,\\n        uint256 supply,\\n        uint256 startTimestamp\\n    ) internal view returns (uint256, uint256) {\\n        uint256 endTime = Math.max(timestamp1, startTimestamp);\\n        return (\\n            (((Math.min(endTime, periodFinish[token]) -\\n                Math.min(\\n                    Math.max(timestamp0, startTimestamp),\\n                    periodFinish[token]\\n                )) *\\n                rewardRate[token] *\\n                PRECISION) / supply),\\n            endTime\\n        );\\n    }\\n\\n    /// @dev Update stored rewardPerToken values without the last one snapshot\\n    ///      If the contract will get \\\"out of gas\\\" error on users actions this will be helpful\\n    function batchUpdateRewardPerToken(address token, uint256 maxRuns)\\n        external\\n    {\\n        (\\n            rewardPerTokenStored[token],\\n            lastUpdateTime[token]\\n        ) = _updateRewardPerToken(token, maxRuns, false);\\n    }\\n\\n    function _updateRewardForAllTokens() internal {\\n        uint256 length = rewards.length;\\n        for (uint256 i; i < length; i++) {\\n            address token = rewards[i];\\n            (\\n                rewardPerTokenStored[token],\\n                lastUpdateTime[token]\\n            ) = _updateRewardPerToken(token, type(uint256).max, true);\\n        }\\n    }\\n\\n    function _updateRewardPerToken(\\n        address token,\\n        uint256 maxRuns,\\n        bool actualLast\\n    ) internal returns (uint256, uint256) {\\n        uint256 _startTimestamp = lastUpdateTime[token];\\n        uint256 reward = rewardPerTokenStored[token];\\n\\n        if (supplyNumCheckpoints == 0) {\\n            return (reward, _startTimestamp);\\n        }\\n\\n        if (rewardRate[token] == 0) {\\n            return (reward, block.timestamp);\\n        }\\n\\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\\n\\n        if (_endIndex > 0) {\\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\\n                SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\\n                if (sp0.supply > 0) {\\n                    SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\\n                    (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\\n                        token,\\n                        sp1.timestamp,\\n                        sp0.timestamp,\\n                        sp0.supply,\\n                        _startTimestamp\\n                    );\\n                    reward += _reward;\\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\\n                    _startTimestamp = _endTime;\\n                }\\n            }\\n        }\\n\\n        // need to override the last value with actual numbers only on deposit/withdraw/claim/notify actions\\n        if (actualLast) {\\n            SupplyCheckpoint memory sp = supplyCheckpoints[_endIndex];\\n            if (sp.supply > 0) {\\n                (uint256 _reward, ) = _calcRewardPerToken(\\n                    token,\\n                    lastTimeRewardApplicable(token),\\n                    Math.max(sp.timestamp, _startTimestamp),\\n                    sp.supply,\\n                    _startTimestamp\\n                );\\n                reward += _reward;\\n                _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\\n                _startTimestamp = block.timestamp;\\n            }\\n        }\\n\\n        return (reward, _startTimestamp);\\n    }\\n\\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\\n    function earned(address token, address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _startTimestamp = Math.max(\\n            lastEarn[token][account],\\n            rewardPerTokenCheckpoints[token][0].timestamp\\n        );\\n        if (numCheckpoints[account] == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _startIndex = getPriorBalanceIndex(account, _startTimestamp);\\n        uint256 _endIndex = numCheckpoints[account] - 1;\\n\\n        uint256 reward = 0;\\n\\n        if (_endIndex > 0) {\\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\\n                Checkpoint memory cp0 = checkpoints[account][i];\\n                Checkpoint memory cp1 = checkpoints[account][i + 1];\\n                (uint256 _rewardPerTokenStored0, ) = getPriorRewardPerToken(\\n                    token,\\n                    cp0.timestamp\\n                );\\n                (uint256 _rewardPerTokenStored1, ) = getPriorRewardPerToken(\\n                    token,\\n                    cp1.timestamp\\n                );\\n                reward +=\\n                    (cp0.balanceOf *\\n                        (_rewardPerTokenStored1 - _rewardPerTokenStored0)) /\\n                    PRECISION;\\n            }\\n        }\\n\\n        Checkpoint memory cp = checkpoints[account][_endIndex];\\n        (uint256 _rewardPerTokenStored, ) = getPriorRewardPerToken(\\n            token,\\n            cp.timestamp\\n        );\\n        reward +=\\n            (cp.balanceOf *\\n                (rewardPerToken(token) -\\n                    Math.max(\\n                        _rewardPerTokenStored,\\n                        userRewardPerTokenStored[token][account]\\n                    ))) /\\n            PRECISION;\\n\\n        return reward;\\n    }\\n\\n    function depositAll(uint256 tokenId) external {\\n        deposit(IERC20(stake).balanceOf(msg.sender), tokenId);\\n    }\\n\\n    function deposit(uint256 amount, uint256 tokenId) public lock {\\n        require(amount > 0);\\n        _updateRewardForAllTokens();\\n\\n        _safeTransferFrom(stake, msg.sender, address(this), amount);\\n        totalSupply += amount;\\n        balanceOf[msg.sender] += amount;\\n\\n        if (tokenId > 0) {\\n            require(IVotingEscrow(_ve).ownerOf(tokenId) == msg.sender);\\n            if (tokenIds[msg.sender] == 0) {\\n                tokenIds[msg.sender] = tokenId;\\n                IVoter(voter).attachTokenToGauge(tokenId, msg.sender);\\n            }\\n            require(tokenIds[msg.sender] == tokenId);\\n        } else {\\n            tokenId = tokenIds[msg.sender];\\n        }\\n\\n        uint256 _derivedBalance = derivedBalances[msg.sender];\\n        derivedSupply -= _derivedBalance;\\n        _derivedBalance = derivedBalance(msg.sender);\\n        derivedBalances[msg.sender] = _derivedBalance;\\n        derivedSupply += _derivedBalance;\\n\\n        _writeCheckpoint(msg.sender, _derivedBalance);\\n        _writeSupplyCheckpoint();\\n\\n        IVoter(voter).emitDeposit(tokenId, msg.sender, amount);\\n        emit Deposit(msg.sender, tokenId, amount);\\n    }\\n\\n    function withdrawAll() external {\\n        withdraw(balanceOf[msg.sender]);\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        uint256 tokenId = 0;\\n        if (amount == balanceOf[msg.sender]) {\\n            tokenId = tokenIds[msg.sender];\\n        }\\n        withdrawToken(amount, tokenId);\\n    }\\n\\n    function withdrawToken(uint256 amount, uint256 tokenId) public lock {\\n        _updateRewardForAllTokens();\\n\\n        totalSupply -= amount;\\n        balanceOf[msg.sender] -= amount;\\n        _safeTransfer(stake, msg.sender, amount);\\n\\n        if (tokenId > 0) {\\n            require(tokenId == tokenIds[msg.sender]);\\n            tokenIds[msg.sender] = 0;\\n            IVoter(voter).detachTokenFromGauge(tokenId, msg.sender);\\n        } else {\\n            tokenId = tokenIds[msg.sender];\\n        }\\n\\n        uint256 _derivedBalance = derivedBalances[msg.sender];\\n        derivedSupply -= _derivedBalance;\\n        _derivedBalance = derivedBalance(msg.sender);\\n        derivedBalances[msg.sender] = _derivedBalance;\\n        derivedSupply += _derivedBalance;\\n\\n        _writeCheckpoint(msg.sender, derivedBalances[msg.sender]);\\n        _writeSupplyCheckpoint();\\n\\n        IVoter(voter).emitWithdraw(tokenId, msg.sender, amount);\\n        emit Withdraw(msg.sender, tokenId, amount);\\n    }\\n\\n    function left(address token) external view returns (uint256) {\\n        if (block.timestamp >= periodFinish[token]) return 0;\\n        uint256 _remaining = periodFinish[token] - block.timestamp;\\n        return _remaining * rewardRate[token];\\n    }\\n\\n    function notifyRewardAmount(address token, uint256 amount) external lock {\\n        require(token != stake);\\n        require(amount > 0);\\n        if (!isReward[token]) {\\n            require(\\n                IVoter(voter).isWhitelisted(token),\\n                \\\"rewards tokens must be whitelisted\\\"\\n            );\\n            require(\\n                rewards.length < MAX_REWARD_TOKENS,\\n                \\\"too many rewards tokens\\\"\\n            );\\n        }\\n        if (rewardRate[token] == 0)\\n            _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\\n        (\\n            rewardPerTokenStored[token],\\n            lastUpdateTime[token]\\n        ) = _updateRewardPerToken(token, type(uint256).max, true);\\n        _claimFees();\\n\\n        if (block.timestamp >= periodFinish[token]) {\\n            _safeTransferFrom(token, msg.sender, address(this), amount);\\n            rewardRate[token] = amount / DURATION;\\n        } else {\\n            uint256 _remaining = periodFinish[token] - block.timestamp;\\n            uint256 _left = _remaining * rewardRate[token];\\n            require(amount > _left);\\n            _safeTransferFrom(token, msg.sender, address(this), amount);\\n            rewardRate[token] = (amount + _left) / DURATION;\\n        }\\n        require(rewardRate[token] > 0);\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        require(\\n            rewardRate[token] <= balance / DURATION,\\n            \\\"Provided reward too high\\\"\\n        );\\n        periodFinish[token] = block.timestamp + DURATION;\\n        if (!isReward[token]) {\\n            isReward[token] = true;\\n            rewards.push(token);\\n        }\\n\\n        emit NotifyReward(msg.sender, token, amount);\\n    }\\n\\n    function swapOutRewardToken(\\n        uint256 i,\\n        address oldToken,\\n        address newToken\\n    ) external {\\n        require(msg.sender == IVotingEscrow(_ve).team(), \\\"only team\\\");\\n        require(rewards[i] == oldToken);\\n        isReward[oldToken] = false;\\n        isReward[newToken] = true;\\n        rewards[i] = newToken;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(\\n                IERC20.transferFrom.selector,\\n                from,\\n                to,\\n                value\\n            )\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeApprove(\\n        address token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n}\\n\",\"keccak256\":\"0x83f617441300319e41d821f84d4d4d2d2ddf16dbbc70e7a362b1c7d75a50c299\",\"license\":\"MIT\"},\"contracts/factories/GaugeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport 'contracts/interfaces/IGaugeFactory.sol';\\nimport 'contracts/Gauge.sol';\\n\\ncontract GaugeFactory is IGaugeFactory {\\n    address public last_gauge;\\n\\n    function createGauge(address _pool, address _internal_bribe, address _external_bribe, address _ve, bool isPair, address[] memory allowedRewards) external returns (address) {\\n        last_gauge = address(new Gauge(_pool, _internal_bribe, _external_bribe, _ve, msg.sender, isPair, allowedRewards));\\n        return last_gauge;\\n    }\\n}\\n\",\"keccak256\":\"0x34f6ac4bdace9ef01d8cffda9b45842efae88b519230c67759b9936aee6acc9b\",\"license\":\"MIT\"},\"contracts/interfaces/IBribe.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IBribe {\\n    function _deposit(uint amount, uint tokenId) external;\\n    function _withdraw(uint amount, uint tokenId) external;\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n    function notifyRewardAmount(address token, uint amount) external;\\n    function left(address token) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x51fd1163872f5d63b19f0c0f08b9b9a395dcadd79cf96cab749b898af01c1b4e\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address recipient, uint amount) external returns (bool);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function balanceOf(address) external view returns (uint);\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x892b167ec5245b43ccdfc68d20e8ca12d05725fb6c11ec5ddf6bf77ed0c93c32\"},\"contracts/interfaces/IGauge.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IGauge {\\n    function notifyRewardAmount(address token, uint amount) external;\\n    function getReward(address account, address[] memory tokens) external;\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n    function left(address token) external view returns (uint);\\n    function isForPair() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xae388a0eeb0318da9a00bd65bcc80dcbf81cd24915959c7852f9fa21f8893865\"},\"contracts/interfaces/IGaugeFactory.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IGaugeFactory {\\n    function createGauge(address, address, address, address, bool, address[] memory) external returns (address);\\n}\\n\",\"keccak256\":\"0xb0b7fb654242fb9709c9d767bbcf2edbbc54bda0b4c1dbf092718c0e5ddac785\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IPair {\\n    function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1);\\n    function claimFees() external returns (uint, uint);\\n    function tokens() external returns (address, address);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x796005a0babe921334bacab4a90a551bc7f2ddfb030350a6ba590a9d8440daee\"},\"contracts/interfaces/IVoter.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IVoter {\\n    function _ve() external view returns (address);\\n    function governor() external view returns (address);\\n    function emergencyCouncil() external view returns (address);\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n    function emitDeposit(uint _tokenId, address account, uint amount) external;\\n    function emitWithdraw(uint _tokenId, address account, uint amount) external;\\n    function isWhitelisted(address token) external view returns (bool);\\n    function notifyRewardAmount(uint amount) external;\\n    function distribute(address _gauge) external;\\n}\\n\",\"keccak256\":\"0x033115b88f156c6db67ca468fc9da8e4197bbd48bc8cf5a1652b9ebd307b2d31\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IVotingEscrow {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    function token() external view returns (address);\\n    function team() external returns (address);\\n    function epoch() external view returns (uint);\\n    function point_history(uint loc) external view returns (Point memory);\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n    function transferFrom(address, address, uint) external;\\n\\n    function voting(uint tokenId) external;\\n    function abstain(uint tokenId) external;\\n    function attach(uint tokenId) external;\\n    function detach(uint tokenId) external;\\n\\n    function checkpoint() external;\\n    function deposit_for(uint tokenId, uint value) external;\\n    function create_lock_for(uint, uint, address) external returns (uint);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x9c51afef11e82c70d08871264602e385a4f7caf36383e1bc5a6c214f93a4c0d1\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3546b156d97633f7f8cad536d5454c81d1d604687c02b2eb105fdc33cb962b41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80630bc25f4f1461003b578063730a8bdb1461006a575b600080fd5b61004e610049366004610128565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b60005461004e906001600160a01b031681565b600086868686338787604051610092906100e9565b6100a29796959493929190610248565b604051809103906000f0801580156100be573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169182179055979650505050505050565b613812806102d183390190565b80356001600160a01b038116811461010d57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c0878903121561014157600080fd5b61014a876100f6565b955060206101598189016100f6565b9550610167604089016100f6565b9450610175606089016100f6565b93506080880135801515811461018a57600080fd5b925060a088013567ffffffffffffffff808211156101a757600080fd5b818a0191508a601f8301126101bb57600080fd5b8135818111156101cd576101cd610112565b8060051b604051601f19603f830116810181811085821117156101f2576101f2610112565b60405291825284820192508381018501918d83111561021057600080fd5b938501935b8285101561023557610226856100f6565b84529385019392850192610215565b8096505050505050509295509295509295565b600060e0820160018060a01b03808b1684526020818b1681860152818a1660408601528189166060860152818816608086015286151560a086015260e060c086015282865180855261010087019150828801945060005b818110156102bd57855185168352948301949183019160010161029f565b50909d9c5050505050505050505050505056fe61012060405260016016553480156200001757600080fd5b5060405162003812380380620038128339810160408190526200003a91620001b5565b6001600160a01b0387811660805286811660c05285811660e05284811660a0528316610100526002805460ff191683151517905560005b8151811015620001745760006001600160a01b03168282815181106200009b576200009b62000300565b60200260200101516001600160a01b0316146200015f576001600d6000848481518110620000cd57620000cd62000300565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600c82828151811062000123576200012362000300565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b806200016b8162000316565b91505062000071565b50505050505050506200033e565b80516001600160a01b03811681146200019a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600060e0888a031215620001d157600080fd5b620001dc8862000182565b96506020620001ed818a0162000182565b9650620001fd60408a0162000182565b95506200020d60608a0162000182565b94506200021d60808a0162000182565b935060a089015180151581146200023357600080fd5b60c08a01519093506001600160401b03808211156200025157600080fd5b818b0191508b601f8301126200026657600080fd5b8151818111156200027b576200027b6200019f565b8060051b604051601f19603f83011681018181108582111715620002a357620002a36200019f565b60405291825284820192508381018501918e831115620002c257600080fd5b938501935b82851015620002eb57620002db8562000182565b84529385019392850192620002c7565b80965050505050505092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b6000600182016200033757634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c05160e051610100516133fc620004166000396000818161045301528181610beb01528181610c300152818161140b01528181611aa501528181611bc9015281816120590152612170015260006102eb01526000818161056201528181612aa301528181612b3a01528181612b8501528181612c0b01528181612ca00152612ceb0152600081816105910152818161117301526119d9015260008181610401015281816113910152818161187e0152818161195101528181611fda0152818161293b01526129fd01526133fc6000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c8063853828b611610167578063d7da4bb0116100ce578063f122977711610087578063f1229777146106fe578063f301af4214610711578063f7412baf14610724578063fc97a3031461074b578063fd3140981461076b578063fdb483c71461077e57600080fd5b8063d7da4bb0146106a4578063da09d19d146106ad578063e2bbb158146106cd578063e5748213146106e0578063e6886396146106ed578063e8111a12146106f557600080fd5b8063a495e5b511610120578063a495e5b514610602578063aa4796521461062d578063b66503cf1461064d578063c6f678bd14610660578063d294f09314610673578063d35e25441461067b57600080fd5b8063853828b6146105845780638dd598fb1461058c57806393f1c442146105b35780639418f939146105bc57806399bcc052146105cf5780639ce43f90146105e257600080fd5b80633ca068b61161020b57806363fb415b116101c457806363fb415b146104d757806368fcee1a146104f75780636fcfff451461050a57806370a082311461052a57806376f4be361461054a578063770f85711461055d57600080fd5b80633ca068b61461042357806346c96aac1461044e5780634c02a21c146104755780634d5ce0381461047e5780635a45d052146104b1578063638634ee146104c457600080fd5b8063211dc32d1161025d578063211dc32d14610381578063221ca18c146103945780632ce9aead146103b45780632e1a7d4d146103d457806331279d3d146103e95780633a4b66f1146103fc57600080fd5b806301316ddf1461029a57806303fbf83a146102e65780630cdfebfa14610325578063115c6f391461035757806318160ddd14610378575b600080fd5b6102cc6102a836600461303c565b60126020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152015b60405180910390f35b61030d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102dd565b6102cc61033336600461303c565b600e6020908152600092835260408084209091529082529020805460019091015482565b61036a61036536600461303c565b610791565b6040519081526020016102dd565b61036a600a5481565b61036a61038f366004613068565b610900565b61036a6103a23660046130a1565b60036020526000908152604090205481565b61036a6103c23660046130a1565b60056020526000908152604090205481565b6103e76103e23660046130be565b610b84565b005b6103e76103f73660046130ed565b610bba565b61030d7f000000000000000000000000000000000000000000000000000000000000000081565b61036a610431366004613068565b600860209081526000928352604080842090915290825290205481565b61030d7f000000000000000000000000000000000000000000000000000000000000000081565b61036a60155481565b6104a161048c3660046130a1565b600d6020526000908152604090205460ff1681565b60405190151581526020016102dd565b6103e76104bf36600461303c565b610fba565b61036a6104d23660046130a1565b610ff2565b61036a6104e53660046130a1565b60016020526000908152604090205481565b6103e761050536600461303c565b611016565b61036a6105183660046130a1565b600f6020526000908152604090205481565b61036a6105383660046130a1565b600b6020526000908152604090205481565b61036a6105583660046130be565b611022565b61030d7f000000000000000000000000000000000000000000000000000000000000000081565b6103e7611156565b61030d7f000000000000000000000000000000000000000000000000000000000000000081565b61036a60145481565b6103e76105ca3660046131c7565b611171565b61036a6105dd3660046130a1565b611302565b61036a6105f03660046130a1565b60066020526000908152604090205481565b61036a610610366004613068565b600760209081526000928352604080842090915290825290205481565b61036a61063b3660046130a1565b60136020526000908152604090205481565b6103e761065b36600461303c565b611373565b6103e761066e3660046130be565b611865565b6102cc6118fa565b61036a6106893660046130a1565b6001600160a01b03166000908152600b602052604090205490565b61036a60005481565b61036a6106bb3660046130a1565b60046020526000908152604090205481565b6103e76106db366004613209565b611926565b6002546104a19060ff1681565b600c5461036a565b61036a60115481565b61036a61070c3660046130a1565b611c73565b61030d61071f3660046130be565b611d32565b6102cc6107323660046130be565b6010602052600090815260409020805460019091015482565b61036a6107593660046130a1565b60096020526000908152604090205481565b6102cc61077936600461303c565b611d5c565b6103e761078c366004613209565b611f7d565b6001600160a01b0382166000908152600f60205260408120548082036107bb5760009150506108fa565b6001600160a01b0384166000908152600e6020526040812084916107e0600185613241565b8152602001908152602001600020600001541161080a57610802600182613241565b9150506108fa565b6001600160a01b0384166000908152600e6020908152604080832083805290915290205483101561083f5760009150506108fa565b60008061084d600184613241565b90505b818111156108f557600060026108668484613241565b6108709190613258565b61087a9083613241565b6001600160a01b0388166000908152600e602090815260408083208484528252918290208251808401909352805480845260019091015491830191909152919250908790036108cf575093506108fa92505050565b80518711156108e0578193506108ee565b6108eb600183613241565b92505b5050610850565b509150505b92915050565b6001600160a01b0380831660008181526007602090815260408083209486168352938152838220549282526012815283822082805290529182205482916109469161220c565b6001600160a01b0384166000908152600f6020526040812054919250036109715760009150506108fa565b600061097d8483610791565b6001600160a01b0385166000908152600f6020526040812054919250906109a690600190613241565b905060008115610ab857825b6109bd600184613241565b8111610ab6576001600160a01b0387166000818152600e602081815260408084208685528083528185208251808401909352805483526001908101548385015295855292909152928290610a1290869061327a565b81526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000610a518b8460000151611d5c565b5090506000610a648c8460000151611d5c565b509050670de0b6b3a7640000610a7a8383613241565b8560200151610a899190613292565b610a939190613258565b610a9d908761327a565b9550505050508080610aae906132b1565b9150506109b2565b505b6001600160a01b0386166000908152600e60209081526040808320858452825280832081518083019092528054808352600190910154928201929092529190610b02908a90611d5c565b506001600160a01b03808b166000908152600860209081526040808320938d1683529290522054909150670de0b6b3a764000090610b4190839061220c565b610b4a8b611c73565b610b549190613241565b8360200151610b639190613292565b610b6d9190613258565b610b77908461327a565b9998505050505050505050565b336000908152600b60205260408120548203610bac5750336000908152600960205260409020545b610bb68282611f7d565b5050565b601654600114610bc957600080fd5b6002601655336001600160a01b0383161480610c0d5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b610c1657600080fd5b60016016556040516363453ae160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906363453ae190602401600060405180830381600087803b158015610c7c57600080fd5b505af1158015610c90573d6000803e3d6000fd5b5050600260165550600090505b8151811015610f1357610ccd828281518110610cbb57610cbb6132ca565b60200260200101516000196001612222565b60066000858581518110610ce357610ce36132ca565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600060056000878781518110610d2357610d236132ca565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008491905055839190505550506000610d7e838381518110610d7057610d706132ca565b602002602001015185610900565b90504260076000858581518110610d9757610d976132ca565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000866001600160a01b03166001600160a01b031681526020019081526020016000208190555060066000848481518110610dfc57610dfc6132ca565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205460086000858581518110610e3b57610e3b6132ca565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812093891681529290529020558015610e9a57610e9a838381518110610e8b57610e8b6132ca565b60200260200101518583612412565b828281518110610eac57610eac6132ca565b60200260200101516001600160a01b0316336001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc983604051610ef891815260200190565b60405180910390a35080610f0b816132b1565b915050610c9d565b506001600160a01b0382166000908152600160205260408120548154909182918190610f40908490613241565b9091555050506001600160a01b0382166000908152600b6020908152604080832054600190925282208190558154909182918190610f7f90849061327a565b90915550506001600160a01b038316600090815260016020526040902054610fa8908490612512565b610fb061261d565b5050600160165550565b610fc482826126c0565b6001600160a01b03909316600090815260066020908152604080832060059092529091209390935590915550565b6001600160a01b0381166000908152600460205260408120546108fa904290612823565b610fc482826000612222565b6011546000908082036110385750600092915050565b8260106000611048600185613241565b815260200190815260200160002060000154116110715761106a600182613241565b9392505050565b6000805260106020527f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb01548310156110ac5750600092915050565b6000806110ba600184613241565b90505b8181111561114e57600060026110d38484613241565b6110dd9190613258565b6110e79083613241565b600081815260106020908152604091829020825180840190935280548084526001909101549183019190915291925090879003611128575095945050505050565b805187111561113957819350611147565b611144600183613241565b92505b50506110bd565b509392505050565b336000908152600b602052604090205461116f90610b84565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166385f2aef26040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f591906132e0565b6001600160a01b0316336001600160a01b0316146112465760405162461bcd60e51b81526020600482015260096024820152686f6e6c79207465616d60b81b60448201526064015b60405180910390fd5b816001600160a01b0316600c8481548110611263576112636132ca565b6000918252602090912001546001600160a01b03161461128257600080fd5b6001600160a01b038083166000908152600d6020526040808220805460ff199081169091559284168252902080549091166001179055600c8054829190859081106112cf576112cf6132ca565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b6001600160a01b038116600090815260046020526040812054421061132957506000919050565b6001600160a01b03821660009081526004602052604081205461134d904290613241565b6001600160a01b03841660009081526003602052604090205490915061106a9082613292565b60165460011461138257600080fd5b60026016556001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116908316036113bf57600080fd5b600081116113cc57600080fd5b6001600160a01b0382166000908152600d602052604090205460ff1661151f57604051633af32abf60e01b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690633af32abf90602401602060405180830381865afa158015611452573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147691906132fd565b6114cd5760405162461bcd60e51b815260206004820152602260248201527f7265776172647320746f6b656e73206d7573742062652077686974656c697374604482015261195960f21b606482015260840161123d565b600c5460101161151f5760405162461bcd60e51b815260206004820152601760248201527f746f6f206d616e79207265776172647320746f6b656e73000000000000000000604482015260640161123d565b6001600160a01b038216600090815260036020526040812054900361154a5761154a82600042612832565b611558826000196001612222565b6001600160a01b038416600090815260066020908152604080832060059092529091209190915555611588612921565b50506001600160a01b03821660009081526004602052604090205442106115e0576115b582333084612d96565b6115c262093a8082613258565b6001600160a01b038316600090815260036020526040902055611679565b6001600160a01b038216600090815260046020526040812054611604904290613241565b6001600160a01b0384166000908152600360205260408120549192509061162b9083613292565b905080831161163957600080fd5b61164584333086612d96565b62093a80611653828561327a565b61165d9190613258565b6001600160a01b03851660009081526003602052604090205550505b6001600160a01b03821660009081526003602052604090205461169b57600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156116e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611706919061331f565b905061171562093a8082613258565b6001600160a01b038416600090815260036020526040902054111561177c5760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f20686967680000000000000000604482015260640161123d565b61178962093a804261327a565b6001600160a01b038416600090815260046020908152604080832093909355600d9052205460ff1661181b576001600160a01b0383166000818152600d60205260408120805460ff19166001908117909155600c805491820181559091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b03191690911790555b6040518281526001600160a01b0384169033907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf508269060200160405180910390a35050600160165550565b6040516370a0823160e01b81523360048201526118f7907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156118cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f1919061331f565b82611926565b50565b60008060165460011461190c57600080fd5b6002601655611919612921565b9150915060016016559091565b60165460011461193557600080fd5b60026016558161194457600080fd5b61194c612e8e565b6119787f0000000000000000000000000000000000000000000000000000000000000000333085612d96565b81600a600082825461198a919061327a565b9091555050336000908152600b6020526040812080548492906119ae90849061327a565b90915550508015611b22576040516331a9108f60e11b81526004810182905233906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4491906132e0565b6001600160a01b031614611a5757600080fd5b336000908152600960205260408120549003611b025733600081815260096020526040908190208390555163698473e360e01b81526004810183905260248101919091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063698473e390604401600060405180830381600087803b158015611ae957600080fd5b505af1158015611afd573d6000803e3d6000fd5b505050505b336000908152600960205260409020548114611b1d57600080fd5b611b34565b50336000908152600960205260409020545b336000908152600160205260408120548154909182918190611b57908490613241565b9091555050336000908152600b60209081526040808320546001909252822081905581549092508291908190611b8e90849061327a565b90915550611b9e90503382612512565b611ba661261d565b60405163530e389d60e11b815260048101839052336024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a61c713a90606401600060405180830381600087803b158015611c1557600080fd5b505af1158015611c29573d6000803e3d6000fd5b505060408051858152602081018790523393507f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159250015b60405180910390a25050600160165550565b60008054600003611c9a57506001600160a01b031660009081526006602052604090205490565b600080546001600160a01b038416825260036020908152604080842054600583528185205460049093529320549192670de0b6b3a7640000929091611cde91612823565b611ce786610ff2565b611cf19190613241565b611cfb9190613292565b611d059190613292565b611d0f9190613258565b6001600160a01b0383166000908152600660205260409020546108fa919061327a565b600c8181548110611d4257600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0382166000908152601360205260408120548190808203611d8b576000809250925050611f76565b6001600160a01b03851660009081526012602052604081208591611db0600185613241565b81526020019081526020016000206000015411611e4d576001600160a01b038516600090815260126020526040812090611deb600184613241565b81526020019081526020016000206001015460126000876001600160a01b03166001600160a01b031681526020019081526020016000206000600184611e319190613241565b8152602001908152602001600020600001549250925050611f76565b6001600160a01b0385166000908152601260209081526040808320838052909152902054841015611e85576000809250925050611f76565b600080611e93600184613241565b90505b81811115611f455760006002611eac8484613241565b611eb69190613258565b611ec09083613241565b6001600160a01b0389166000908152601260209081526040808320848452825291829020825180840190935280548084526001909101549183019190915291925090889003611f1f57602081015190519096509450611f769350505050565b8051881115611f3057819350611f3e565b611f3b600183613241565b92505b5050611e96565b506001600160a01b038616600090815260126020908152604080832093835292905220600181015490549093509150505b9250929050565b601654600114611f8c57600080fd5b6002601655611f99612e8e565b81600a6000828254611fab9190613241565b9091555050336000908152600b602052604081208054849290611fcf908490613241565b9091555061200090507f00000000000000000000000000000000000000000000000000000000000000003384612412565b80156120ba5733600090815260096020526040902054811461202157600080fd5b33600081815260096020526040808220919091555163411b1f7760e01b81526004810183905260248101919091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063411b1f7790604401600060405180830381600087803b15801561209d57600080fd5b505af11580156120b1573d6000803e3d6000fd5b505050506120cc565b50336000908152600960205260409020545b3360009081526001602052604081205481549091829181906120ef908490613241565b9091555050336000908152600b6020908152604080832054600190925282208190558154909250829190819061212690849061327a565b9091555050336000818152600160205260409020546121459190612512565b61214d61261d565b604051633aa53b9160e21b815260048101839052336024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ea94ee4490606401600060405180830381600087803b1580156121bc57600080fd5b505af11580156121d0573d6000803e3d6000fd5b505060408051858152602081018790523393507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568925001611c61565b600081831161221b578161106a565b5090919050565b6001600160a01b038316600090815260056020908152604080832054600690925282205460115483929190830361225c579250905061240a565b6001600160a01b038716600090815260036020526040812054900361228757925042915061240a9050565b600061229283611022565b905060006122ae60016011546122a89190613241565b89612823565b9050801561238757815b6122c3600183613241565b811161238557600081815260106020908152604091829020825180840190935280548352600101549082018190521561237257600060108161230685600161327a565b81526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000806123518e8460000151866000015187602001518d612f12565b9092509050612360828961327a565b975061236d8e8983612832565b975050505b508061237d816132b1565b9150506122b8565b505b86156124015760008181526010602090815260409182902082518084019093528054835260010154908201819052156123ff5760006123e08b6123c98d610ff2565b84516123d5908a61220c565b85602001518a612f12565b5090506123ed818661327a565b94506123fa8b8642612832565b429550505b505b50909350909150505b935093915050565b6000836001600160a01b03163b1161242957600080fd5b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516124969190613338565b6000604051808303816000865af19150503d80600081146124d3576040519150601f19603f3d011682016040523d82523d6000602084013e6124d8565b606091505b509150915081801561250257508051158061250257508080602001905181019061250291906132fd565b61250b57600080fd5b5050505050565b6001600160a01b0382166000908152600f60205260409020544290801580159061257057506001600160a01b0384166000908152600e60205260408120839161255c600185613241565b815260200190815260200160002060000154145b156125b3576001600160a01b0384166000908152600e60205260408120849161259a600185613241565b8152602081019190915260400160002060010155612617565b60408051808201825283815260208082018681526001600160a01b0388166000908152600e83528481208682529092529290209051815590516001918201556125fd90829061327a565b6001600160a01b0385166000908152600f60205260409020555b50505050565b60115442811580159061264f5750806010600061263b600186613241565b815260200190815260200160002060000154145b1561268057600054601060006001856126689190613241565b81526020810191909152604001600020600101555050565b604080518082018252828152600080546020808401918252868352601090529290209051815590516001918201556126b990839061327a565b6011555050565b6001600160a01b03821660009081526005602090815260408083205460069092528220546011548392919083036126fa5792509050611f76565b6001600160a01b0386166000908152600360205260408120549003612725579250429150611f769050565b600061273083611022565b9050600061274c60016011546127469190613241565b88612823565b9050815b8181101561281457600081815260106020908152604091829020825180840190935280548352600101549082018190521561280157600060108161279585600161327a565b81526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000806127e08d8460000151866000015187602001518d612f12565b90925090506127ef828961327a565b97506127fc8d8983612832565b975050505b508061280c816132b1565b915050612750565b50919792965091945050505050565b600081831061221b578161106a565b6001600160a01b038316600090815260136020526040902054801580159061288e57506001600160a01b0384166000908152601260205260408120839161287a600185613241565b815260200190815260200160002060000154145b156128b8576001600160a01b0384166000908152601260205260408120849161259a600185613241565b60408051808201825283815260208082018681526001600160a01b03881660009081526012835284812086825290925292902090518155905160019182015561290290829061327a565b6001600160a01b03851660009081526013602052604090205550505050565b600254600090819060ff166129395750600091829150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d294f0936040518163ffffffff1660e01b815260040160408051808303816000875af1158015612998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129bc9190613373565b9092509050811515806129cf5750600081115b15612d92576000826014546129e4919061327a565b90506000826015546129f6919061327a565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639d63848a6040518163ffffffff1660e01b815260040160408051808303816000875af1158015612a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7e9190613397565b604051634cde602960e11b81526001600160a01b0380841660048301529294509092507f0000000000000000000000000000000000000000000000000000000000000000909116906399bcc05290602401602060405180830381865afa158015612aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b10919061331f565b84118015612b2a57506000612b2862093a8086613258565b115b15612be6576000601455612b5f827f000000000000000000000000000000000000000000000000000000000000000086612fcd565b60405163b66503cf60e01b81526001600160a01b038381166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063b66503cf90604401600060405180830381600087803b158015612bc957600080fd5b505af1158015612bdd573d6000803e3d6000fd5b50505050612bec565b60148490555b604051634cde602960e11b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906399bcc05290602401602060405180830381865afa158015612c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c76919061331f565b83118015612c9057506000612c8e62093a8085613258565b115b15612d4c576000601555612cc5817f000000000000000000000000000000000000000000000000000000000000000085612fcd565b60405163b66503cf60e01b81526001600160a01b038281166004830152602482018590527f0000000000000000000000000000000000000000000000000000000000000000169063b66503cf90604401600060405180830381600087803b158015612d2f57600080fd5b505af1158015612d43573d6000803e3d6000fd5b50505050612d52565b60158390555b604080518781526020810187905233917fbc567d6cbad26368064baa0ab5a757be46aae4d70f707f9203d9d9b6c8ccbfa3910160405180910390a2505050505b9091565b6000846001600160a01b03163b11612dad57600080fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691612e119190613338565b6000604051808303816000865af19150503d8060008114612e4e576040519150601f19603f3d011682016040523d82523d6000602084013e612e53565b606091505b5091509150818015612e7d575080511580612e7d575080806020019051810190612e7d91906132fd565b612e8657600080fd5b505050505050565b600c5460005b81811015610bb6576000600c8281548110612eb157612eb16132ca565b6000918252602090912001546001600160a01b03169050612ed6816000196001612222565b6001600160a01b039092166000908152600660209081526040808320600590925290912092909255905580612f0a816132b1565b915050612e94565b6000806000612f21878561220c565b6001600160a01b0389166000908152600360205260409020549091508590670de0b6b3a764000090612f74612f568a8961220c565b6001600160a01b038d16600090815260046020526040902054612823565b6001600160a01b038c16600090815260046020526040902054612f98908690612823565b612fa29190613241565b612fac9190613292565b612fb69190613292565b612fc09190613258565b9890975095505050505050565b6000836001600160a01b03163b11612fe457600080fd5b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b90606401612458565b6001600160a01b03811681146118f757600080fd5b803561303781613017565b919050565b6000806040838503121561304f57600080fd5b823561305a81613017565b946020939093013593505050565b6000806040838503121561307b57600080fd5b823561308681613017565b9150602083013561309681613017565b809150509250929050565b6000602082840312156130b357600080fd5b813561106a81613017565b6000602082840312156130d057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561310057600080fd5b823561310b81613017565b915060208381013567ffffffffffffffff8082111561312957600080fd5b818601915086601f83011261313d57600080fd5b81358181111561314f5761314f6130d7565b8060051b604051601f19603f83011681018181108582111715613174576131746130d7565b60405291825284820192508381018501918983111561319257600080fd5b938501935b828510156131b7576131a88561302c565b84529385019392850192613197565b8096505050505050509250929050565b6000806000606084860312156131dc57600080fd5b8335925060208401356131ee81613017565b915060408401356131fe81613017565b809150509250925092565b6000806040838503121561321c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b6000828210156132535761325361322b565b500390565b60008261327557634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561328d5761328d61322b565b500190565b60008160001904831182151516156132ac576132ac61322b565b500290565b6000600182016132c3576132c361322b565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156132f257600080fd5b815161106a81613017565b60006020828403121561330f57600080fd5b8151801515811461106a57600080fd5b60006020828403121561333157600080fd5b5051919050565b6000825160005b81811015613359576020818601810151858301520161333f565b81811115613368576000828501525b509190910192915050565b6000806040838503121561338657600080fd5b505080516020909101519092909150565b600080604083850312156133aa57600080fd5b82516133b581613017565b60208401519092506130968161301756fea2646970667358221220d3d5846418c8a989d07a62131dbd9fbd6198a140718eb6845440fdb0e3af1de564736f6c634300080d0033a264697066735822122033bb32f75eb748f30d848ded2119eaa78f2bd974bb37bd01b17846c6040fa11364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21420,
        "contract": "contracts/factories/GaugeFactory.sol:GaugeFactory",
        "label": "last_gauge",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}