{
  "address": "0xfe873D4923b343F0D6BD98045a9C82D8dDEC511E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "getMinimumValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "getSample",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "getTradeDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getTradeDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc919c4b01eba0c3723bcd8d8270941d15e976df506c6089fbad1db856248e17e",
  "receipt": {
    "to": null,
    "from": "0x53f3B51FD7F327E1Ec4E6eAa3A049149cB2acaD2",
    "contractAddress": "0xfe873D4923b343F0D6BD98045a9C82D8dDEC511E",
    "transactionIndex": 2,
    "gasUsed": "6199193",
    "logsBloom": "0x
    "blockHash": "0xd583e75c029e17593f34c157da62910008d69f3c40f7fec1f19defb2acbcd44d",
    "transactionHash": "0xc919c4b01eba0c3723bcd8d8270941d15e976df506c6089fbad1db856248e17e",
    "logs": [],
    "blockNumber": 58032049,
    "cumulativeGasUsed": "7479073",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x52A18b2386D6221Cf9DbcD4790456a23249e5279"
  ],
  "numDeployments": 1,
  "solcInputHash": "816572db58a4a8203fcf6f77728173df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getMinimumValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getSample\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getTradeDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getTradeDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VelocimeterLibrary.sol\":\"VelocimeterLibrary\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363735353339323034313033\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/VelocimeterLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"contracts/interfaces/IPair.sol\\\";\\nimport \\\"contracts/interfaces/IRouter.sol\\\";\\n\\ncontract VelocimeterLibrary {\\n    IRouter internal immutable router;\\n\\n    constructor(address _router) {\\n        router = IRouter(_router);\\n    }\\n\\n    function _f(uint x0, uint y) internal pure returns (uint) {\\n        return x0*(y*y/1e18*y/1e18)/1e18+(x0*x0/1e18*x0/1e18)*y/1e18;\\n    }\\n\\n    function _d(uint x0, uint y) internal pure returns (uint) {\\n        return 3*x0*(y*y/1e18)/1e18+(x0*x0/1e18*x0/1e18);\\n    }\\n\\n    function _get_y(uint x0, uint xy, uint y) internal pure returns (uint) {\\n        for (uint i = 0; i < 255; i++) {\\n            uint y_prev = y;\\n            uint k = _f(x0, y);\\n            if (k < xy) {\\n                uint dy = (xy - k)*1e18/_d(x0, y);\\n                y = y + dy;\\n            } else {\\n                uint dy = (k - xy)*1e18/_d(x0, y);\\n                y = y - dy;\\n            }\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    return y;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    return y;\\n                }\\n            }\\n        }\\n        return y;\\n    }\\n\\n    function getTradeDiff(uint amountIn, address tokenIn, address tokenOut, bool stable) external view returns (uint a, uint b) {\\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0,) = IPair(router.pairFor(tokenIn, tokenOut, stable)).metadata();\\n        uint sample = tokenIn == t0 ? r0*dec1/r1 : r1*dec0/r0;\\n        a = _getAmountOut(sample, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / sample;\\n        b = _getAmountOut(amountIn, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / amountIn;\\n    }\\n\\n    function getTradeDiff(uint amountIn, address tokenIn, address pair) external view returns (uint a, uint b) {\\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0,) = IPair(pair).metadata();\\n        uint sample = tokenIn == t0 ? r0*dec1/r1 : r1*dec0/r0;\\n        a = _getAmountOut(sample, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / sample;\\n        b = _getAmountOut(amountIn, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / amountIn;\\n    }\\n\\n    function getSample(address tokenIn, address tokenOut, bool stable) external view returns (uint) {\\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0,) = IPair(router.pairFor(tokenIn, tokenOut, stable)).metadata();\\n        uint sample = tokenIn == t0 ? r0*dec1/r1 : r1*dec0/r0;\\n        return _getAmountOut(sample, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / sample;\\n    }\\n\\n    function getMinimumValue(address tokenIn, address tokenOut, bool stable) external view returns (uint, uint, uint) {\\n        (uint dec0, uint dec1, uint r0, uint r1,, address t0,) = IPair(router.pairFor(tokenIn, tokenOut, stable)).metadata();\\n        uint sample = tokenIn == t0 ? r0*dec1/r1 : r1*dec0/r0;\\n        return (sample, r0, r1);\\n    }\\n\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut, bool stable) external view returns (uint) {\\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0,) = IPair(router.pairFor(tokenIn, tokenOut, stable)).metadata();\\n        return _getAmountOut(amountIn, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / amountIn;\\n    }\\n\\n    function _getAmountOut(uint amountIn, address tokenIn, uint _reserve0, uint _reserve1, address token0, uint decimals0, uint decimals1, bool stable) internal pure returns (uint) {\\n        if (stable) {\\n            uint xy =  _k(_reserve0, _reserve1, stable, decimals0, decimals1);\\n            _reserve0 = _reserve0 * 1e18 / decimals0;\\n            _reserve1 = _reserve1 * 1e18 / decimals1;\\n            (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n            amountIn = tokenIn == token0 ? amountIn * 1e18 / decimals0 : amountIn * 1e18 / decimals1;\\n            uint y = reserveB - _get_y(amountIn+reserveA, xy, reserveB);\\n            return y * (tokenIn == token0 ? decimals1 : decimals0) / 1e18;\\n        } else {\\n            (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n            return amountIn * reserveB / (reserveA + amountIn);\\n        }\\n    }\\n\\n    function _k(uint x, uint y, bool stable, uint decimals0, uint decimals1) internal pure returns (uint) {\\n        if (stable) {\\n            uint _x = x * 1e18 / decimals0;\\n            uint _y = y * 1e18 / decimals1;\\n            uint _a = (_x * _y) / 1e18;\\n            uint _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\n            return _a * _b / 1e18;  // x3y+y3x >= k\\n        } else {\\n            return x * y; // xy >= k\\n        }\\n    }\\n    \\n}\\n\",\"keccak256\":\"0x8fa888fd7bda7d3d44a2cc0fd62aeb594c767907f24e7cd390a5fe998d60f388\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IPair {\\n    function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1);\\n    function claimFees() external returns (uint, uint);\\n    function tokens() external returns (address, address);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x796005a0babe921334bacab4a90a551bc7f2ddfb030350a6ba590a9d8440daee\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IRouter {\\n    function pairFor(address tokenA, address tokenB, bool stable) external view returns (address pair);\\n}\\n\",\"keccak256\":\"0x04f633ac6fcef1d040061320eae105b04094d6eb73dfd8a119293e11df24128f\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063525007331461005c578063865db5e21461008f578063be3b428e146100b7578063da214231146100d8578063ec323c00146100eb575b600080fd5b61006f61006a366004610d03565b6100fe565b604080519384526020840192909252908201526060015b60405180910390f35b6100a261009d366004610d4e565b610265565b60408051928352602083019190915201610086565b6100ca6100c5366004610d03565b61042a565b604051908152602001610086565b6100ca6100e6366004610d4e565b6105be565b6100a26100f9366004610da1565b610704565b6000806000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634c1ee03e8c8c8c6040518463ffffffff1660e01b815260040161015a93929190610dd8565b602060405180830381865afa158015610177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019b9190610dfc565b6001600160a01b031663392f37e96040518163ffffffff1660e01b815260040160e060405180830381865afa1580156101d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fc9190610e19565b5095505094509450945094506000816001600160a01b03168c6001600160a01b03161461023d578361022e8785610ea3565b6102389190610ec2565b610252565b826102488686610ea3565b6102529190610ec2565b9c939b5091995091975050505050505050565b6000806000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634c1ee03e8c8c8c6040518463ffffffff1660e01b81526004016102c193929190610dd8565b602060405180830381865afa1580156102de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103029190610dfc565b6001600160a01b031663392f37e96040518163ffffffff1660e01b815260040160e060405180830381865afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103639190610e19565b509550955095509550955095506000816001600160a01b03168c6001600160a01b0316146103a557846103968886610ea3565b6103a09190610ec2565b6103ba565b836103b08787610ea3565b6103ba9190610ec2565b9050806103cd828e8888878d8d8b610838565b6103df90670de0b6b3a7640000610ea3565b6103e99190610ec2565b98508c6103fc8e8e8888878d8d8b610838565b61040e90670de0b6b3a7640000610ea3565b6104189190610ec2565b97505050505050505094509492505050565b60008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634c1ee03e8b8b8b6040518463ffffffff1660e01b815260040161048593929190610dd8565b602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190610dfc565b6001600160a01b031663392f37e96040518163ffffffff1660e01b815260040160e060405180830381865afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105279190610e19565b509550955095509550955095506000816001600160a01b03168b6001600160a01b031614610569578461055a8886610ea3565b6105649190610ec2565b61057e565b836105748787610ea3565b61057e9190610ec2565b905080610591828d8888878d8d8b610838565b6105a390670de0b6b3a7640000610ea3565b6105ad9190610ec2565b9750505050505050505b9392505050565b60008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634c1ee03e8b8b8b6040518463ffffffff1660e01b815260040161061993929190610dd8565b602060405180830381865afa158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a9190610dfc565b6001600160a01b031663392f37e96040518163ffffffff1660e01b815260040160e060405180830381865afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb9190610e19565b509550955095509550955095508a6106d98c8c8787868c8c8a610838565b6106eb90670de0b6b3a7640000610ea3565b6106f59190610ec2565b9b9a5050505050505050505050565b600080600080600080600080886001600160a01b031663392f37e96040518163ffffffff1660e01b815260040160e060405180830381865afa15801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190610e19565b509550955095509550955095506000816001600160a01b03168b6001600160a01b0316146107b457846107a58886610ea3565b6107af9190610ec2565b6107c9565b836107bf8787610ea3565b6107c99190610ec2565b9050806107dc828d8888878d8d8b610838565b6107ee90670de0b6b3a7640000610ea3565b6107f89190610ec2565b98508b61080b8d8d8888878d8d8b610838565b61081d90670de0b6b3a7640000610ea3565b6108279190610ec2565b975050505050505050935093915050565b6000811561097e57600061084f88888588886109d8565b90508461086489670de0b6b3a7640000610ea3565b61086e9190610ec2565b97508361088388670de0b6b3a7640000610ea3565b61088d9190610ec2565b9650600080876001600160a01b03168b6001600160a01b0316146108b257888a6108b5565b89895b91509150876001600160a01b03168b6001600160a01b0316146108f457856108e58d670de0b6b3a7640000610ea3565b6108ef9190610ec2565b610911565b866109078d670de0b6b3a7640000610ea3565b6109119190610ec2565b9b506000610929610922848f610ee4565b8584610ac9565b6109339083610efc565b9050670de0b6b3a7640000896001600160a01b03168d6001600160a01b03161461095d578861095f565b875b6109699083610ea3565b6109739190610ec2565b9450505050506109cc565b600080866001600160a01b03168a6001600160a01b0316146109a15787896109a4565b88885b90925090506109b38b83610ee4565b6109bd828d610ea3565b6109c79190610ec2565b925050505b98975050505050505050565b60008315610ab3576000836109f588670de0b6b3a7640000610ea3565b6109ff9190610ec2565b9050600083610a1688670de0b6b3a7640000610ea3565b610a209190610ec2565b90506000670de0b6b3a7640000610a378385610ea3565b610a419190610ec2565b90506000670de0b6b3a7640000610a588480610ea3565b610a629190610ec2565b670de0b6b3a7640000610a758680610ea3565b610a7f9190610ec2565b610a899190610ee4565b9050670de0b6b3a7640000610a9e8284610ea3565b610aa89190610ec2565b945050505050610ac0565b610abd8587610ea3565b90505b95945050505050565b6000805b60ff811015610bcf57826000610ae38783610bd8565b905085811015610b33576000610af98887610c75565b610b038389610efc565b610b1590670de0b6b3a7640000610ea3565b610b1f9190610ec2565b9050610b2b8187610ee4565b955050610b75565b6000610b3f8887610c75565b610b498884610efc565b610b5b90670de0b6b3a7640000610ea3565b610b659190610ec2565b9050610b718187610efc565b9550505b81851115610b9e576001610b898387610efc565b11610b99578493505050506105b7565b610bba565b6001610baa8684610efc565b11610bba578493505050506105b7565b50508080610bc790610f13565b915050610acd565b50909392505050565b6000670de0b6b3a764000082818581610bf18280610ea3565b610bfb9190610ec2565b610c059190610ea3565b610c0f9190610ec2565b610c199190610ea3565b610c239190610ec2565b670de0b6b3a7640000808481610c398280610ea3565b610c439190610ec2565b610c4d9190610ea3565b610c579190610ec2565b610c619086610ea3565b610c6b9190610ec2565b6105b79190610ee4565b6000670de0b6b3a76400008381610c8c8280610ea3565b610c969190610ec2565b610ca09190610ea3565b610caa9190610ec2565b670de0b6b3a764000080610cbe8580610ea3565b610cc89190610ec2565b610cd3866003610ea3565b610c619190610ea3565b6001600160a01b0381168114610cf257600080fd5b50565b8015158114610cf257600080fd5b600080600060608486031215610d1857600080fd5b8335610d2381610cdd565b92506020840135610d3381610cdd565b91506040840135610d4381610cf5565b809150509250925092565b60008060008060808587031215610d6457600080fd5b843593506020850135610d7681610cdd565b92506040850135610d8681610cdd565b91506060850135610d9681610cf5565b939692955090935050565b600080600060608486031215610db657600080fd5b833592506020840135610dc881610cdd565b91506040840135610d4381610cdd565b6001600160a01b039384168152919092166020820152901515604082015260600190565b600060208284031215610e0e57600080fd5b81516105b781610cdd565b600080600080600080600060e0888a031215610e3457600080fd5b875196506020880151955060408801519450606088015193506080880151610e5b81610cf5565b60a0890151909350610e6c81610cdd565b60c0890151909250610e7d81610cdd565b8091505092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610ebd57610ebd610e8d565b500290565b600082610edf57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610ef757610ef7610e8d565b500190565b600082821015610f0e57610f0e610e8d565b500390565b600060018201610f2557610f25610e8d565b506001019056fea2646970667358221220792878ccaa1ffb9f37b02a29e85a06e7a64a3ab2fabca685c4b98b1d383b18e064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}