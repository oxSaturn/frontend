{
  "language": "Solidity",
  "sources": {
    "contracts/ExternalBribe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\n\nimport \"contracts/interfaces/IBribe.sol\";\nimport \"contracts/interfaces/IERC20.sol\";\nimport \"contracts/interfaces/IGauge.sol\";\nimport \"contracts/interfaces/IVoter.sol\";\nimport \"contracts/interfaces/IVotingEscrow.sol\";\n\n// Bribes pay out rewards for a given pool based on the votes that were received from the user (goes hand in hand with Voter.vote())\ncontract ExternalBribe is IBribe {\n    address public immutable voter; // only voter can modify balances (since it only happens on vote())\n    address public immutable _ve; // 天使のたまご\n\n    uint256 internal constant DURATION = 7 days; // rewards are released over the voting period\n    uint256 internal constant MAX_REWARD_TOKENS = 16;\n\n    uint256 internal constant PRECISION = 10**18;\n\n    uint256 public totalSupply;\n    mapping(uint256 => uint256) public balanceOf;\n    mapping(address => mapping(uint256 => uint256)) public tokenRewardsPerEpoch;\n    mapping(address => uint256) public periodFinish;\n    mapping(address => mapping(uint256 => uint256)) public lastEarn;\n\n    address[] public rewards;\n    mapping(address => bool) public isReward;\n\n    /// @notice A checkpoint for marking balance\n    struct Checkpoint {\n        uint256 timestamp;\n        uint256 balanceOf;\n    }\n\n    /// @notice A checkpoint for marking supply\n    struct SupplyCheckpoint {\n        uint256 timestamp;\n        uint256 supply;\n    }\n\n    /// @notice A record of balance checkpoints for each account, by index\n    mapping(uint256 => mapping(uint256 => Checkpoint)) public checkpoints;\n    /// @notice The number of checkpoints for each account\n    mapping(uint256 => uint256) public numCheckpoints;\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\n    /// @notice The number of checkpoints\n    uint256 public supplyNumCheckpoints;\n\n    event Deposit(address indexed from, uint256 tokenId, uint256 amount);\n    event Withdraw(address indexed from, uint256 tokenId, uint256 amount);\n    event NotifyReward(\n        address indexed from,\n        address indexed reward,\n        uint256 epoch,\n        uint256 amount\n    );\n    event ClaimRewards(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n\n    constructor(address _voter, address[] memory _allowedRewardTokens) {\n        voter = _voter;\n        _ve = IVoter(_voter)._ve();\n\n        for (uint256 i; i < _allowedRewardTokens.length; i++) {\n            if (_allowedRewardTokens[i] != address(0)) {\n                isReward[_allowedRewardTokens[i]] = true;\n                rewards.push(_allowedRewardTokens[i]);\n            }\n        }\n    }\n\n    // simple re-entrancy check\n    uint256 internal _unlocked = 1;\n    modifier lock() {\n        require(_unlocked == 1);\n        _unlocked = 2;\n        _;\n        _unlocked = 1;\n    }\n\n    function _bribeStart(uint256 timestamp) internal pure returns (uint256) {\n        return timestamp - (timestamp % (7 days));\n    }\n\n    function getEpochStart(uint256 timestamp) public pure returns (uint256) {\n        uint256 bribeStart = _bribeStart(timestamp);\n        uint256 bribeEnd = bribeStart + DURATION;\n        return timestamp < bribeEnd ? bribeStart : bribeStart + 7 days;\n    }\n\n    /**\n     * @notice Determine the prior balance for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param tokenId The token of the NFT to check\n     * @param timestamp The timestamp to get the balance at\n     * @return The balance the account had as of the given block\n     */\n    function getPriorBalanceIndex(uint256 tokenId, uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = numCheckpoints[tokenId];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n        // First check most recent balance\n        if (checkpoints[tokenId][nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n        // Next check implicit zero balance\n        if (checkpoints[tokenId][0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[tokenId][center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorSupplyIndex(uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = supplyNumCheckpoints;\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (supplyCheckpoints[0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function _writeCheckpoint(uint256 tokenId, uint256 balance) internal {\n        uint256 _timestamp = block.timestamp;\n        uint256 _nCheckPoints = numCheckpoints[tokenId];\n        if (\n            _nCheckPoints > 0 &&\n            checkpoints[tokenId][_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            checkpoints[tokenId][_nCheckPoints - 1].balanceOf = balance;\n        } else {\n            checkpoints[tokenId][_nCheckPoints] = Checkpoint(\n                _timestamp,\n                balance\n            );\n            numCheckpoints[tokenId] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeSupplyCheckpoint() internal {\n        uint256 _nCheckPoints = supplyNumCheckpoints;\n        uint256 _timestamp = block.timestamp;\n\n        if (\n            _nCheckPoints > 0 &&\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            supplyCheckpoints[_nCheckPoints - 1].supply = totalSupply;\n        } else {\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\n                _timestamp,\n                totalSupply\n            );\n            supplyNumCheckpoints = _nCheckPoints + 1;\n        }\n    }\n\n    function rewardsListLength() external view returns (uint256) {\n        return rewards.length;\n    }\n\n    // returns the last time the reward was modified or periodFinish if the reward has ended\n    function lastTimeRewardApplicable(address token)\n        public\n        view\n        returns (uint256)\n    {\n        return Math.min(block.timestamp, periodFinish[token]);\n    }\n\n    // allows a user to claim rewards for a given token\n    function getReward(uint256 tokenId, address[] memory tokens) external lock {\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, tokenId));\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 _reward = earned(tokens[i], tokenId);\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\n            if (_reward > 0) _safeTransfer(tokens[i], msg.sender, _reward);\n\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\n        }\n    }\n\n    // used by Voter to allow batched reward claims\n    function getRewardForOwner(uint256 tokenId, address[] memory tokens)\n        external\n        lock\n    {\n        require(msg.sender == voter);\n        address _owner = IVotingEscrow(_ve).ownerOf(tokenId);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 _reward = earned(tokens[i], tokenId);\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\n            if (_reward > 0) _safeTransfer(tokens[i], _owner, _reward);\n\n            emit ClaimRewards(_owner, tokens[i], _reward);\n        }\n    }\n\n    function earned(address token, uint256 tokenId)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _startTimestamp = lastEarn[token][tokenId];\n        if (numCheckpoints[tokenId] == 0) {\n            return 0;\n        }\n\n        uint256 _startIndex = getPriorBalanceIndex(tokenId, _startTimestamp);\n        uint256 _endIndex = numCheckpoints[tokenId] - 1;\n\n        uint256 reward = 0;\n        // you only earn once per epoch (after it's over)\n        Checkpoint memory prevRewards; // reuse struct to avoid stack too deep\n        prevRewards.timestamp = _bribeStart(_startTimestamp);\n        uint256 _prevSupply = 1;\n\n        if (_endIndex > 0) {\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\n                Checkpoint memory cp0 = checkpoints[tokenId][i];\n                uint256 _nextEpochStart = _bribeStart(cp0.timestamp);\n                // check that you've earned it\n                // this won't happen until a week has passed\n                if (_nextEpochStart > prevRewards.timestamp) {\n                    reward += prevRewards.balanceOf;\n                }\n\n                prevRewards.timestamp = _nextEpochStart;\n                _prevSupply = supplyCheckpoints[\n                    getPriorSupplyIndex(_nextEpochStart + DURATION)\n                ].supply;\n                prevRewards.balanceOf =\n                    (cp0.balanceOf *\n                        tokenRewardsPerEpoch[token][_nextEpochStart]) /\n                    _prevSupply;\n            }\n        }\n\n        Checkpoint memory cp = checkpoints[tokenId][_endIndex];\n        uint256 _lastEpochStart = _bribeStart(cp.timestamp);\n        uint256 _lastEpochEnd = _lastEpochStart + DURATION;\n\n        if (block.timestamp > _lastEpochEnd) {\n            reward +=\n                (cp.balanceOf * tokenRewardsPerEpoch[token][_lastEpochStart]) /\n                supplyCheckpoints[getPriorSupplyIndex(_lastEpochEnd)].supply;\n        }\n\n        return reward;\n    }\n\n    // This is an external function, but internal notation is used since it can only be called \"internally\" from Gauges\n    function _deposit(uint256 amount, uint256 tokenId) external {\n        require(msg.sender == voter);\n\n        totalSupply += amount;\n        balanceOf[tokenId] += amount;\n\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\n        _writeSupplyCheckpoint();\n\n        emit Deposit(msg.sender, tokenId, amount);\n    }\n\n    function _withdraw(uint256 amount, uint256 tokenId) external {\n        require(msg.sender == voter);\n\n        totalSupply -= amount;\n        balanceOf[tokenId] -= amount;\n\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\n        _writeSupplyCheckpoint();\n\n        emit Withdraw(msg.sender, tokenId, amount);\n    }\n\n    function left(address token) external view returns (uint256) {\n        uint256 adjustedTstamp = getEpochStart(block.timestamp);\n        return tokenRewardsPerEpoch[token][adjustedTstamp];\n    }\n\n    function notifyRewardAmount(address token, uint256 amount) external lock {\n        require(amount > 0);\n        if (!isReward[token]) {\n            require(\n                IVoter(voter).isWhitelisted(token),\n                \"bribe tokens must be whitelisted\"\n            );\n            require(\n                rewards.length < MAX_REWARD_TOKENS,\n                \"too many rewards tokens\"\n            );\n        }\n        // bribes kick in at the start of next bribe period\n        uint256 adjustedTstamp = getEpochStart(block.timestamp);\n        uint256 epochRewards = tokenRewardsPerEpoch[token][adjustedTstamp];\n\n        _safeTransferFrom(token, msg.sender, address(this), amount);\n        tokenRewardsPerEpoch[token][adjustedTstamp] = epochRewards + amount;\n\n        periodFinish[token] = adjustedTstamp + DURATION;\n\n        if (!isReward[token]) {\n            isReward[token] = true;\n            rewards.push(token);\n        }\n\n        emit NotifyReward(msg.sender, token, adjustedTstamp, amount);\n    }\n\n    function swapOutRewardToken(\n        uint256 i,\n        address oldToken,\n        address newToken\n    ) external {\n        require(msg.sender == IVotingEscrow(_ve).team(), \"only team\");\n        require(rewards[i] == oldToken);\n        isReward[oldToken] = false;\n        isReward[newToken] = true;\n        rewards[i] = newToken;\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n}\n"
    },
    "contracts/ExternalBribeV.sol": {
      "content": ""
    },
    "contracts/factories/BribeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"contracts/interfaces/IBribeFactory.sol\";\nimport \"contracts/InternalBribe.sol\";\nimport \"contracts/ExternalBribe.sol\";\n\ncontract BribeFactory is IBribeFactory {\n    address public last_internal_bribe;\n    address public last_external_bribe;\n\n    function createInternalBribe(address[] memory allowedRewards)\n        external\n        returns (address)\n    {\n        last_internal_bribe = address(\n            new InternalBribe(msg.sender, allowedRewards)\n        );\n        return last_internal_bribe;\n    }\n\n    function createExternalBribe(address[] memory allowedRewards)\n        external\n        returns (address)\n    {\n        last_external_bribe = address(\n            new ExternalBribe(msg.sender, allowedRewards)\n        );\n        return last_external_bribe;\n    }\n}\n"
    },
    "contracts/factories/GaugeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport 'contracts/interfaces/IGaugeFactory.sol';\nimport 'contracts/Gauge.sol';\n\ncontract GaugeFactory is IGaugeFactory {\n    address public last_gauge;\n\n    function createGauge(address _pool, address _internal_bribe, address _external_bribe, address _ve, bool isPair, address[] memory allowedRewards) external returns (address) {\n        last_gauge = address(new Gauge(_pool, _internal_bribe, _external_bribe, _ve, msg.sender, isPair, allowedRewards));\n        return last_gauge;\n    }\n}\n"
    },
    "contracts/factories/PairFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"contracts/interfaces/IPairFactory.sol\";\nimport \"contracts/Pair.sol\";\n\ncontract PairFactory is IPairFactory {\n    bool public isPaused;\n    address public pauser;\n    address public pendingPauser;\n\n    uint256 public stableFee;\n    uint256 public volatileFee;\n    uint256 public constant MAX_FEE = 50; // 0.5%\n    address public feeManager;\n    address public pendingFeeManager;\n\n    mapping(address => mapping(address => mapping(bool => address)))\n        public getPair;\n    address[] public allPairs;\n    mapping(address => bool) public isPair; // simplified check if its a pair, given that `stable` flag might not be available in peripherals\n\n    address internal _temp0;\n    address internal _temp1;\n    bool internal _temp;\n\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        bool stable,\n        address pair,\n        uint256\n    );\n\n    constructor() {\n        pauser = msg.sender;\n        isPaused = false;\n        feeManager = msg.sender;\n        // stableFee = 2; // 0.02%\n        // volatileFee = 2;\n        stableFee = 3; // 0.03%\n        volatileFee = 25; // 0.25%\n    }\n\n    function allPairsLength() external view returns (uint256) {\n        return allPairs.length;\n    }\n\n    function setPauser(address _pauser) external {\n        require(msg.sender == pauser);\n        pendingPauser = _pauser;\n    }\n\n    function acceptPauser() external {\n        require(msg.sender == pendingPauser);\n        pauser = pendingPauser;\n    }\n\n    function setPause(bool _state) external {\n        require(msg.sender == pauser);\n        isPaused = _state;\n    }\n\n    function setFeeManager(address _feeManager) external {\n        require(msg.sender == feeManager, \"not fee manager\");\n        pendingFeeManager = _feeManager;\n    }\n\n    function acceptFeeManager() external {\n        require(msg.sender == pendingFeeManager, \"not pending fee manager\");\n        feeManager = pendingFeeManager;\n    }\n\n    function setFee(bool _stable, uint256 _fee) external {\n        require(msg.sender == feeManager, \"not fee manager\");\n        require(_fee <= MAX_FEE, \"fee too high\");\n        require(_fee != 0, \"fee must be nonzero\");\n        if (_stable) {\n            stableFee = _fee;\n        } else {\n            volatileFee = _fee;\n        }\n    }\n\n    function getFee(bool _stable) public view returns (uint256) {\n        return _stable ? stableFee : volatileFee;\n    }\n\n    function pairCodeHash() external pure returns (bytes32) {\n        return keccak256(type(Pair).creationCode);\n    }\n\n    function getInitializable()\n        external\n        view\n        returns (\n            address,\n            address,\n            bool\n        )\n    {\n        return (_temp0, _temp1, _temp);\n    }\n\n    function createPair(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) external returns (address pair) {\n        require(tokenA != tokenB, \"IA\"); // Pair: IDENTICAL_ADDRESSES\n        (address token0, address token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"ZA\"); // Pair: ZERO_ADDRESS\n        require(getPair[token0][token1][stable] == address(0), \"PE\"); // Pair: PAIR_EXISTS - single check is sufficient\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, stable)); // notice salt includes stable as well, 3 parameters\n        (_temp0, _temp1, _temp) = (token0, token1, stable);\n        pair = address(new Pair{salt: salt}());\n        getPair[token0][token1][stable] = pair;\n        getPair[token1][token0][stable] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        isPair[pair] = true;\n        emit PairCreated(token0, token1, stable, pair, allPairs.length);\n    }\n}\n"
    },
    "contracts/factories/WrappedExternalBribeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {WrappedExternalBribe} from 'contracts/WrappedExternalBribe.sol';\n\ncontract WrappedExternalBribeFactory {\n    address public immutable voter;\n    mapping(address => address) public oldBribeToNew;\n    address public last_bribe;\n\n    constructor(address _voter) {\n        voter = _voter;\n    }\n\n    function createBribe(address existing_bribe) external returns (address) {\n        require(\n            oldBribeToNew[existing_bribe] == address(0),\n            \"Wrapped bribe already created\"\n        );\n        last_bribe = address(new WrappedExternalBribe(voter, existing_bribe));\n        oldBribeToNew[existing_bribe] = last_bribe;\n        return last_bribe;\n    }\n}\n"
    },
    "contracts/Flow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"contracts/interfaces/IFlow.sol\";\n\ncontract Flow is IFlow {\n    string public constant name = \"Velocimeter\";\n    string public constant symbol = \"FLOW\";\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply = 0;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    bool public initialMinted;\n    address public minter;\n    address public redemptionReceiver;\n    address public merkleClaim;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    constructor() {\n        minter = msg.sender;\n        _mint(msg.sender, 0);\n    }\n\n    // No checks as its meant to be once off to set minting rights to BaseV1 Minter\n    function setMinter(address _minter) external {\n        require(msg.sender == minter);\n        minter = _minter;\n    }\n\n    function setRedemptionReceiver(address _receiver) external {\n        require(msg.sender == minter);\n        redemptionReceiver = _receiver;\n    }\n\n    function setMerkleClaim(address _merkleClaim) external {\n        require(msg.sender == minter);\n        merkleClaim = _merkleClaim;\n    }\n\n    // NFTs are minted from this amount as well now\n    function initialMint(address _recipient) external {\n        require(msg.sender == minter && !initialMinted);\n        initialMinted = true;\n        _mint(_recipient, 400 * 1e6 * 1e18); //#settings\n    }\n\n    function approve(address _spender, uint256 _value) external returns (bool) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function _mint(address _to, uint256 _amount) internal returns (bool) {\n        totalSupply += _amount;\n        unchecked {\n            balanceOf[_to] += _amount;\n        }\n        emit Transfer(address(0x0), _to, _amount);\n        return true;\n    }\n\n    function _transfer(\n        address _from,\n        address _to,\n        uint256 _value\n    ) internal returns (bool) {\n        balanceOf[_from] -= _value;\n        unchecked {\n            balanceOf[_to] += _value;\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) external returns (bool) {\n        return _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool) {\n        uint256 allowed_from = allowance[_from][msg.sender];\n        if (allowed_from != type(uint256).max) {\n            allowance[_from][msg.sender] -= _value;\n        }\n        return _transfer(_from, _to, _value);\n    }\n\n    function mint(address account, uint256 amount) external returns (bool) {\n        require(msg.sender == minter);\n        _mint(account, amount);\n        return true;\n    }\n\n    function claim(address account, uint256 amount) external returns (bool) {\n        require(msg.sender == redemptionReceiver || msg.sender == merkleClaim);\n        _mint(account, amount);\n        return true;\n    }\n}\n"
    },
    "contracts/FlowGovernor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {IGovernor} from \"lib/openzeppelin-contracts/contracts/governance/IGovernor.sol\";\nimport {IVotes} from \"lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol\";\n\nimport {L2Governor} from \"contracts/governance/L2Governor.sol\";\nimport {L2GovernorCountingSimple} from \"contracts/governance/L2GovernorCountingSimple.sol\";\nimport {L2GovernorVotes} from \"contracts/governance/L2GovernorVotes.sol\";\nimport {L2GovernorVotesQuorumFraction} from \"contracts/governance/L2GovernorVotesQuorumFraction.sol\";\n\ncontract FlowGovernor is\n    L2Governor,\n    L2GovernorCountingSimple,\n    L2GovernorVotes,\n    L2GovernorVotesQuorumFraction\n{\n    address public team;\n    uint256 public constant MAX_PROPOSAL_NUMERATOR = 50; // max 5%\n    uint256 public constant PROPOSAL_DENOMINATOR = 1000;\n    uint256 public proposalNumerator = 2; // start at 0.02%\n\n    constructor(IVotes _ve)\n        L2Governor(\"Velocimeter Governor\")\n        L2GovernorVotes(_ve)\n        L2GovernorVotesQuorumFraction(4) // 4%\n    {\n        team = msg.sender;\n    }\n\n    function votingDelay() public pure override(IGovernor) returns (uint256) {\n        return 15 minutes; // 1 block\n    }\n\n    function votingPeriod() public pure override(IGovernor) returns (uint256) {\n        return 1 weeks;\n    }\n\n    function setTeam(address newTeam) external {\n        require(msg.sender == team, \"not team\");\n        team = newTeam;\n    }\n\n    function setProposalNumerator(uint256 numerator) external {\n        require(msg.sender == team, \"not team\");\n        require(numerator <= MAX_PROPOSAL_NUMERATOR, \"numerator too high\");\n        proposalNumerator = numerator;\n    }\n\n    function proposalThreshold()\n        public\n        view\n        override(L2Governor)\n        returns (uint256)\n    {\n        return\n            (token.getPastTotalSupply(block.timestamp) * proposalNumerator) /\n            PROPOSAL_DENOMINATOR;\n    }\n}\n"
    },
    "contracts/Gauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\nimport \"contracts/interfaces/IBribe.sol\";\nimport \"contracts/interfaces/IERC20.sol\";\nimport \"contracts/interfaces/IGauge.sol\";\nimport \"contracts/interfaces/IPair.sol\";\nimport \"contracts/interfaces/IVoter.sol\";\nimport \"contracts/interfaces/IVotingEscrow.sol\";\n\n// Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\ncontract Gauge is IGauge {\n    address public immutable stake; // the LP token that needs to be staked for rewards\n    address public immutable _ve; // the ve token used for gauges\n    address public immutable internal_bribe;\n    address public immutable external_bribe;\n    address public immutable voter;\n\n    uint256 public derivedSupply;\n    mapping(address => uint256) public derivedBalances;\n\n    bool public isForPair;\n\n    uint256 internal constant DURATION = 7 days; // rewards are released over 7 days\n    uint256 internal constant PRECISION = 10**18;\n    uint256 internal constant MAX_REWARD_TOKENS = 16;\n\n    // default snx staking contract implementation\n    mapping(address => uint256) public rewardRate;\n    mapping(address => uint256) public periodFinish;\n    mapping(address => uint256) public lastUpdateTime;\n    mapping(address => uint256) public rewardPerTokenStored;\n\n    mapping(address => mapping(address => uint256)) public lastEarn;\n    mapping(address => mapping(address => uint256))\n        public userRewardPerTokenStored;\n\n    mapping(address => uint256) public tokenIds;\n\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n\n    address[] public rewards;\n    mapping(address => bool) public isReward;\n\n    /// @notice A checkpoint for marking balance\n    struct Checkpoint {\n        uint256 timestamp;\n        uint256 balanceOf;\n    }\n\n    /// @notice A checkpoint for marking reward rate\n    struct RewardPerTokenCheckpoint {\n        uint256 timestamp;\n        uint256 rewardPerToken;\n    }\n\n    /// @notice A checkpoint for marking supply\n    struct SupplyCheckpoint {\n        uint256 timestamp;\n        uint256 supply;\n    }\n\n    /// @notice A record of balance checkpoints for each account, by index\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\n    /// @notice The number of checkpoints for each account\n    mapping(address => uint256) public numCheckpoints;\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\n    /// @notice The number of checkpoints\n    uint256 public supplyNumCheckpoints;\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(address => mapping(uint256 => RewardPerTokenCheckpoint))\n        public rewardPerTokenCheckpoints;\n    /// @notice The number of checkpoints for each token\n    mapping(address => uint256) public rewardPerTokenNumCheckpoints;\n\n    uint256 public fees0;\n    uint256 public fees1;\n\n    event Deposit(address indexed from, uint256 tokenId, uint256 amount);\n    event Withdraw(address indexed from, uint256 tokenId, uint256 amount);\n    event NotifyReward(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n    event ClaimFees(address indexed from, uint256 claimed0, uint256 claimed1);\n    event ClaimRewards(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n\n    constructor(\n        address _stake,\n        address _internal_bribe,\n        address _external_bribe,\n        address __ve,\n        address _voter,\n        bool _forPair,\n        address[] memory _allowedRewardTokens\n    ) {\n        stake = _stake;\n        internal_bribe = _internal_bribe;\n        external_bribe = _external_bribe;\n        _ve = __ve;\n        voter = _voter;\n        isForPair = _forPair;\n\n        for (uint256 i; i < _allowedRewardTokens.length; i++) {\n            if (_allowedRewardTokens[i] != address(0)) {\n                isReward[_allowedRewardTokens[i]] = true;\n                rewards.push(_allowedRewardTokens[i]);\n            }\n        }\n    }\n\n    // simple re-entrancy check\n    uint256 internal _unlocked = 1;\n    modifier lock() {\n        require(_unlocked == 1);\n        _unlocked = 2;\n        _;\n        _unlocked = 1;\n    }\n\n    function claimFees()\n        external\n        lock\n        returns (uint256 claimed0, uint256 claimed1)\n    {\n        return _claimFees();\n    }\n\n    function _claimFees()\n        internal\n        returns (uint256 claimed0, uint256 claimed1)\n    {\n        if (!isForPair) {\n            return (0, 0);\n        }\n        (claimed0, claimed1) = IPair(stake).claimFees();\n        if (claimed0 > 0 || claimed1 > 0) {\n            uint256 _fees0 = fees0 + claimed0;\n            uint256 _fees1 = fees1 + claimed1;\n            (address _token0, address _token1) = IPair(stake).tokens();\n            if (\n                _fees0 > IBribe(internal_bribe).left(_token0) &&\n                _fees0 / DURATION > 0\n            ) {\n                fees0 = 0;\n                _safeApprove(_token0, internal_bribe, _fees0);\n                IBribe(internal_bribe).notifyRewardAmount(_token0, _fees0);\n            } else {\n                fees0 = _fees0;\n            }\n            if (\n                _fees1 > IBribe(internal_bribe).left(_token1) &&\n                _fees1 / DURATION > 0\n            ) {\n                fees1 = 0;\n                _safeApprove(_token1, internal_bribe, _fees1);\n                IBribe(internal_bribe).notifyRewardAmount(_token1, _fees1);\n            } else {\n                fees1 = _fees1;\n            }\n\n            emit ClaimFees(msg.sender, claimed0, claimed1);\n        }\n    }\n\n    /**\n     * @notice Determine the prior balance for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param timestamp The timestamp to get the balance at\n     * @return The balance the account had as of the given block\n     */\n    function getPriorBalanceIndex(address account, uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorSupplyIndex(uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = supplyNumCheckpoints;\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (supplyCheckpoints[0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorRewardPerToken(address token, uint256 timestamp)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        uint256 nCheckpoints = rewardPerTokenNumCheckpoints[token];\n        if (nCheckpoints == 0) {\n            return (0, 0);\n        }\n\n        // First check most recent balance\n        if (\n            rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp <=\n            timestamp\n        ) {\n            return (\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1]\n                    .rewardPerToken,\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp\n            );\n        }\n\n        // Next check implicit zero balance\n        if (rewardPerTokenCheckpoints[token][0].timestamp > timestamp) {\n            return (0, 0);\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            RewardPerTokenCheckpoint memory cp = rewardPerTokenCheckpoints[\n                token\n            ][center];\n            if (cp.timestamp == timestamp) {\n                return (cp.rewardPerToken, cp.timestamp);\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return (\n            rewardPerTokenCheckpoints[token][lower].rewardPerToken,\n            rewardPerTokenCheckpoints[token][lower].timestamp\n        );\n    }\n\n    function _writeCheckpoint(address account, uint256 balance) internal {\n        uint256 _timestamp = block.timestamp;\n        uint256 _nCheckPoints = numCheckpoints[account];\n\n        if (\n            _nCheckPoints > 0 &&\n            checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            checkpoints[account][_nCheckPoints - 1].balanceOf = balance;\n        } else {\n            checkpoints[account][_nCheckPoints] = Checkpoint(\n                _timestamp,\n                balance\n            );\n            numCheckpoints[account] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeRewardPerTokenCheckpoint(\n        address token,\n        uint256 reward,\n        uint256 timestamp\n    ) internal {\n        uint256 _nCheckPoints = rewardPerTokenNumCheckpoints[token];\n\n        if (\n            _nCheckPoints > 0 &&\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp ==\n            timestamp\n        ) {\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1]\n                .rewardPerToken = reward;\n        } else {\n            rewardPerTokenCheckpoints[token][\n                _nCheckPoints\n            ] = RewardPerTokenCheckpoint(timestamp, reward);\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeSupplyCheckpoint() internal {\n        uint256 _nCheckPoints = supplyNumCheckpoints;\n        uint256 _timestamp = block.timestamp;\n\n        if (\n            _nCheckPoints > 0 &&\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            supplyCheckpoints[_nCheckPoints - 1].supply = derivedSupply;\n        } else {\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\n                _timestamp,\n                derivedSupply\n            );\n            supplyNumCheckpoints = _nCheckPoints + 1;\n        }\n    }\n\n    function rewardsListLength() external view returns (uint256) {\n        return rewards.length;\n    }\n\n    // returns the last time the reward was modified or periodFinish if the reward has ended\n    function lastTimeRewardApplicable(address token)\n        public\n        view\n        returns (uint256)\n    {\n        return Math.min(block.timestamp, periodFinish[token]);\n    }\n\n    function getReward(address account, address[] memory tokens) external lock {\n        require(msg.sender == account || msg.sender == voter);\n        _unlocked = 1;\n        IVoter(voter).distribute(address(this));\n        _unlocked = 2;\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            (\n                rewardPerTokenStored[tokens[i]],\n                lastUpdateTime[tokens[i]]\n            ) = _updateRewardPerToken(tokens[i], type(uint256).max, true);\n\n            uint256 _reward = earned(tokens[i], account);\n            lastEarn[tokens[i]][account] = block.timestamp;\n            userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[\n                tokens[i]\n            ];\n            if (_reward > 0) _safeTransfer(tokens[i], account, _reward);\n\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\n        }\n\n        uint256 _derivedBalance = derivedBalances[account];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(account);\n        derivedBalances[account] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        _writeCheckpoint(account, derivedBalances[account]);\n        _writeSupplyCheckpoint();\n    }\n\n    function rewardPerToken(address token) public view returns (uint256) {\n        if (derivedSupply == 0) {\n            return rewardPerTokenStored[token];\n        }\n        return\n            rewardPerTokenStored[token] +\n            (((lastTimeRewardApplicable(token) -\n                Math.min(lastUpdateTime[token], periodFinish[token])) *\n                rewardRate[token] *\n                PRECISION) / derivedSupply);\n    }\n\n    function derivedBalance(address account) public view returns (uint256) {\n        return balanceOf[account];\n    }\n\n    function batchRewardPerToken(address token, uint256 maxRuns) external {\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _batchRewardPerToken(token, maxRuns);\n    }\n\n    function _batchRewardPerToken(address token, uint256 maxRuns)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\n\n        for (uint256 i = _startIndex; i < _endIndex; i++) {\n            SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n            if (sp0.supply > 0) {\n                SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\n                    token,\n                    sp1.timestamp,\n                    sp0.timestamp,\n                    sp0.supply,\n                    _startTimestamp\n                );\n                reward += _reward;\n                _writeRewardPerTokenCheckpoint(token, reward, _endTime);\n                _startTimestamp = _endTime;\n            }\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    function _calcRewardPerToken(\n        address token,\n        uint256 timestamp1,\n        uint256 timestamp0,\n        uint256 supply,\n        uint256 startTimestamp\n    ) internal view returns (uint256, uint256) {\n        uint256 endTime = Math.max(timestamp1, startTimestamp);\n        return (\n            (((Math.min(endTime, periodFinish[token]) -\n                Math.min(\n                    Math.max(timestamp0, startTimestamp),\n                    periodFinish[token]\n                )) *\n                rewardRate[token] *\n                PRECISION) / supply),\n            endTime\n        );\n    }\n\n    /// @dev Update stored rewardPerToken values without the last one snapshot\n    ///      If the contract will get \"out of gas\" error on users actions this will be helpful\n    function batchUpdateRewardPerToken(address token, uint256 maxRuns)\n        external\n    {\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _updateRewardPerToken(token, maxRuns, false);\n    }\n\n    function _updateRewardForAllTokens() internal {\n        uint256 length = rewards.length;\n        for (uint256 i; i < length; i++) {\n            address token = rewards[i];\n            (\n                rewardPerTokenStored[token],\n                lastUpdateTime[token]\n            ) = _updateRewardPerToken(token, type(uint256).max, true);\n        }\n    }\n\n    function _updateRewardPerToken(\n        address token,\n        uint256 maxRuns,\n        bool actualLast\n    ) internal returns (uint256, uint256) {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\n\n        if (_endIndex > 0) {\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\n                SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n                if (sp0.supply > 0) {\n                    SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                    (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\n                        token,\n                        sp1.timestamp,\n                        sp0.timestamp,\n                        sp0.supply,\n                        _startTimestamp\n                    );\n                    reward += _reward;\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\n                    _startTimestamp = _endTime;\n                }\n            }\n        }\n\n        // need to override the last value with actual numbers only on deposit/withdraw/claim/notify actions\n        if (actualLast) {\n            SupplyCheckpoint memory sp = supplyCheckpoints[_endIndex];\n            if (sp.supply > 0) {\n                (uint256 _reward, ) = _calcRewardPerToken(\n                    token,\n                    lastTimeRewardApplicable(token),\n                    Math.max(sp.timestamp, _startTimestamp),\n                    sp.supply,\n                    _startTimestamp\n                );\n                reward += _reward;\n                _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\n                _startTimestamp = block.timestamp;\n            }\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\n    function earned(address token, address account)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _startTimestamp = Math.max(\n            lastEarn[token][account],\n            rewardPerTokenCheckpoints[token][0].timestamp\n        );\n        if (numCheckpoints[account] == 0) {\n            return 0;\n        }\n\n        uint256 _startIndex = getPriorBalanceIndex(account, _startTimestamp);\n        uint256 _endIndex = numCheckpoints[account] - 1;\n\n        uint256 reward = 0;\n\n        if (_endIndex > 0) {\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\n                Checkpoint memory cp0 = checkpoints[account][i];\n                Checkpoint memory cp1 = checkpoints[account][i + 1];\n                (uint256 _rewardPerTokenStored0, ) = getPriorRewardPerToken(\n                    token,\n                    cp0.timestamp\n                );\n                (uint256 _rewardPerTokenStored1, ) = getPriorRewardPerToken(\n                    token,\n                    cp1.timestamp\n                );\n                reward +=\n                    (cp0.balanceOf *\n                        (_rewardPerTokenStored1 - _rewardPerTokenStored0)) /\n                    PRECISION;\n            }\n        }\n\n        Checkpoint memory cp = checkpoints[account][_endIndex];\n        (uint256 _rewardPerTokenStored, ) = getPriorRewardPerToken(\n            token,\n            cp.timestamp\n        );\n        reward +=\n            (cp.balanceOf *\n                (rewardPerToken(token) -\n                    Math.max(\n                        _rewardPerTokenStored,\n                        userRewardPerTokenStored[token][account]\n                    ))) /\n            PRECISION;\n\n        return reward;\n    }\n\n    function depositAll(uint256 tokenId) external {\n        deposit(IERC20(stake).balanceOf(msg.sender), tokenId);\n    }\n\n    function deposit(uint256 amount, uint256 tokenId) public lock {\n        require(amount > 0);\n        _updateRewardForAllTokens();\n\n        _safeTransferFrom(stake, msg.sender, address(this), amount);\n        totalSupply += amount;\n        balanceOf[msg.sender] += amount;\n\n        if (tokenId > 0) {\n            require(IVotingEscrow(_ve).ownerOf(tokenId) == msg.sender);\n            if (tokenIds[msg.sender] == 0) {\n                tokenIds[msg.sender] = tokenId;\n                IVoter(voter).attachTokenToGauge(tokenId, msg.sender);\n            }\n            require(tokenIds[msg.sender] == tokenId);\n        } else {\n            tokenId = tokenIds[msg.sender];\n        }\n\n        uint256 _derivedBalance = derivedBalances[msg.sender];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(msg.sender);\n        derivedBalances[msg.sender] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        _writeCheckpoint(msg.sender, _derivedBalance);\n        _writeSupplyCheckpoint();\n\n        IVoter(voter).emitDeposit(tokenId, msg.sender, amount);\n        emit Deposit(msg.sender, tokenId, amount);\n    }\n\n    function withdrawAll() external {\n        withdraw(balanceOf[msg.sender]);\n    }\n\n    function withdraw(uint256 amount) public {\n        uint256 tokenId = 0;\n        if (amount == balanceOf[msg.sender]) {\n            tokenId = tokenIds[msg.sender];\n        }\n        withdrawToken(amount, tokenId);\n    }\n\n    function withdrawToken(uint256 amount, uint256 tokenId) public lock {\n        _updateRewardForAllTokens();\n\n        totalSupply -= amount;\n        balanceOf[msg.sender] -= amount;\n        _safeTransfer(stake, msg.sender, amount);\n\n        if (tokenId > 0) {\n            require(tokenId == tokenIds[msg.sender]);\n            tokenIds[msg.sender] = 0;\n            IVoter(voter).detachTokenFromGauge(tokenId, msg.sender);\n        } else {\n            tokenId = tokenIds[msg.sender];\n        }\n\n        uint256 _derivedBalance = derivedBalances[msg.sender];\n        derivedSupply -= _derivedBalance;\n        _derivedBalance = derivedBalance(msg.sender);\n        derivedBalances[msg.sender] = _derivedBalance;\n        derivedSupply += _derivedBalance;\n\n        _writeCheckpoint(msg.sender, derivedBalances[msg.sender]);\n        _writeSupplyCheckpoint();\n\n        IVoter(voter).emitWithdraw(tokenId, msg.sender, amount);\n        emit Withdraw(msg.sender, tokenId, amount);\n    }\n\n    function left(address token) external view returns (uint256) {\n        if (block.timestamp >= periodFinish[token]) return 0;\n        uint256 _remaining = periodFinish[token] - block.timestamp;\n        return _remaining * rewardRate[token];\n    }\n\n    function notifyRewardAmount(address token, uint256 amount) external lock {\n        require(token != stake);\n        require(amount > 0);\n        if (!isReward[token]) {\n            require(\n                IVoter(voter).isWhitelisted(token),\n                \"rewards tokens must be whitelisted\"\n            );\n            require(\n                rewards.length < MAX_REWARD_TOKENS,\n                \"too many rewards tokens\"\n            );\n        }\n        if (rewardRate[token] == 0)\n            _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _updateRewardPerToken(token, type(uint256).max, true);\n        _claimFees();\n\n        if (block.timestamp >= periodFinish[token]) {\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = amount / DURATION;\n        } else {\n            uint256 _remaining = periodFinish[token] - block.timestamp;\n            uint256 _left = _remaining * rewardRate[token];\n            require(amount > _left);\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = (amount + _left) / DURATION;\n        }\n        require(rewardRate[token] > 0);\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(\n            rewardRate[token] <= balance / DURATION,\n            \"Provided reward too high\"\n        );\n        periodFinish[token] = block.timestamp + DURATION;\n        if (!isReward[token]) {\n            isReward[token] = true;\n            rewards.push(token);\n        }\n\n        emit NotifyReward(msg.sender, token, amount);\n    }\n\n    function swapOutRewardToken(\n        uint256 i,\n        address oldToken,\n        address newToken\n    ) external {\n        require(msg.sender == IVotingEscrow(_ve).team(), \"only team\");\n        require(rewards[i] == oldToken);\n        isReward[oldToken] = false;\n        isReward[newToken] = true;\n        rewards[i] = newToken;\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n\n    function _safeApprove(\n        address token,\n        address spender,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.approve.selector, spender, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n}\n"
    },
    "contracts/governance/L2Governor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/Governor.sol)\n\npragma solidity ^0.8.0;\n\nimport \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/structs/DoubleEndedQueue.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/Address.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/Context.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/Timers.sol\";\nimport \"lib/openzeppelin-contracts/contracts/governance/IGovernor.sol\";\n\n/**\n * @author Modified from RollCall (https://github.com/withtally/rollcall/blob/main/src/standards/L2Governor.sol)\n *\n * @dev Core of the governance system, designed to be extended though various modules.\n *\n * This contract is abstract and requires several function to be implemented in various modules:\n *\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\n * - A voting module must implement {_getVotes}\n * - Additionanly, the {votingPeriod} must also be implemented\n *\n * _Available since v4.3._\n */\nabstract contract L2Governor is Context, ERC165, EIP712, IGovernor, IERC721Receiver, IERC1155Receiver {\n    using DoubleEndedQueue for DoubleEndedQueue.Bytes32Deque;\n    using SafeCast for uint256;\n    using Timers for Timers.Timestamp;\n\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,uint8 support)\");\n    bytes32 public constant EXTENDED_BALLOT_TYPEHASH =\n        keccak256(\"ExtendedBallot(uint256 proposalId,uint8 support,string reason,bytes params)\");\n\n    struct ProposalCore {\n        Timers.Timestamp voteStart;\n        Timers.Timestamp voteEnd;\n        bool executed;\n        bool canceled;\n    }\n\n    string private _name;\n\n    mapping(uint256 => ProposalCore) private _proposals;\n\n    // This queue keeps track of the governor operating on itself. Calls to functions protected by the\n    // {onlyGovernance} modifier needs to be whitelisted in this queue. Whitelisting is set in {_beforeExecute},\n    // consumed by the {onlyGovernance} modifier and eventually reset in {_afterExecute}. This ensures that the\n    // execution of {onlyGovernance} protected calls can only be achieved through successful proposals.\n    DoubleEndedQueue.Bytes32Deque private _governanceCall;\n\n    /**\n     * @dev Restricts a function so it can only be executed through governance proposals. For example, governance\n     * parameter setters in {GovernorSettings} are protected using this modifier.\n     *\n     * The governance executing address may be different from the Governor's own address, for example it could be a\n     * timelock. This can be customized by modules by overriding {_executor}. The executor is only able to invoke these\n     * functions during the execution of the governor's {execute} function, and not under any other circumstances. Thus,\n     * for example, additional timelock proposers are not able to change governance parameters without going through the\n     * governance protocol (since v4.6).\n     */\n    modifier onlyGovernance() {\n        require(_msgSender() == _executor(), \"Governor: onlyGovernance\");\n        if (_executor() != address(this)) {\n            bytes32 msgDataHash = keccak256(_msgData());\n            // loop until popping the expected operation - throw if deque is empty (operation not authorized)\n            while (_governanceCall.popFront() != msgDataHash) {}\n        }\n        _;\n    }\n\n    /**\n     * @dev Sets the value for {name} and {version}\n     */\n    constructor(string memory name_) EIP712(name_, version()) {\n        _name = name_;\n    }\n\n    /**\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\n     */\n    receive() external payable virtual {\n        require(_executor() == address(this));\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        // In addition to the current interfaceId, also support previous version of the interfaceId that did not\n        // include the castVoteWithReasonAndParams() function as standard\n        return\n            interfaceId ==\n            (type(IGovernor).interfaceId ^\n                this.castVoteWithReasonAndParams.selector ^\n                this.castVoteWithReasonAndParamsBySig.selector ^\n                this.getVotesWithParams.selector) ||\n            interfaceId == type(IGovernor).interfaceId ||\n            interfaceId == type(IERC1155Receiver).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IGovernor-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IGovernor-version}.\n     */\n    function version() public view virtual override returns (string memory) {\n        return \"1\";\n    }\n\n    /**\n     * @dev See {IGovernor-hashProposal}.\n     *\n     * The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\n     * advance, before the proposal is submitted.\n     *\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\n     * across multiple networks. This also means that in order to execute the same operation twice (on the same\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\n     */\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual override returns (uint256) {\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\n    }\n\n    /**\n     * @dev See {IGovernor-state}.\n     */\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\n        ProposalCore storage proposal = _proposals[proposalId];\n\n        if (proposal.executed) {\n            return ProposalState.Executed;\n        }\n\n        if (proposal.canceled) {\n            return ProposalState.Canceled;\n        }\n\n        uint256 start = proposalSnapshot(proposalId);\n\n        if (start == 0) {\n            revert(\"Governor: unknown proposal id\");\n        }\n\n        if (start >= block.timestamp) {\n            return ProposalState.Pending;\n        }\n\n        uint256 deadline = proposalDeadline(proposalId);\n\n        if (deadline >= block.timestamp) {\n            return ProposalState.Active;\n        }\n\n        if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\n            return ProposalState.Succeeded;\n        } else {\n            return ProposalState.Defeated;\n        }\n    }\n\n    /**\n     * @dev See {IGovernor-proposalSnapshot}.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteStart.getDeadline();\n    }\n\n    /**\n     * @dev See {IGovernor-proposalDeadline}.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteEnd.getDeadline();\n    }\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_.\n     */\n    function proposalThreshold() public view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Amount of votes already cast passes the threshold limit.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Is the proposal successful or not.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Get the voting weight of `account` at a specific `blockTimestamp`, for a vote as described by `params`.\n     */\n    function _getVotes(\n        address account,\n        uint256 blockTimestamp,\n        bytes memory params\n    ) internal view virtual returns (uint256);\n\n    /**\n     * @dev Register a vote for `proposalId` by `account` with a given `support`, voting `weight` and voting `params`.\n     *\n     * Note: Support is generic and can represent various things depending on the voting system used.\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight,\n        bytes memory params\n    ) internal virtual;\n\n    /**\n     * @dev Default additional encoded parameters used by castVote methods that don't include them\n     *\n     * Note: Should be overridden by specific implementations to use an appropriate value, the\n     * meaning of the additional params, in the context of that implementation\n     */\n    function _defaultParams() internal view virtual returns (bytes memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IGovernor-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        require(\n            getVotes(_msgSender(), block.number - 1) >= proposalThreshold(),\n            \"Governor: proposer votes below proposal threshold\"\n        );\n\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\n\n        require(targets.length == values.length, \"Governor: invalid proposal length\");\n        require(targets.length == calldatas.length, \"Governor: invalid proposal length\");\n        require(targets.length > 0, \"Governor: empty proposal\");\n\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(proposal.voteStart.isUnset(), \"Governor: proposal already exists\");\n\n        uint64 start = block.timestamp.toUint64() + votingDelay().toUint64();\n        uint64 deadline = start + votingPeriod().toUint64();\n\n        proposal.voteStart.setDeadline(start);\n        proposal.voteEnd.setDeadline(deadline);\n\n        emit ProposalCreated(\n            proposalId,\n            _msgSender(),\n            targets,\n            values,\n            new string[](targets.length),\n            calldatas,\n            start,\n            deadline,\n            description\n        );\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-execute}.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        ProposalState status = state(proposalId);\n        require(\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\n            \"Governor: proposal not successful\"\n        );\n        _proposals[proposalId].executed = true;\n\n        emit ProposalExecuted(proposalId);\n\n        _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\n        _afterExecute(proposalId, targets, values, calldatas, descriptionHash);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Internal execution mechanism. Can be overridden to implement different execution mechanism\n     */\n    function _execute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        string memory errorMessage = \"Governor: call reverted without message\";\n        for (uint256 i = 0; i < targets.length; ++i) {\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\n            Address.verifyCallResult(success, returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Hook before execution is triggered.\n     */\n    function _beforeExecute(\n        uint256, /* proposalId */\n        address[] memory targets,\n        uint256[] memory, /* values */\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        if (_executor() != address(this)) {\n            for (uint256 i = 0; i < targets.length; ++i) {\n                if (targets[i] == address(this)) {\n                    _governanceCall.pushBack(keccak256(calldatas[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook after execution is triggered.\n     */\n    function _afterExecute(\n        uint256, /* proposalId */\n        address[] memory, /* targets */\n        uint256[] memory, /* values */\n        bytes[] memory, /* calldatas */\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        if (_executor() != address(this)) {\n            if (!_governanceCall.empty()) {\n                _governanceCall.clear();\n            }\n        }\n    }\n\n    /**\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\n     * canceled to allow distinguishing it from executed proposals.\n     *\n     * Emits a {IGovernor-ProposalCanceled} event.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n        ProposalState status = state(proposalId);\n\n        require(\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\n            \"Governor: proposal not active\"\n        );\n        _proposals[proposalId].canceled = true;\n\n        emit ProposalCanceled(proposalId);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-getVotes}.\n     */\n    function getVotes(address account, uint256 blockTimestamp) public view virtual override returns (uint256) {\n        return _getVotes(account, blockTimestamp, _defaultParams());\n    }\n\n    /**\n     * @dev See {IGovernor-getVotesWithParams}.\n     */\n    function getVotesWithParams(\n        address account,\n        uint256 blockTimestamp,\n        bytes memory params\n    ) public view virtual override returns (uint256) {\n        return _getVotes(account, blockTimestamp, params);\n    }\n\n    /**\n     * @dev See {IGovernor-castVote}.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReason}.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, reason);\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReasonAndParams}.\n     */\n    function castVoteWithReasonAndParams(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params\n    ) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, reason, params);\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteBySig}.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override returns (uint256) {\n        address voter = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\n            v,\n            r,\n            s\n        );\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReasonAndParamsBySig}.\n     */\n    function castVoteWithReasonAndParamsBySig(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override returns (uint256) {\n        address voter = ECDSA.recover(\n            _hashTypedDataV4(\n                keccak256(\n                    abi.encode(\n                        EXTENDED_BALLOT_TYPEHASH,\n                        proposalId,\n                        support,\n                        keccak256(bytes(reason)),\n                        keccak256(params)\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        return _castVote(proposalId, voter, support, reason, params);\n    }\n\n    /**\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function. Uses the _defaultParams().\n     *\n     * Emits a {IGovernor-VoteCast} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason\n    ) internal virtual returns (uint256) {\n        return _castVote(proposalId, account, support, reason, _defaultParams());\n    }\n\n    /**\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\n     *\n     * Emits a {IGovernor-VoteCast} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason,\n        bytes memory params\n    ) internal virtual returns (uint256) {\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(state(proposalId) == ProposalState.Active, \"Governor: vote not currently active\");\n\n        uint256 weight = _getVotes(account, proposal.voteStart.getDeadline(), params);\n        _countVote(proposalId, account, support, weight, params);\n\n        if (params.length == 0) {\n            emit VoteCast(account, proposalId, support, weight, reason);\n        } else {\n            emit VoteCastWithParams(account, proposalId, support, weight, reason, params);\n        }\n\n        return weight;\n    }\n\n    /**\n     * @dev Relays a transaction or function call to an arbitrary target. In cases where the governance executor\n     * is some contract other than the governor itself, like when using a timelock, this function can be invoked\n     * in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\n     * Note that if the executor is simply the governor itself, use of `relay` is redundant.\n     */\n    function relay(\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) external virtual onlyGovernance {\n        Address.functionCallWithValue(target, data, value);\n    }\n\n    /**\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\n     * through another contract such as a timelock.\n     */\n    function _executor() internal view virtual returns (address) {\n        return address(this);\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155Received}.\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/governance/L2GovernorCountingSimple.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorCountingSimple.sol)\n\npragma solidity ^0.8.0;\n\nimport {L2Governor} from \"contracts/governance/L2Governor.sol\";\n\n/**\n * @author Modified from RollCall (https://github.com/withtally/rollcall/blob/main/src/standards/L2GovernorCountingSimple.sol)\n *\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\n *\n * _Available since v4.3._\n */\nabstract contract L2GovernorCountingSimple is L2Governor {\n    /**\n     * @dev Supported vote types. Matches Governor Bravo ordering.\n     */\n    enum VoteType {\n        Against,\n        For,\n        Abstain\n    }\n\n    struct ProposalVote {\n        uint256 againstVotes;\n        uint256 forVotes;\n        uint256 abstainVotes;\n        mapping(address => bool) hasVoted;\n    }\n\n    mapping(uint256 => ProposalVote) private _proposalVotes;\n\n    /**\n     * @dev See {IGovernor-COUNTING_MODE}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\n        return \"support=bravo&quorum=for,abstain\";\n    }\n\n    /**\n     * @dev See {IGovernor-hasVoted}.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\n        return _proposalVotes[proposalId].hasVoted[account];\n    }\n\n    /**\n     * @dev Accessor to the internal vote counts.\n     */\n    function proposalVotes(uint256 proposalId)\n        public\n        view\n        virtual\n        returns (\n            uint256 againstVotes,\n            uint256 forVotes,\n            uint256 abstainVotes\n        )\n    {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n        return (proposalvote.againstVotes, proposalvote.forVotes, proposalvote.abstainVotes);\n    }\n\n    /**\n     * @dev See {Governor-_quorumReached}.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        return quorum(proposalSnapshot(proposalId)) <= proposalvote.forVotes + proposalvote.abstainVotes;\n    }\n\n    /**\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        return proposalvote.forVotes > proposalvote.againstVotes;\n    }\n\n    /**\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight,\n        bytes memory // params\n    ) internal virtual override {\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\n\n        require(!proposalvote.hasVoted[account], \"GovernorVotingSimple: vote already cast\");\n        proposalvote.hasVoted[account] = true;\n\n        if (support == uint8(VoteType.Against)) {\n            proposalvote.againstVotes += weight;\n        } else if (support == uint8(VoteType.For)) {\n            proposalvote.forVotes += weight;\n        } else if (support == uint8(VoteType.Abstain)) {\n            proposalvote.abstainVotes += weight;\n        } else {\n            revert(\"GovernorVotingSimple: invalid value for enum VoteType\");\n        }\n    }\n}\n"
    },
    "contracts/governance/L2GovernorVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorVotes.sol)\n\npragma solidity ^0.8.0;\n\nimport {IVotes} from \"lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol\";\nimport {L2Governor} from \"contracts/governance/L2Governor.sol\";\n\n/**\n * @author Modified from RollCall (https://github.com/withtally/rollcall/blob/main/src/standards/L2GovernorVotes.sol)\n *\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes} token.\n *\n * _Available since v4.3._\n */\nabstract contract L2GovernorVotes is L2Governor {\n    IVotes public immutable token;\n\n    constructor(IVotes tokenAddress) {\n        token = tokenAddress;\n    }\n\n    /**\n     * Read the voting weight from the token's built in snapshot mechanism (see {Governor-_getVotes}).\n     */\n    function _getVotes(\n        address account,\n        uint256 blockTimestamp,\n        bytes memory /*params*/\n    ) internal view virtual override returns (uint256) {\n        return token.getPastVotes(account, blockTimestamp);\n    }\n}\n"
    },
    "contracts/governance/L2GovernorVotesQuorumFraction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\n\npragma solidity ^0.8.0;\n\nimport {L2GovernorVotes} from \"contracts/governance/L2GovernorVotes.sol\";\n\n/**\n * @author Modified from RollCall (https://github.com/withtally/rollcall/blob/main/src/standards/L2GovernorVotesQuorumFraction.sol)\n *\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\n * fraction of the total supply.\n *\n * _Available since v4.3._\n */\nabstract contract L2GovernorVotesQuorumFraction is L2GovernorVotes {\n    uint256 private _quorumNumerator;\n\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\n\n    /**\n     * @dev Initialize quorum as a fraction of the token's total supply.\n     *\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\n     * customized by overriding {quorumDenominator}.\n     */\n    constructor(uint256 quorumNumeratorValue) {\n        _updateQuorumNumerator(quorumNumeratorValue);\n    }\n\n    /**\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\n     */\n    function quorumNumerator() public view virtual returns (uint256) {\n        return _quorumNumerator;\n    }\n\n    /**\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\n     */\n    function quorumDenominator() public view virtual returns (uint256) {\n        return 100;\n    }\n\n    /**\n     * @dev Returns the quorum for a block timestamp, in terms of number of votes: `supply * numerator / denominator`.\n     */\n    function quorum(uint256 blockTimestamp) public view virtual override returns (uint256) {\n        return (token.getPastTotalSupply(blockTimestamp) * quorumNumerator()) / quorumDenominator();\n    }\n\n    /**\n     * @dev Changes the quorum numerator.\n     *\n     * Emits a {QuorumNumeratorUpdated} event.\n     *\n     * Requirements:\n     *\n     * - Must be called through a governance proposal.\n     * - New numerator must be smaller or equal to the denominator.\n     */\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\n        _updateQuorumNumerator(newQuorumNumerator);\n    }\n\n    /**\n     * @dev Changes the quorum numerator.\n     *\n     * Emits a {QuorumNumeratorUpdated} event.\n     *\n     * Requirements:\n     *\n     * - New numerator must be smaller or equal to the denominator.\n     */\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\n        require(\n            newQuorumNumerator <= quorumDenominator(),\n            \"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\"\n        );\n\n        uint256 oldQuorumNumerator = _quorumNumerator;\n        _quorumNumerator = newQuorumNumerator;\n\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\n    }\n}\n"
    },
    "contracts/interfaces/IBribe.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IBribe {\n    function _deposit(uint amount, uint tokenId) external;\n    function _withdraw(uint amount, uint tokenId) external;\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\n    function notifyRewardAmount(address token, uint amount) external;\n    function left(address token) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/IBribeFactory.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IBribeFactory {\n    function createInternalBribe(address[] memory) external returns (address);\n    function createExternalBribe(address[] memory) external returns (address);\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function transfer(address recipient, uint amount) external returns (bool);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function balanceOf(address) external view returns (uint);\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n"
    },
    "contracts/interfaces/IFlow.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IFlow {\n    function totalSupply() external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address,address,uint) external returns (bool);\n    function mint(address, uint) external returns (bool);\n    function minter() external returns (address);\n    function claim(address, uint) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IGauge.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IGauge {\n    function notifyRewardAmount(address token, uint amount) external;\n    function getReward(address account, address[] memory tokens) external;\n    function claimFees() external returns (uint claimed0, uint claimed1);\n    function left(address token) external view returns (uint);\n    function isForPair() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IGaugeFactory.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IGaugeFactory {\n    function createGauge(address, address, address, address, bool, address[] memory) external returns (address);\n}\n"
    },
    "contracts/interfaces/IMinter.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IMinter {\n    function update_period() external returns (uint);\n}\n"
    },
    "contracts/interfaces/IPair.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IPair {\n    function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1);\n    function claimFees() external returns (uint, uint);\n    function tokens() external returns (address, address);\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function mint(address to) external returns (uint liquidity);\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\n    function getAmountOut(uint, address) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/IPairCallee.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IPairCallee {\n    function hook(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"
    },
    "contracts/interfaces/IPairFactory.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IPairFactory {\n    function allPairsLength() external view returns (uint);\n    function isPair(address pair) external view returns (bool);\n    function pairCodeHash() external pure returns (bytes32);\n    function getPair(address tokenA, address token, bool stable) external view returns (address);\n    function createPair(address tokenA, address tokenB, bool stable) external returns (address pair);\n}\n"
    },
    "contracts/interfaces/IRewardsDistributor.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IRewardsDistributor {\n    function checkpoint_token() external;\n    function checkpoint_total_supply() external;\n}\n"
    },
    "contracts/interfaces/IRouter.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IRouter {\n    function pairFor(address tokenA, address tokenB, bool stable) external view returns (address pair);\n}\n"
    },
    "contracts/interfaces/IVeArtProxy.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IVeArtProxy {\n    function _tokenURI(uint _tokenId, uint _balanceOf, uint _locked_end, uint _value) external pure returns (string memory output);\n}\n"
    },
    "contracts/interfaces/IVoter.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IVoter {\n    function _ve() external view returns (address);\n    function governor() external view returns (address);\n    function emergencyCouncil() external view returns (address);\n    function attachTokenToGauge(uint _tokenId, address account) external;\n    function detachTokenFromGauge(uint _tokenId, address account) external;\n    function emitDeposit(uint _tokenId, address account, uint amount) external;\n    function emitWithdraw(uint _tokenId, address account, uint amount) external;\n    function isWhitelisted(address token) external view returns (bool);\n    function notifyRewardAmount(uint amount) external;\n    function distribute(address _gauge) external;\n}\n"
    },
    "contracts/interfaces/IVotingEscrow.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IVotingEscrow {\n\n    struct Point {\n        int128 bias;\n        int128 slope; // # -dweight / dt\n        uint256 ts;\n        uint256 blk; // block\n    }\n\n    function token() external view returns (address);\n    function team() external returns (address);\n    function epoch() external view returns (uint);\n    function point_history(uint loc) external view returns (Point memory);\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\n    function user_point_epoch(uint tokenId) external view returns (uint);\n\n    function ownerOf(uint) external view returns (address);\n    function isApprovedOrOwner(address, uint) external view returns (bool);\n    function transferFrom(address, address, uint) external;\n\n    function voting(uint tokenId) external;\n    function abstain(uint tokenId) external;\n    function attach(uint tokenId) external;\n    function detach(uint tokenId) external;\n\n    function checkpoint() external;\n    function deposit_for(uint tokenId, uint value) external;\n    function create_lock_for(uint, uint, address) external returns (uint);\n\n    function balanceOfNFT(uint) external view returns (uint);\n    function totalSupply() external view returns (uint);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint256 value) external returns (bool);\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/InternalBribe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\nimport \"contracts/interfaces/IBribe.sol\";\nimport \"contracts/interfaces/IERC20.sol\";\nimport \"contracts/interfaces/IVoter.sol\";\nimport \"contracts/interfaces/IVotingEscrow.sol\";\n\n// Bribes pay out rewards for a given pool based on the votes that were received from the user (goes hand in hand with Voter.vote())\ncontract InternalBribe is IBribe {\n    address public immutable voter; // only voter can modify balances (since it only happens on vote())\n    address public immutable _ve;\n\n    uint256 public constant DURATION = 7 days; // rewards are released over 7 days\n\n    uint256 internal constant MAX_REWARD_TOKENS = 16;\n\n    // default snx staking contract implementation\n    mapping(address => uint256) public rewardRate;\n    mapping(address => uint256) public periodFinish;\n    mapping(address => uint256) public lastUpdateTime;\n    mapping(address => uint256) public rewardPerTokenStored;\n\n    mapping(address => mapping(uint256 => uint256)) public lastEarn;\n    mapping(address => mapping(uint256 => uint256))\n        public userRewardPerTokenStored;\n\n    address[] public rewards;\n    mapping(address => bool) public isReward;\n\n    uint256 public totalSupply;\n    mapping(uint256 => uint256) public balanceOf;\n\n    /// @notice A checkpoint for marking balance\n    struct Checkpoint {\n        uint256 timestamp;\n        uint256 balanceOf;\n    }\n\n    /// @notice A checkpoint for marking reward rate\n    struct RewardPerTokenCheckpoint {\n        uint256 timestamp;\n        uint256 rewardPerToken;\n    }\n\n    /// @notice A checkpoint for marking supply\n    struct SupplyCheckpoint {\n        uint256 timestamp;\n        uint256 supply;\n    }\n\n    /// @notice A record of balance checkpoints for each account, by index\n    mapping(uint256 => mapping(uint256 => Checkpoint)) public checkpoints;\n    /// @notice The number of checkpoints for each account\n    mapping(uint256 => uint256) public numCheckpoints;\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\n    /// @notice The number of checkpoints\n    uint256 public supplyNumCheckpoints;\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(address => mapping(uint256 => RewardPerTokenCheckpoint))\n        public rewardPerTokenCheckpoints;\n    /// @notice The number of checkpoints for each token\n    mapping(address => uint256) public rewardPerTokenNumCheckpoints;\n\n    event Deposit(address indexed from, uint256 tokenId, uint256 amount);\n    event Withdraw(address indexed from, uint256 tokenId, uint256 amount);\n    event NotifyReward(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n    event ClaimRewards(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n\n    constructor(address _voter, address[] memory _allowedRewardTokens) {\n        voter = _voter;\n        _ve = IVoter(_voter)._ve();\n\n        for (uint256 i; i < _allowedRewardTokens.length; i++) {\n            if (_allowedRewardTokens[i] != address(0)) {\n                isReward[_allowedRewardTokens[i]] = true;\n                rewards.push(_allowedRewardTokens[i]);\n            }\n        }\n    }\n\n    // simple re-entrancy check\n    uint256 internal _unlocked = 1;\n    modifier lock() {\n        require(_unlocked == 1);\n        _unlocked = 2;\n        _;\n        _unlocked = 1;\n    }\n\n    /**\n     * @notice Determine the prior balance for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param tokenId The token of the NFT to check\n     * @param timestamp The timestamp to get the balance at\n     * @return The balance the account had as of the given block\n     */\n    function getPriorBalanceIndex(uint256 tokenId, uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = numCheckpoints[tokenId];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[tokenId][nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[tokenId][0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[tokenId][center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorSupplyIndex(uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = supplyNumCheckpoints;\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (supplyCheckpoints[0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorRewardPerToken(address token, uint256 timestamp)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        uint256 nCheckpoints = rewardPerTokenNumCheckpoints[token];\n        if (nCheckpoints == 0) {\n            return (0, 0);\n        }\n\n        // First check most recent balance\n        if (\n            rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp <=\n            timestamp\n        ) {\n            return (\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1]\n                    .rewardPerToken,\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp\n            );\n        }\n\n        // Next check implicit zero balance\n        if (rewardPerTokenCheckpoints[token][0].timestamp > timestamp) {\n            return (0, 0);\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            RewardPerTokenCheckpoint memory cp = rewardPerTokenCheckpoints[\n                token\n            ][center];\n            if (cp.timestamp == timestamp) {\n                return (cp.rewardPerToken, cp.timestamp);\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return (\n            rewardPerTokenCheckpoints[token][lower].rewardPerToken,\n            rewardPerTokenCheckpoints[token][lower].timestamp\n        );\n    }\n\n    function _writeCheckpoint(uint256 tokenId, uint256 balance) internal {\n        uint256 _timestamp = block.timestamp;\n        uint256 _nCheckPoints = numCheckpoints[tokenId];\n\n        if (\n            _nCheckPoints > 0 &&\n            checkpoints[tokenId][_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            checkpoints[tokenId][_nCheckPoints - 1].balanceOf = balance;\n        } else {\n            checkpoints[tokenId][_nCheckPoints] = Checkpoint(\n                _timestamp,\n                balance\n            );\n            numCheckpoints[tokenId] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeRewardPerTokenCheckpoint(\n        address token,\n        uint256 reward,\n        uint256 timestamp\n    ) internal {\n        uint256 _nCheckPoints = rewardPerTokenNumCheckpoints[token];\n\n        if (\n            _nCheckPoints > 0 &&\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp ==\n            timestamp\n        ) {\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1]\n                .rewardPerToken = reward;\n        } else {\n            rewardPerTokenCheckpoints[token][\n                _nCheckPoints\n            ] = RewardPerTokenCheckpoint(timestamp, reward);\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeSupplyCheckpoint() internal {\n        uint256 _nCheckPoints = supplyNumCheckpoints;\n        uint256 _timestamp = block.timestamp;\n\n        if (\n            _nCheckPoints > 0 &&\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            supplyCheckpoints[_nCheckPoints - 1].supply = totalSupply;\n        } else {\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\n                _timestamp,\n                totalSupply\n            );\n            supplyNumCheckpoints = _nCheckPoints + 1;\n        }\n    }\n\n    function rewardsListLength() external view returns (uint256) {\n        return rewards.length;\n    }\n\n    // returns the last time the reward was modified or periodFinish if the reward has ended\n    function lastTimeRewardApplicable(address token)\n        public\n        view\n        returns (uint256)\n    {\n        return Math.min(block.timestamp, periodFinish[token]);\n    }\n\n    // allows a user to claim rewards for a given token\n    function getReward(uint256 tokenId, address[] memory tokens) external lock {\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, tokenId));\n        for (uint256 i = 0; i < tokens.length; i++) {\n            (\n                rewardPerTokenStored[tokens[i]],\n                lastUpdateTime[tokens[i]]\n            ) = _updateRewardPerToken(tokens[i], type(uint256).max, true);\n\n            uint256 _reward = earned(tokens[i], tokenId);\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\n            userRewardPerTokenStored[tokens[i]][tokenId] = rewardPerTokenStored[\n                tokens[i]\n            ];\n            if (_reward > 0) _safeTransfer(tokens[i], msg.sender, _reward);\n\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\n        }\n    }\n\n    // used by Voter to allow batched reward claims\n    function getRewardForOwner(uint256 tokenId, address[] memory tokens)\n        external\n        lock\n    {\n        require(msg.sender == voter);\n        address _owner = IVotingEscrow(_ve).ownerOf(tokenId);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            (\n                rewardPerTokenStored[tokens[i]],\n                lastUpdateTime[tokens[i]]\n            ) = _updateRewardPerToken(tokens[i], type(uint256).max, true);\n\n            uint256 _reward = earned(tokens[i], tokenId);\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\n            userRewardPerTokenStored[tokens[i]][tokenId] = rewardPerTokenStored[\n                tokens[i]\n            ];\n            if (_reward > 0) _safeTransfer(tokens[i], _owner, _reward);\n\n            emit ClaimRewards(_owner, tokens[i], _reward);\n        }\n    }\n\n    function rewardPerToken(address token) public view returns (uint256) {\n        if (totalSupply == 0) {\n            return rewardPerTokenStored[token];\n        }\n        return\n            rewardPerTokenStored[token] +\n            (((lastTimeRewardApplicable(token) -\n                Math.min(lastUpdateTime[token], periodFinish[token])) *\n                rewardRate[token] *\n                10**IERC20(token).decimals()) / totalSupply);\n    }\n\n    function batchRewardPerToken(address token, uint256 maxRuns) external {\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _batchRewardPerToken(token, maxRuns);\n    }\n\n    function _batchRewardPerToken(address token, uint256 maxRuns)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\n\n        for (uint256 i = _startIndex; i < _endIndex; i++) {\n            SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n            if (sp0.supply > 0) {\n                SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                (uint256 _reward, uint256 endTime) = _calcRewardPerToken(\n                    token,\n                    sp1.timestamp,\n                    sp0.timestamp,\n                    sp0.supply,\n                    _startTimestamp\n                );\n                reward += _reward;\n                _writeRewardPerTokenCheckpoint(token, reward, endTime);\n                _startTimestamp = endTime;\n            }\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    function _calcRewardPerToken(\n        address token,\n        uint256 timestamp1,\n        uint256 timestamp0,\n        uint256 supply,\n        uint256 startTimestamp\n    ) internal view returns (uint256, uint256) {\n        uint256 endTime = Math.max(timestamp1, startTimestamp);\n        return (\n            (((Math.min(endTime, periodFinish[token]) -\n                Math.min(\n                    Math.max(timestamp0, startTimestamp),\n                    periodFinish[token]\n                )) *\n                rewardRate[token] *\n                10**IERC20(token).decimals()) / supply),\n            endTime\n        );\n    }\n\n    /// @dev Update stored rewardPerToken values without the last one snapshot\n    ///      If the contract will get \"out of gas\" error on users actions this will be helpful\n    function batchUpdateRewardPerToken(address token, uint256 maxRuns)\n        external\n    {\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _updateRewardPerToken(token, maxRuns, false);\n    }\n\n    function _updateRewardForAllTokens() internal {\n        uint256 length = rewards.length;\n        for (uint256 i; i < length; i++) {\n            address token = rewards[i];\n            (\n                rewardPerTokenStored[token],\n                lastUpdateTime[token]\n            ) = _updateRewardPerToken(token, type(uint256).max, true);\n        }\n    }\n\n    function _updateRewardPerToken(\n        address token,\n        uint256 maxRuns,\n        bool actualLast\n    ) internal returns (uint256, uint256) {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\n\n        if (_endIndex > 0) {\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\n                SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n                if (sp0.supply > 0) {\n                    SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                    (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\n                        token,\n                        sp1.timestamp,\n                        sp0.timestamp,\n                        sp0.supply,\n                        _startTimestamp\n                    );\n                    reward += _reward;\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\n                    _startTimestamp = _endTime;\n                }\n            }\n        }\n\n        if (actualLast) {\n            SupplyCheckpoint memory sp = supplyCheckpoints[_endIndex];\n            if (sp.supply > 0) {\n                (uint256 _reward, ) = _calcRewardPerToken(\n                    token,\n                    lastTimeRewardApplicable(token),\n                    Math.max(sp.timestamp, _startTimestamp),\n                    sp.supply,\n                    _startTimestamp\n                );\n                reward += _reward;\n                _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\n                _startTimestamp = block.timestamp;\n            }\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    function earned(address token, uint256 tokenId)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _startTimestamp = Math.max(\n            lastEarn[token][tokenId],\n            rewardPerTokenCheckpoints[token][0].timestamp\n        );\n        if (numCheckpoints[tokenId] == 0) {\n            return 0;\n        }\n\n        uint256 _startIndex = getPriorBalanceIndex(tokenId, _startTimestamp);\n        uint256 _endIndex = numCheckpoints[tokenId] - 1;\n\n        uint256 reward = 0;\n\n        if (_endIndex > 0) {\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\n                Checkpoint memory cp0 = checkpoints[tokenId][i];\n                Checkpoint memory cp1 = checkpoints[tokenId][i + 1];\n                (uint256 _rewardPerTokenStored0, ) = getPriorRewardPerToken(\n                    token,\n                    cp0.timestamp\n                );\n                (uint256 _rewardPerTokenStored1, ) = getPriorRewardPerToken(\n                    token,\n                    cp1.timestamp\n                );\n                reward +=\n                    (cp0.balanceOf *\n                        (_rewardPerTokenStored1 - _rewardPerTokenStored0)) /\n                    10**IERC20(token).decimals();\n            }\n        }\n\n        Checkpoint memory cp = checkpoints[tokenId][_endIndex];\n        (uint256 _rewardPerTokenStored, ) = getPriorRewardPerToken(\n            token,\n            cp.timestamp\n        );\n        reward +=\n            (cp.balanceOf *\n                (rewardPerToken(token) -\n                    Math.max(\n                        _rewardPerTokenStored,\n                        userRewardPerTokenStored[token][tokenId]\n                    ))) /\n            10**IERC20(token).decimals();\n\n        return reward;\n    }\n\n    // This is an external function, but internal notation is used since it can only be called \"internally\" from Gauges\n    function _deposit(uint256 amount, uint256 tokenId) external {\n        require(msg.sender == voter);\n        _updateRewardForAllTokens();\n\n        totalSupply += amount;\n        balanceOf[tokenId] += amount;\n\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\n        _writeSupplyCheckpoint();\n\n        emit Deposit(msg.sender, tokenId, amount);\n    }\n\n    function _withdraw(uint256 amount, uint256 tokenId) external {\n        require(msg.sender == voter);\n        _updateRewardForAllTokens();\n\n        totalSupply -= amount;\n        balanceOf[tokenId] -= amount;\n\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\n        _writeSupplyCheckpoint();\n\n        emit Withdraw(msg.sender, tokenId, amount);\n    }\n\n    function left(address token) external view returns (uint256) {\n        if (block.timestamp >= periodFinish[token]) return 0;\n        uint256 _remaining = periodFinish[token] - block.timestamp;\n        return _remaining * rewardRate[token];\n    }\n\n    // used to notify a gauge/bribe of a given reward, this can create griefing attacks by extending rewards\n    function notifyRewardAmount(address token, uint256 amount) external lock {\n        require(amount > 0);\n        require(isReward[token]);\n\n        if (rewardRate[token] == 0)\n            _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _updateRewardPerToken(token, type(uint256).max, true);\n\n        if (block.timestamp >= periodFinish[token]) {\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = amount / DURATION;\n        } else {\n            uint256 _remaining = periodFinish[token] - block.timestamp;\n            uint256 _left = _remaining * rewardRate[token];\n            require(amount > _left);\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = (amount + _left) / DURATION;\n        }\n        require(rewardRate[token] > 0);\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(\n            rewardRate[token] <= balance / DURATION,\n            \"Provided reward too high\"\n        );\n        periodFinish[token] = block.timestamp + DURATION;\n\n        emit NotifyReward(msg.sender, token, amount);\n    }\n\n    function swapOutRewardToken(\n        uint256 i,\n        address oldToken,\n        address newToken\n    ) external {\n        require(msg.sender == IVotingEscrow(_ve).team(), \"only team\");\n        require(rewards[i] == oldToken);\n        isReward[oldToken] = false;\n        isReward[newToken] = true;\n        rewards[i] = newToken;\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n}\n"
    },
    "contracts/libraries/Base64.sol": {
      "content": "pragma solidity 0.8.13;\n\n/// [MIT License]\n/// @title Base64\n/// @notice Provides a function for encoding some bytes in base64\n/// @author Brecht Devos <brecht@loopring.org>\nlibrary Base64 {\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /// @notice Encodes some bytes to the base64 representation\n    function encode(bytes memory data) internal pure returns (string memory) {\n        uint len = data.length;\n        if (len == 0) return \"\";\n\n        // multiply by 4/3 rounded up\n        uint encodedLen = 4 * ((len + 2) / 3);\n\n        // Add some extra buffer at the end\n        bytes memory result = new bytes(encodedLen + 32);\n\n        bytes memory table = TABLE;\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n\n            for {\n                let i := 0\n            } lt(i, len) {\n\n            } {\n                i := add(i, 3)\n                let input := and(mload(add(data, i)), 0xffffff)\n\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\n                out := shl(224, out)\n\n                mstore(resultPtr, out)\n\n                resultPtr := add(resultPtr, 4)\n            }\n\n            switch mod(len, 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n\n            mstore(result, encodedLen)\n        }\n\n        return string(result);\n    }\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "pragma solidity 0.8.13;\n\n// this causes issue with forge test as there is already a Math.sol in the forge repo\nlibrary Math {\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n\n    function cbrt(uint256 n) internal pure returns (uint256) {\n        unchecked {\n            uint256 x = 0;\n            for (uint256 y = 1 << 255; y > 0; y >>= 3) {\n                x <<= 1;\n                uint256 z = 3 * x * (x + 1) + 1;\n                if (n / y >= z) {\n                    n -= y * z;\n                    x += 1;\n                }\n            }\n            return x;\n        }\n    }\n}\n"
    },
    "contracts/Minter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\n\nimport \"contracts/interfaces/IMinter.sol\";\nimport \"contracts/interfaces/IRewardsDistributor.sol\";\nimport \"contracts/interfaces/IFlow.sol\";\nimport \"contracts/interfaces/IVoter.sol\";\nimport \"contracts/interfaces/IVotingEscrow.sol\";\n\n// codifies the minting rules as per ve(3,3), abstracted from the token to support any token that allows minting\n\ncontract Minter is IMinter {\n    uint256 internal constant WEEK = 86400 * 7; // allows minting once per week (reset every Thursday 00:00 UTC)\n    uint256 internal constant EMISSION = 990;\n    uint256 internal constant TAIL_EMISSION = 2;\n    uint256 internal constant PRECISION = 1000;\n    IFlow public immutable _flow;\n    IVoter public immutable _voter;\n    IVotingEscrow public immutable _ve;\n    IRewardsDistributor public immutable _rewards_distributor;\n    uint256 public weekly = 15_000_000 * 1e18; // represents a starting weekly emission of 15M FLOW (FLOW has 18 decimals)\n    uint256 public active_period;\n    uint256 internal constant LOCK = 86400 * 7 * 52 * 4;\n\n    address internal initializer;\n    address public team;\n    address public pendingTeam;\n    uint256 public teamRate;\n    uint256 public constant MAX_TEAM_RATE = 50; // 5% max\n\n    event Mint(\n        address indexed sender,\n        uint256 weekly,\n        uint256 circulating_supply,\n        uint256 circulating_emission\n    );\n\n    constructor(\n        address __voter, // the voting & distribution system\n        address __ve, // the ve(3,3) system that will be locked into\n        address __rewards_distributor // the distribution system that ensures users aren't diluted\n    ) {\n        initializer = msg.sender;\n        team = msg.sender;\n        teamRate = 30; // 30 bps = 3%\n        _flow = IFlow(IVotingEscrow(__ve).token());\n        _voter = IVoter(__voter);\n        _ve = IVotingEscrow(__ve);\n        _rewards_distributor = IRewardsDistributor(__rewards_distributor);\n        active_period = ((block.timestamp + (2 * WEEK)) / WEEK) * WEEK;\n    }\n\n    function initialize(\n        address[] memory claimants, // partnerAddrs\n        uint256[] memory amounts, // partnerAmounts\n        uint256 max // sum amounts / max = % ownership of top protocols, so if initial 20m is distributed, and target is 25% protocol ownership, then max - 4 x 20m = 80m\n    ) external {\n        require(initializer == msg.sender);\n        _flow.mint(address(this), max);\n        _flow.approve(address(_ve), type(uint256).max);\n        for (uint256 i = 0; i < claimants.length; i++) {\n            _ve.create_lock_for(amounts[i], LOCK, claimants[i]);\n        }\n        initializer = address(0);\n        active_period = ((block.timestamp) / WEEK) * WEEK; // allow minter.update_period() to mint new emissions THIS Thursday\n    }\n\n    function setTeam(address _team) external {\n        require(msg.sender == team, \"not team\");\n        pendingTeam = _team;\n    }\n\n    function acceptTeam() external {\n        require(msg.sender == pendingTeam, \"not pending team\");\n        team = pendingTeam;\n    }\n\n    function setTeamRate(uint256 _teamRate) external {\n        require(msg.sender == team, \"not team\");\n        require(_teamRate <= MAX_TEAM_RATE, \"rate too high\");\n        teamRate = _teamRate;\n    }\n\n    // calculate circulating supply as total token supply - locked supply\n    function circulating_supply() public view returns (uint256) {\n        return _flow.totalSupply() - _ve.totalSupply();\n    }\n\n    // emission calculation is 1% of available supply to mint adjusted by circulating / total supply\n    function calculate_emission() public view returns (uint256) {\n        return (weekly * EMISSION) / PRECISION;\n    }\n\n    // weekly emission takes the max of calculated (aka target) emission versus circulating tail end emission\n    function weekly_emission() public view returns (uint256) {\n        return Math.max(calculate_emission(), circulating_emission());\n    }\n\n    // calculates tail end (infinity) emissions as 0.2% of total supply\n    function circulating_emission() public view returns (uint256) {\n        return (circulating_supply() * TAIL_EMISSION) / PRECISION;\n    }\n\n    // calculate inflation and adjust ve balances accordingly\n    function calculate_growth(uint256 _minted) public view returns (uint256) {\n        uint256 _veTotal = _ve.totalSupply();\n        uint256 _flowTotal = _flow.totalSupply();\n        return\n            (((((_minted * _veTotal) / _flowTotal) * _veTotal) / _flowTotal) *\n                _veTotal) /\n            _flowTotal /\n            2;\n    }\n\n    // update period can only be called once per cycle (1 week)\n    function update_period() external returns (uint256) {\n        uint256 _period = active_period;\n        if (block.timestamp >= _period + WEEK && initializer == address(0)) {\n            // only trigger if new week\n            _period = (block.timestamp / WEEK) * WEEK;\n            active_period = _period;\n            weekly = weekly_emission();\n\n            uint256 _growth = calculate_growth(weekly);\n            uint256 _teamEmissions = (teamRate * (_growth + weekly)) /\n                (PRECISION - teamRate);\n            uint256 _required = _growth + weekly + _teamEmissions;\n            uint256 _balanceOf = _flow.balanceOf(address(this));\n            if (_balanceOf < _required) {\n                _flow.mint(address(this), _required - _balanceOf);\n            }\n\n            require(_flow.transfer(team, _teamEmissions));\n            require(_flow.transfer(address(_rewards_distributor), _growth));\n            _rewards_distributor.checkpoint_token(); // checkpoint token balance that was just minted in rewards distributor\n            _rewards_distributor.checkpoint_total_supply(); // checkpoint supply\n\n            _flow.approve(address(_voter), weekly);\n            _voter.notifyRewardAmount(weekly);\n\n            emit Mint(\n                msg.sender,\n                weekly,\n                circulating_supply(),\n                circulating_emission()\n            );\n        }\n        return _period;\n    }\n}\n"
    },
    "contracts/Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\nimport \"contracts/interfaces/IERC20.sol\";\nimport \"contracts/interfaces/IPair.sol\";\nimport \"contracts/interfaces/IPairCallee.sol\";\nimport \"contracts/factories/PairFactory.sol\";\nimport \"contracts/PairFees.sol\";\n\n// The base pair of pools, either stable or volatile\ncontract Pair is IPair {\n    string public name;\n    string public symbol;\n    uint8 public constant decimals = 18;\n\n    // Used to denote stable or volatile pair, not immutable since construction happens in the initialize method for CREATE2 deterministic addresses\n    bool public immutable stable;\n\n    uint256 public totalSupply = 0;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n    mapping(address => uint256) public balanceOf;\n\n    bytes32 internal DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 internal constant PERMIT_TYPEHASH =\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint256) public nonces;\n\n    uint256 internal constant MINIMUM_LIQUIDITY = 10**3;\n\n    address public immutable token0;\n    address public immutable token1;\n    address public immutable fees;\n    address immutable factory;\n\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\n    struct Observation {\n        uint256 timestamp;\n        uint256 reserve0Cumulative;\n        uint256 reserve1Cumulative;\n    }\n\n    // Capture oracle reading every 30 minutes\n    uint256 constant periodSize = 1800;\n\n    Observation[] public observations;\n\n    uint256 internal immutable decimals0;\n    uint256 internal immutable decimals1;\n\n    uint256 public reserve0;\n    uint256 public reserve1;\n    uint256 public blockTimestampLast;\n\n    uint256 public reserve0CumulativeLast;\n    uint256 public reserve1CumulativeLast;\n\n    // index0 and index1 are used to accumulate fees, this is split out from normal trades to keep the swap \"clean\"\n    // this further allows LP holders to easily claim fees for tokens they have/staked\n    uint256 public index0 = 0;\n    uint256 public index1 = 0;\n\n    // position assigned to each LP to track their current index0 & index1 vs the global position\n    mapping(address => uint256) public supplyIndex0;\n    mapping(address => uint256) public supplyIndex1;\n\n    // tracks the amount of unclaimed, but claimable tokens off of fees for token0 and token1\n    mapping(address => uint256) public claimable0;\n    mapping(address => uint256) public claimable1;\n\n    event Fees(address indexed sender, uint256 amount0, uint256 amount1);\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint256 reserve0, uint256 reserve1);\n    event Claim(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n\n    constructor() {\n        factory = msg.sender;\n        (address _token0, address _token1, bool _stable) = PairFactory(\n            msg.sender\n        ).getInitializable();\n        (token0, token1, stable) = (_token0, _token1, _stable);\n        fees = address(new PairFees(_token0, _token1));\n        if (_stable) {\n            name = string(\n                abi.encodePacked(\n                    \"StableV1 AMM - \",\n                    IERC20(_token0).symbol(),\n                    \"/\",\n                    IERC20(_token1).symbol()\n                )\n            );\n            symbol = string(\n                abi.encodePacked(\n                    \"sAMM-\",\n                    IERC20(_token0).symbol(),\n                    \"/\",\n                    IERC20(_token1).symbol()\n                )\n            );\n        } else {\n            name = string(\n                abi.encodePacked(\n                    \"VolatileV1 AMM - \",\n                    IERC20(_token0).symbol(),\n                    \"/\",\n                    IERC20(_token1).symbol()\n                )\n            );\n            symbol = string(\n                abi.encodePacked(\n                    \"vAMM-\",\n                    IERC20(_token0).symbol(),\n                    \"/\",\n                    IERC20(_token1).symbol()\n                )\n            );\n        }\n\n        decimals0 = 10**IERC20(_token0).decimals();\n        decimals1 = 10**IERC20(_token1).decimals();\n\n        observations.push(Observation(block.timestamp, 0, 0));\n    }\n\n    // simple re-entrancy check\n    uint256 internal _unlocked = 1;\n    modifier lock() {\n        require(_unlocked == 1);\n        _unlocked = 2;\n        _;\n        _unlocked = 1;\n    }\n\n    function observationLength() external view returns (uint256) {\n        return observations.length;\n    }\n\n    function lastObservation() public view returns (Observation memory) {\n        return observations[observations.length - 1];\n    }\n\n    function metadata()\n        external\n        view\n        returns (\n            uint256 dec0,\n            uint256 dec1,\n            uint256 r0,\n            uint256 r1,\n            bool st,\n            address t0,\n            address t1\n        )\n    {\n        return (\n            decimals0,\n            decimals1,\n            reserve0,\n            reserve1,\n            stable,\n            token0,\n            token1\n        );\n    }\n\n    function tokens() external view returns (address, address) {\n        return (token0, token1);\n    }\n\n    // claim accumulated but unclaimed fees (viewable via claimable0 and claimable1)\n    function claimFees() external returns (uint256 claimed0, uint256 claimed1) {\n        _updateFor(msg.sender);\n\n        claimed0 = claimable0[msg.sender];\n        claimed1 = claimable1[msg.sender];\n\n        if (claimed0 > 0 || claimed1 > 0) {\n            claimable0[msg.sender] = 0;\n            claimable1[msg.sender] = 0;\n\n            PairFees(fees).claimFeesFor(msg.sender, claimed0, claimed1);\n\n            emit Claim(msg.sender, msg.sender, claimed0, claimed1);\n        }\n    }\n\n    // Accrue fees on token0\n    function _update0(uint256 amount) internal {\n        _safeTransfer(token0, fees, amount); // transfer the fees out to PairFees\n        uint256 _ratio = (amount * 1e18) / totalSupply; // 1e18 adjustment is removed during claim\n        if (_ratio > 0) {\n            index0 += _ratio;\n        }\n        emit Fees(msg.sender, amount, 0);\n    }\n\n    // Accrue fees on token1\n    function _update1(uint256 amount) internal {\n        _safeTransfer(token1, fees, amount);\n        uint256 _ratio = (amount * 1e18) / totalSupply;\n        if (_ratio > 0) {\n            index1 += _ratio;\n        }\n        emit Fees(msg.sender, 0, amount);\n    }\n\n    // this function MUST be called on any balance changes, otherwise can be used to infinitely claim fees\n    // Fees are segregated from core funds, so fees can never put liquidity at risk\n    function _updateFor(address recipient) internal {\n        uint256 _supplied = balanceOf[recipient]; // get LP balance of `recipient`\n        if (_supplied > 0) {\n            uint256 _supplyIndex0 = supplyIndex0[recipient]; // get last adjusted index0 for recipient\n            uint256 _supplyIndex1 = supplyIndex1[recipient];\n            uint256 _index0 = index0; // get global index0 for accumulated fees\n            uint256 _index1 = index1;\n            supplyIndex0[recipient] = _index0; // update user current position to global position\n            supplyIndex1[recipient] = _index1;\n            uint256 _delta0 = _index0 - _supplyIndex0; // see if there is any difference that need to be accrued\n            uint256 _delta1 = _index1 - _supplyIndex1;\n            if (_delta0 > 0) {\n                uint256 _share = (_supplied * _delta0) / 1e18; // add accrued difference for each supplied token\n                claimable0[recipient] += _share;\n            }\n            if (_delta1 > 0) {\n                uint256 _share = (_supplied * _delta1) / 1e18;\n                claimable1[recipient] += _share;\n            }\n        } else {\n            supplyIndex0[recipient] = index0; // new users are set to the default global state\n            supplyIndex1[recipient] = index1;\n        }\n    }\n\n    function getReserves()\n        public\n        view\n        returns (\n            uint256 _reserve0,\n            uint256 _reserve1,\n            uint256 _blockTimestampLast\n        )\n    {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(\n        uint256 balance0,\n        uint256 balance1,\n        uint256 _reserve0,\n        uint256 _reserve1\n    ) internal {\n        uint256 blockTimestamp = block.timestamp;\n        uint256 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            reserve0CumulativeLast += _reserve0 * timeElapsed;\n            reserve1CumulativeLast += _reserve1 * timeElapsed;\n        }\n\n        Observation memory _point = lastObservation();\n        timeElapsed = blockTimestamp - _point.timestamp; // compare the last observation with current timestamp, if greater than 30 minutes, record a new event\n        if (timeElapsed > periodSize) {\n            observations.push(\n                Observation(\n                    blockTimestamp,\n                    reserve0CumulativeLast,\n                    reserve1CumulativeLast\n                )\n            );\n        }\n        reserve0 = balance0;\n        reserve1 = balance1;\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices()\n        public\n        view\n        returns (\n            uint256 reserve0Cumulative,\n            uint256 reserve1Cumulative,\n            uint256 blockTimestamp\n        )\n    {\n        blockTimestamp = block.timestamp;\n        reserve0Cumulative = reserve0CumulativeLast;\n        reserve1Cumulative = reserve1CumulativeLast;\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (\n            uint256 _reserve0,\n            uint256 _reserve1,\n            uint256 _blockTimestampLast\n        ) = getReserves();\n        if (_blockTimestampLast != blockTimestamp) {\n            // subtraction overflow is desired\n            uint256 timeElapsed = blockTimestamp - _blockTimestampLast;\n            reserve0Cumulative += _reserve0 * timeElapsed;\n            reserve1Cumulative += _reserve1 * timeElapsed;\n        }\n    }\n\n    // gives the current twap price measured from amountIn * tokenIn gives amountOut\n    function current(address tokenIn, uint256 amountIn)\n        external\n        view\n        returns (uint256 amountOut)\n    {\n        Observation memory _observation = lastObservation();\n        (\n            uint256 reserve0Cumulative,\n            uint256 reserve1Cumulative,\n\n        ) = currentCumulativePrices();\n        if (block.timestamp == _observation.timestamp) {\n            _observation = observations[observations.length - 2];\n        }\n\n        uint256 timeElapsed = block.timestamp - _observation.timestamp;\n        uint256 _reserve0 = (reserve0Cumulative -\n            _observation.reserve0Cumulative) / timeElapsed;\n        uint256 _reserve1 = (reserve1Cumulative -\n            _observation.reserve1Cumulative) / timeElapsed;\n        amountOut = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\n    }\n\n    // as per `current`, however allows user configured granularity, up to the full window size\n    function quote(\n        address tokenIn,\n        uint256 amountIn,\n        uint256 granularity\n    ) external view returns (uint256 amountOut) {\n        uint256[] memory _prices = sample(tokenIn, amountIn, granularity, 1);\n        uint256 priceAverageCumulative;\n        for (uint256 i = 0; i < _prices.length; i++) {\n            priceAverageCumulative += _prices[i];\n        }\n        return priceAverageCumulative / granularity;\n    }\n\n    // returns a memory set of twap prices\n    function prices(\n        address tokenIn,\n        uint256 amountIn,\n        uint256 points\n    ) external view returns (uint256[] memory) {\n        return sample(tokenIn, amountIn, points, 1);\n    }\n\n    function sample(\n        address tokenIn,\n        uint256 amountIn,\n        uint256 points,\n        uint256 window\n    ) public view returns (uint256[] memory) {\n        uint256[] memory _prices = new uint256[](points);\n\n        uint256 length = observations.length - 1;\n        uint256 i = length - (points * window);\n        uint256 nextIndex = 0;\n        uint256 index = 0;\n\n        for (; i < length; i += window) {\n            nextIndex = i + window;\n            uint256 timeElapsed = observations[nextIndex].timestamp -\n                observations[i].timestamp;\n            uint256 _reserve0 = (observations[nextIndex].reserve0Cumulative -\n                observations[i].reserve0Cumulative) / timeElapsed;\n            uint256 _reserve1 = (observations[nextIndex].reserve1Cumulative -\n                observations[i].reserve1Cumulative) / timeElapsed;\n            _prices[index] = _getAmountOut(\n                amountIn,\n                tokenIn,\n                _reserve0,\n                _reserve1\n            );\n            // index < length; length cannot overflow\n            unchecked {\n                index = index + 1;\n            }\n        }\n        return _prices;\n    }\n\n    // this low-level function should be called by addLiquidity functions in Router.sol, which performs important safety checks\n    // standard uniswap v2 implementation\n    function mint(address to) external lock returns (uint256 liquidity) {\n        (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\n        uint256 _balance0 = IERC20(token0).balanceOf(address(this));\n        uint256 _balance1 = IERC20(token1).balanceOf(address(this));\n        uint256 _amount0 = _balance0 - _reserve0;\n        uint256 _amount1 = _balance1 - _reserve1;\n\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(_amount0 * _amount1) - MINIMUM_LIQUIDITY;\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = Math.min(\n                (_amount0 * _totalSupply) / _reserve0,\n                (_amount1 * _totalSupply) / _reserve1\n            );\n        }\n        require(liquidity > 0, \"ILM\"); // Pair: INSUFFICIENT_LIQUIDITY_MINTED\n        _mint(to, liquidity);\n\n        _update(_balance0, _balance1, _reserve0, _reserve1);\n        emit Mint(msg.sender, _amount0, _amount1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    // standard uniswap v2 implementation\n    function burn(address to)\n        external\n        lock\n        returns (uint256 amount0, uint256 amount1)\n    {\n        (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\n        (address _token0, address _token1) = (token0, token1);\n        uint256 _balance0 = IERC20(_token0).balanceOf(address(this));\n        uint256 _balance1 = IERC20(_token1).balanceOf(address(this));\n        uint256 _liquidity = balanceOf[address(this)];\n\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = (_liquidity * _balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = (_liquidity * _balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, \"ILB\"); // Pair: INSUFFICIENT_LIQUIDITY_BURNED\n        _burn(address(this), _liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        _balance0 = IERC20(_token0).balanceOf(address(this));\n        _balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(_balance0, _balance1, _reserve0, _reserve1);\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external lock {\n        require(!PairFactory(factory).isPaused());\n        require(amount0Out > 0 || amount1Out > 0, \"IOA\"); // Pair: INSUFFICIENT_OUTPUT_AMOUNT\n        (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \"IL\"); // Pair: INSUFFICIENT_LIQUIDITY\n\n        uint256 _balance0;\n        uint256 _balance1;\n        {\n            // scope for _token{0,1}, avoids stack too deep errors\n            (address _token0, address _token1) = (token0, token1);\n            require(to != _token0 && to != _token1, \"IT\"); // Pair: INVALID_TO\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n            if (data.length > 0)\n                IPairCallee(to).hook(msg.sender, amount0Out, amount1Out, data); // callback, used for flash loans\n            _balance0 = IERC20(_token0).balanceOf(address(this));\n            _balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint256 amount0In = _balance0 > _reserve0 - amount0Out\n            ? _balance0 - (_reserve0 - amount0Out)\n            : 0;\n        uint256 amount1In = _balance1 > _reserve1 - amount1Out\n            ? _balance1 - (_reserve1 - amount1Out)\n            : 0;\n        require(amount0In > 0 || amount1In > 0, \"IIA\"); // Pair: INSUFFICIENT_INPUT_AMOUNT\n        {\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n            (address _token0, address _token1) = (token0, token1);\n            if (amount0In > 0)\n                _update0(\n                    (amount0In * PairFactory(factory).getFee(stable)) / 10000\n                ); // accrue fees for token0 and move them out of pool\n            if (amount1In > 0)\n                _update1(\n                    (amount1In * PairFactory(factory).getFee(stable)) / 10000\n                ); // accrue fees for token1 and move them out of pool\n            _balance0 = IERC20(_token0).balanceOf(address(this)); // since we removed tokens, we need to reconfirm balances, can also simply use previous balance - amountIn/ 10000, but doing balanceOf again as safety check\n            _balance1 = IERC20(_token1).balanceOf(address(this));\n            // The curve, either x3y+y3x for stable pools, or x*y for volatile pools\n            require(_k(_balance0, _balance1) >= _k(_reserve0, _reserve1), \"K\"); // Pair: K\n        }\n\n        _update(_balance0, _balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n    function skim(address to) external lock {\n        (address _token0, address _token1) = (token0, token1);\n        _safeTransfer(\n            _token0,\n            to,\n            IERC20(_token0).balanceOf(address(this)) - (reserve0)\n        );\n        _safeTransfer(\n            _token1,\n            to,\n            IERC20(_token1).balanceOf(address(this)) - (reserve1)\n        );\n    }\n\n    // force reserves to match balances\n    function sync() external lock {\n        _update(\n            IERC20(token0).balanceOf(address(this)),\n            IERC20(token1).balanceOf(address(this)),\n            reserve0,\n            reserve1\n        );\n    }\n\n    function _f(uint256 x0, uint256 y) internal pure returns (uint256) {\n        return\n            (x0 * ((((y * y) / 1e18) * y) / 1e18)) /\n            1e18 +\n            (((((x0 * x0) / 1e18) * x0) / 1e18) * y) /\n            1e18;\n    }\n\n    function _d(uint256 x0, uint256 y) internal pure returns (uint256) {\n        return\n            (3 * x0 * ((y * y) / 1e18)) /\n            1e18 +\n            ((((x0 * x0) / 1e18) * x0) / 1e18);\n    }\n\n    function _get_y(\n        uint256 x0,\n        uint256 xy,\n        uint256 y\n    ) internal pure returns (uint256) {\n        for (uint256 i = 0; i < 255; i++) {\n            uint256 y_prev = y;\n            uint256 k = _f(x0, y);\n            if (k < xy) {\n                uint256 dy = ((xy - k) * 1e18) / _d(x0, y);\n                y = y + dy;\n            } else {\n                uint256 dy = ((k - xy) * 1e18) / _d(x0, y);\n                y = y - dy;\n            }\n            if (y > y_prev) {\n                if (y - y_prev <= 1) {\n                    return y;\n                }\n            } else {\n                if (y_prev - y <= 1) {\n                    return y;\n                }\n            }\n        }\n        return y;\n    }\n\n    function getAmountOut(uint256 amountIn, address tokenIn)\n        external\n        view\n        returns (uint256)\n    {\n        (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\n        amountIn -= (amountIn * PairFactory(factory).getFee(stable)) / 10000; // remove fee from amount received\n        return _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\n    }\n\n    function _getAmountOut(\n        uint256 amountIn,\n        address tokenIn,\n        uint256 _reserve0,\n        uint256 _reserve1\n    ) internal view returns (uint256) {\n        if (stable) {\n            uint256 xy = _k(_reserve0, _reserve1);\n            _reserve0 = (_reserve0 * 1e18) / decimals0;\n            _reserve1 = (_reserve1 * 1e18) / decimals1;\n            (uint256 reserveA, uint256 reserveB) = tokenIn == token0\n                ? (_reserve0, _reserve1)\n                : (_reserve1, _reserve0);\n            amountIn = tokenIn == token0\n                ? (amountIn * 1e18) / decimals0\n                : (amountIn * 1e18) / decimals1;\n            uint256 y = reserveB - _get_y(amountIn + reserveA, xy, reserveB);\n            return (y * (tokenIn == token0 ? decimals1 : decimals0)) / 1e18;\n        } else {\n            (uint256 reserveA, uint256 reserveB) = tokenIn == token0\n                ? (_reserve0, _reserve1)\n                : (_reserve1, _reserve0);\n            return (amountIn * reserveB) / (reserveA + amountIn);\n        }\n    }\n\n    function _k(uint256 x, uint256 y) internal view returns (uint256) {\n        if (stable) {\n            uint256 _x = (x * 1e18) / decimals0;\n            uint256 _y = (y * 1e18) / decimals1;\n            uint256 _a = (_x * _y) / 1e18;\n            uint256 _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\n            return (_a * _b) / 1e18; // x3y+y3x >= k\n        } else {\n            return x * y; // xy >= k\n        }\n    }\n\n    function _mint(address dst, uint256 amount) internal {\n        _updateFor(dst); // balances must be updated on mint/burn/transfer\n        totalSupply += amount;\n        balanceOf[dst] += amount;\n        emit Transfer(address(0), dst, amount);\n    }\n\n    function _burn(address dst, uint256 amount) internal {\n        _updateFor(dst);\n        totalSupply -= amount;\n        balanceOf[dst] -= amount;\n        emit Transfer(dst, address(0), amount);\n    }\n\n    function approve(address spender, uint256 amount) external returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        require(deadline >= block.timestamp, \"Pair: EXPIRED\");\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                ),\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                block.chainid,\n                address(this)\n            )\n        );\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(\n                    abi.encode(\n                        PERMIT_TYPEHASH,\n                        owner,\n                        spender,\n                        value,\n                        nonces[owner]++,\n                        deadline\n                    )\n                )\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(\n            recoveredAddress != address(0) && recoveredAddress == owner,\n            \"Pair: INVALID_SIGNATURE\"\n        );\n        allowance[owner][spender] = value;\n\n        emit Approval(owner, spender, value);\n    }\n\n    function transfer(address dst, uint256 amount) external returns (bool) {\n        _transferTokens(msg.sender, dst, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external returns (bool) {\n        address spender = msg.sender;\n        uint256 spenderAllowance = allowance[src][spender];\n\n        if (spender != src && spenderAllowance != type(uint256).max) {\n            uint256 newAllowance = spenderAllowance - amount;\n            allowance[src][spender] = newAllowance;\n\n            emit Approval(src, spender, newAllowance);\n        }\n\n        _transferTokens(src, dst, amount);\n        return true;\n    }\n\n    function _transferTokens(\n        address src,\n        address dst,\n        uint256 amount\n    ) internal {\n        _updateFor(src); // update fee position for src\n        _updateFor(dst); // update fee position for dst\n\n        balanceOf[src] -= amount;\n        balanceOf[dst] += amount;\n\n        emit Transfer(src, dst, amount);\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n}\n"
    },
    "contracts/PairFees.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport 'contracts/interfaces/IERC20.sol';\n\n// Pair Fees contract is used as a 1:1 pair relationship to split out fees, this ensures that the curve does not need to be modified for LP shares\ncontract PairFees {\n\n    address internal immutable pair; // The pair it is bonded to\n    address internal immutable token0; // token0 of pair, saved localy and statically for gas optimization\n    address internal immutable token1; // Token1 of pair, saved localy and statically for gas optimization\n\n    constructor(address _token0, address _token1) {\n        pair = msg.sender;\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    function _safeTransfer(address token,address to,uint256 value) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) =\n        token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n\n    // Allow the pair to transfer fees to users\n    function claimFeesFor(address recipient, uint amount0, uint amount1) external {\n        require(msg.sender == pair);\n        if (amount0 > 0) _safeTransfer(token0, recipient, amount0);\n        if (amount1 > 0) _safeTransfer(token1, recipient, amount1);\n    }\n\n}\n"
    },
    "contracts/redeem/MerkleClaim.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.13;\n\n/// ============ Imports ============\n\nimport {IFlow} from \"contracts/interfaces/IFlow.sol\";\nimport {MerkleProof} from \"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\"; // OZ: MerkleProof\n\n/// @title MerkleClaim\n/// @notice Claims FLOW for members of a merkle tree\n/// @author Modified from Merkle Airdrop Starter (https://github.com/Anish-Agnihotri/merkle-airdrop-starter/blob/master/contracts/src/MerkleClaimERC20.sol)\ncontract MerkleClaim {\n    /// ============ Immutable storage ============\n\n    /// @notice FLOW token to claim\n    IFlow public immutable FLOW;\n    /// @notice ERC20-claimee inclusion root\n    bytes32 public immutable merkleRoot;\n\n    /// ============ Mutable storage ============\n\n    /// @notice Mapping of addresses who have claimed tokens\n    mapping(address => bool) public hasClaimed;\n\n    /// ============ Constructor ============\n\n    /// @notice Creates a new MerkleClaim contract\n    /// @param _flow address\n    /// @param _merkleRoot of claimees\n    constructor(address _flow, bytes32 _merkleRoot) {\n        FLOW = IFlow(_flow);\n        merkleRoot = _merkleRoot;\n    }\n\n    /// ============ Events ============\n\n    /// @notice Emitted after a successful token claim\n    /// @param to recipient of claim\n    /// @param amount of tokens claimed\n    event Claim(address indexed to, uint256 amount);\n\n    /// ============ Functions ============\n\n    /// @notice Allows claiming tokens if address is part of merkle tree\n    /// @param to address of claimee\n    /// @param amount of tokens owed to claimee\n    /// @param proof merkle proof to prove address and amount are in tree\n    function claim(\n        address to,\n        uint256 amount,\n        bytes32[] calldata proof\n    ) external {\n        // Throw if address has already claimed tokens\n        require(!hasClaimed[to], \"ALREADY_CLAIMED\");\n\n        // Verify merkle proof, or revert if not in tree\n        bytes32 leaf = keccak256(abi.encodePacked(to, amount));\n        bool isValidLeaf = MerkleProof.verify(proof, merkleRoot, leaf);\n        require(isValidLeaf, \"NOT_IN_MERKLE\");\n\n        // Set address to claimed\n        hasClaimed[to] = true;\n\n        // Claim tokens for address\n        require(FLOW.claim(to, amount), \"CLAIM_FAILED\");\n\n        // Emit claim event\n        emit Claim(to, amount);\n    }\n}\n"
    },
    "contracts/redeem/RedemptionReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"lib/LayerZero/contracts/interfaces/ILayerZeroEndpoint.sol\";\nimport \"lib/LayerZero/contracts/interfaces/ILayerZeroReceiver.sol\";\nimport \"contracts/interfaces/IERC20.sol\";\nimport \"contracts/interfaces/IFlow.sol\";\n\n/// @notice Part 2 of 2 in the WeVE (FTM) -> USDC + FLOW (OP) redemption process\n/// This contract is responsible for receiving the LZ message and distributing USDC + FLOW\ncontract RedemptionReceiver is ILayerZeroReceiver {\n    IERC20 public immutable USDC;\n    IFlow public immutable FLOW;\n\n    uint16 public immutable fantomChainId; // 12 for FTM, 10012 for FTM testnet\n    address public immutable endpoint;\n\n    address public team;\n    uint256 public immutable deployed;\n\n    address public fantomSender;\n    uint256 public constant ELIGIBLE_WEVE = 375112540 * 1e18;\n    uint256 public redeemedWEVE;\n    uint256 public redeemableUSDC;\n    uint256 public redeemableFLOW;\n    uint256 public leftoverFLOW;\n\n    constructor(\n        address _usdc,\n        address _flow,\n        uint16 _fantomChainId,\n        address _endpoint\n    ) {\n        require(_fantomChainId == 12 || _fantomChainId == 10012, \"CHAIN_ID_NOT_FTM\");\n\n        USDC = IERC20(_usdc);\n        FLOW = IFlow(_flow);\n\n        fantomChainId = _fantomChainId;\n        endpoint = _endpoint;\n\n        team = msg.sender;\n        deployed = block.timestamp;\n    }\n\n    modifier onlyTeam() {\n        require(msg.sender == team, \"ONLY_TEAM\");\n        _;\n    }\n\n    event Initialized(address fantomSender, uint256 redeemableUSDC, uint256 redeemableFLOW);\n\n    function initializeReceiverWith(\n        address _fantomSender,\n        uint256 _redeemableUSDC,\n        uint256 _redeemableFLOW\n    ) external onlyTeam {\n        require(fantomSender == address(0), \"ALREADY_INITIALIZED\");\n        require(\n            USDC.transferFrom(msg.sender, address(this), _redeemableUSDC),\n            \"USDC_TRANSFER_FAILED\"\n        );\n\n        fantomSender = _fantomSender;\n        redeemableUSDC = _redeemableUSDC;\n        redeemableFLOW = _redeemableFLOW;\n        leftoverFLOW = _redeemableFLOW;\n\n        emit Initialized(fantomSender, redeemableUSDC, redeemableFLOW);\n    }\n\n    function setTeam(address _team) external onlyTeam {\n        team = _team;\n    }\n\n    function previewRedeem(uint256 amountWEVE)\n        public\n        view\n        returns (uint256 shareOfUSDC, uint256 shareOfFLOW)\n    {\n        // pro rata USDC\n        shareOfUSDC = (amountWEVE * redeemableUSDC) / ELIGIBLE_WEVE;\n        // pro rata FLOW\n        shareOfFLOW = (amountWEVE * redeemableFLOW) / ELIGIBLE_WEVE;\n    }\n\n    function lzReceive(\n        uint16 srcChainId,\n        bytes memory srcAddress,\n        uint64,\n        bytes memory payload\n    ) external override {\n        require(fantomSender != address(0), \"NOT_INITIALIZED\");\n        require(\n            msg.sender == endpoint &&\n                srcChainId == fantomChainId &&\n                addressFromPackedBytes(srcAddress) == fantomSender,\n            \"UNAUTHORIZED_CALLER\"\n        );\n\n        (address redemptionAddress, uint256 amountWEVE) = abi.decode(\n            payload,\n            (address, uint256)\n        );\n\n        require(\n            (redeemedWEVE += amountWEVE) <= ELIGIBLE_WEVE,\n            \"cannot redeem more than eligible\"\n        );\n        (uint256 shareOfUSDC, uint256 shareOfFLOW) = previewRedeem(amountWEVE);\n\n        require(\n            USDC.transfer(redemptionAddress, shareOfUSDC),\n            \"USDC_TRANSFER_FAILED\"\n        );\n\n        leftoverFLOW -= shareOfFLOW; // this will revert if underflows\n        require(\n            FLOW.claim(redemptionAddress, shareOfFLOW),\n            \"CLAIM_FAILED\"\n        );\n    }\n\n    function addressFromPackedBytes(bytes memory toAddressBytes)\n        public\n        pure\n        returns (address toAddress)\n    {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            toAddress := mload(add(toAddressBytes, 20))\n        }\n    }\n\n    function claimLeftovers() external onlyTeam {\n        require(block.timestamp >= deployed + 30 days, \"LEFTOVERS_NOT_CLAIMABLE\");\n        require(\n            USDC.transfer(msg.sender, USDC.balanceOf(address(this))),\n            \"USDC_TRANSFER_FAILED\"\n        );\n    }\n}\n"
    },
    "contracts/redeem/RedemptionSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"lib/LayerZero/contracts/interfaces/ILayerZeroEndpoint.sol\";\nimport \"contracts/interfaces/IERC20.sol\";\n\n/// @notice Part 1 of 2 in the WeVE (FTM) -> USDC + FLOW (OP) redemption process\n/// This contract is responsible for burning WeVE and sending the LZ message\ncontract RedemptionSender {\n    address public immutable weve;\n    uint256 public constant ELIGIBLE_WEVE = 375112540 * 1e18;\n    uint256 public redeemedWEVE;\n    uint16 public immutable optimismChainId; // 11 for OP, 10011 for OP Kovan\n    address public immutable endpoint;\n    address public immutable optimismReceiver;\n\n    event SubmittedClaim(uint256 amount, uint64 indexed lzeNonce);\n\n    constructor(\n        address _weve,\n        uint16 _optimismChainId,\n        address _endpoint,\n        address _optimismReceiver\n    ) {\n        require(_optimismChainId == 11 || _optimismChainId == 10011, \"CHAIN_ID_NOT_OP\");\n        weve = _weve;\n        optimismChainId = _optimismChainId;\n        endpoint = _endpoint;\n        optimismReceiver = _optimismReceiver;\n    }\n\n    function estimateLayerZeroFee() public view returns (uint256 ftm, uint256 lzo) {\n        (ftm, lzo) = ILayerZeroEndpoint(endpoint).estimateFees(\n            optimismChainId,\n            address(this),\n            abi.encode(msg.sender, 42690),\n            false,\n            bytes(\"\")\n        );\n    }\n\n    function redeemWEVE(\n        uint256 amount,\n        address zroPaymentAddress,\n        bytes memory zroTransactionParams\n    ) public payable {\n        require(amount != 0, \"AMOUNT_ZERO\");\n        require(\n            (redeemedWEVE += amount) <= ELIGIBLE_WEVE,\n            \"cannot redeem more than eligible\"\n        );\n        require(\n            IERC20(weve).transferFrom(\n                msg.sender,\n                0x000000000000000000000000000000000000dEaD,\n                amount\n            ),\n            \"WEVE: TRANSFER_FAILED\"\n        );\n\n        ILayerZeroEndpoint(endpoint).send{value: msg.value}(\n            optimismChainId,\n            abi.encodePacked(optimismReceiver),\n            abi.encode(msg.sender, amount),\n            payable(msg.sender),\n            zroPaymentAddress,\n            zroTransactionParams\n        );\n\n        uint64 nonce = ILayerZeroEndpoint(endpoint).getOutboundNonce(\n            optimismChainId,\n            address(this)\n        );\n\n        emit SubmittedClaim(amount, nonce);\n    }\n}\n"
    },
    "contracts/RewardsDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\nimport \"contracts/interfaces/IERC20.sol\";\nimport \"contracts/interfaces/IRewardsDistributor.sol\";\nimport \"contracts/interfaces/IVotingEscrow.sol\";\n\n/*\n\n@title Curve Fee Distribution modified for ve(3,3) emissions\n@author Curve Finance, andrecronje\n@license MIT\n\n*/\n\ncontract RewardsDistributor is IRewardsDistributor {\n    event CheckpointToken(uint256 time, uint256 tokens);\n\n    event Claimed(\n        uint256 tokenId,\n        uint256 amount,\n        uint256 claim_epoch,\n        uint256 max_epoch\n    );\n\n    uint256 constant WEEK = 7 * 86400;\n\n    uint256 public start_time;\n    uint256 public time_cursor;\n    mapping(uint256 => uint256) public time_cursor_of;\n    mapping(uint256 => uint256) public user_epoch_of;\n\n    uint256 public last_token_time;\n    uint256[1000000000000000] public tokens_per_week;\n\n    address public voting_escrow;\n    address public token;\n    uint256 public token_last_balance;\n\n    uint256[1000000000000000] public ve_supply;\n\n    address public depositor;\n\n    constructor(address _voting_escrow) {\n        uint256 _t = (block.timestamp / WEEK) * WEEK;\n        start_time = _t;\n        last_token_time = _t;\n        time_cursor = _t;\n        address _token = IVotingEscrow(_voting_escrow).token();\n        token = _token;\n        voting_escrow = _voting_escrow;\n        depositor = msg.sender;\n        require(IERC20(_token).approve(_voting_escrow, type(uint256).max));\n    }\n\n    function timestamp() external view returns (uint256) {\n        return (block.timestamp / WEEK) * WEEK;\n    }\n\n    function _checkpoint_token() internal {\n        uint256 token_balance = IERC20(token).balanceOf(address(this));\n        uint256 to_distribute = token_balance - token_last_balance;\n        token_last_balance = token_balance;\n\n        uint256 t = last_token_time;\n        uint256 since_last = block.timestamp - t;\n        last_token_time = block.timestamp;\n        uint256 this_week = (t / WEEK) * WEEK;\n        uint256 next_week = 0;\n\n        for (uint256 i = 0; i < 20; i++) {\n            next_week = this_week + WEEK;\n            if (block.timestamp < next_week) {\n                if (since_last == 0 && block.timestamp == t) {\n                    tokens_per_week[this_week] += to_distribute;\n                } else {\n                    tokens_per_week[this_week] +=\n                        (to_distribute * (block.timestamp - t)) /\n                        since_last;\n                }\n                break;\n            } else {\n                if (since_last == 0 && next_week == t) {\n                    tokens_per_week[this_week] += to_distribute;\n                } else {\n                    tokens_per_week[this_week] +=\n                        (to_distribute * (next_week - t)) /\n                        since_last;\n                }\n            }\n            t = next_week;\n            this_week = next_week;\n        }\n        emit CheckpointToken(block.timestamp, to_distribute);\n    }\n\n    function checkpoint_token() external {\n        assert(msg.sender == depositor);\n        _checkpoint_token();\n    }\n\n    function _find_timestamp_epoch(address ve, uint256 _timestamp)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 _min = 0;\n        uint256 _max = IVotingEscrow(ve).epoch();\n        for (uint256 i = 0; i < 128; i++) {\n            if (_min >= _max) break;\n            uint256 _mid = (_min + _max + 2) / 2;\n            IVotingEscrow.Point memory pt = IVotingEscrow(ve).point_history(\n                _mid\n            );\n            if (pt.ts <= _timestamp) {\n                _min = _mid;\n            } else {\n                _max = _mid - 1;\n            }\n        }\n        return _min;\n    }\n\n    function _find_timestamp_user_epoch(\n        address ve,\n        uint256 tokenId,\n        uint256 _timestamp,\n        uint256 max_user_epoch\n    ) internal view returns (uint256) {\n        uint256 _min = 0;\n        uint256 _max = max_user_epoch;\n        for (uint256 i = 0; i < 128; i++) {\n            if (_min >= _max) break;\n            uint256 _mid = (_min + _max + 2) / 2;\n            IVotingEscrow.Point memory pt = IVotingEscrow(ve)\n                .user_point_history(tokenId, _mid);\n            if (pt.ts <= _timestamp) {\n                _min = _mid;\n            } else {\n                _max = _mid - 1;\n            }\n        }\n        return _min;\n    }\n\n    function ve_for_at(uint256 _tokenId, uint256 _timestamp)\n        external\n        view\n        returns (uint256)\n    {\n        address ve = voting_escrow;\n        uint256 max_user_epoch = IVotingEscrow(ve).user_point_epoch(_tokenId);\n        uint256 epoch = _find_timestamp_user_epoch(\n            ve,\n            _tokenId,\n            _timestamp,\n            max_user_epoch\n        );\n        IVotingEscrow.Point memory pt = IVotingEscrow(ve).user_point_history(\n            _tokenId,\n            epoch\n        );\n        return\n            Math.max(\n                uint256(\n                    int256(\n                        pt.bias -\n                            pt.slope *\n                            (int128(int256(_timestamp - pt.ts)))\n                    )\n                ),\n                0\n            );\n    }\n\n    function _checkpoint_total_supply() internal {\n        address ve = voting_escrow;\n        uint256 t = time_cursor;\n        uint256 rounded_timestamp = (block.timestamp / WEEK) * WEEK;\n        IVotingEscrow(ve).checkpoint();\n\n        for (uint256 i = 0; i < 20; i++) {\n            if (t > rounded_timestamp) {\n                break;\n            } else {\n                uint256 epoch = _find_timestamp_epoch(ve, t);\n                IVotingEscrow.Point memory pt = IVotingEscrow(ve).point_history(\n                    epoch\n                );\n                int128 dt = 0;\n                if (t > pt.ts) {\n                    dt = int128(int256(t - pt.ts));\n                }\n                ve_supply[t] = Math.max(\n                    uint256(int256(pt.bias - pt.slope * dt)),\n                    0\n                );\n            }\n            t += WEEK;\n        }\n        time_cursor = t;\n    }\n\n    function checkpoint_total_supply() external {\n        _checkpoint_total_supply();\n    }\n\n    function _claim(\n        uint256 _tokenId,\n        address ve,\n        uint256 _last_token_time\n    ) internal returns (uint256) {\n        uint256 user_epoch = 0;\n        uint256 to_distribute = 0;\n\n        uint256 max_user_epoch = IVotingEscrow(ve).user_point_epoch(_tokenId);\n        uint256 _start_time = start_time;\n\n        if (max_user_epoch == 0) return 0;\n\n        uint256 week_cursor = time_cursor_of[_tokenId];\n        if (week_cursor == 0) {\n            user_epoch = _find_timestamp_user_epoch(\n                ve,\n                _tokenId,\n                _start_time,\n                max_user_epoch\n            );\n        } else {\n            user_epoch = user_epoch_of[_tokenId];\n        }\n\n        if (user_epoch == 0) user_epoch = 1;\n\n        IVotingEscrow.Point memory user_point = IVotingEscrow(ve)\n            .user_point_history(_tokenId, user_epoch);\n\n        if (week_cursor == 0)\n            week_cursor = ((user_point.ts + WEEK - 1) / WEEK) * WEEK;\n        if (week_cursor >= last_token_time) return 0;\n        if (week_cursor < _start_time) week_cursor = _start_time;\n\n        IVotingEscrow.Point memory old_user_point;\n\n        for (uint256 i = 0; i < 50; i++) {\n            if (week_cursor >= _last_token_time) break;\n\n            if (week_cursor >= user_point.ts && user_epoch <= max_user_epoch) {\n                user_epoch += 1;\n                old_user_point = user_point;\n                if (user_epoch > max_user_epoch) {\n                    user_point = IVotingEscrow.Point(0, 0, 0, 0);\n                } else {\n                    user_point = IVotingEscrow(ve).user_point_history(\n                        _tokenId,\n                        user_epoch\n                    );\n                }\n            } else {\n                int128 dt = int128(int256(week_cursor - old_user_point.ts));\n                uint256 balance_of = Math.max(\n                    uint256(\n                        int256(old_user_point.bias - dt * old_user_point.slope)\n                    ),\n                    0\n                );\n                if (balance_of == 0 && user_epoch > max_user_epoch) break;\n                if (balance_of != 0) {\n                    to_distribute +=\n                        (balance_of * tokens_per_week[week_cursor]) /\n                        ve_supply[week_cursor];\n                }\n                week_cursor += WEEK;\n            }\n        }\n\n        user_epoch = Math.min(max_user_epoch, user_epoch - 1);\n        user_epoch_of[_tokenId] = user_epoch;\n        time_cursor_of[_tokenId] = week_cursor;\n\n        emit Claimed(_tokenId, to_distribute, user_epoch, max_user_epoch);\n\n        return to_distribute;\n    }\n\n    function _claimable(\n        uint256 _tokenId,\n        address ve,\n        uint256 _last_token_time\n    ) internal view returns (uint256) {\n        uint256 user_epoch = 0;\n        uint256 to_distribute = 0;\n\n        uint256 max_user_epoch = IVotingEscrow(ve).user_point_epoch(_tokenId);\n        uint256 _start_time = start_time;\n\n        if (max_user_epoch == 0) return 0;\n\n        uint256 week_cursor = time_cursor_of[_tokenId];\n        if (week_cursor == 0) {\n            user_epoch = _find_timestamp_user_epoch(\n                ve,\n                _tokenId,\n                _start_time,\n                max_user_epoch\n            );\n        } else {\n            user_epoch = user_epoch_of[_tokenId];\n        }\n\n        if (user_epoch == 0) user_epoch = 1;\n\n        IVotingEscrow.Point memory user_point = IVotingEscrow(ve)\n            .user_point_history(_tokenId, user_epoch);\n\n        if (week_cursor == 0)\n            week_cursor = ((user_point.ts + WEEK - 1) / WEEK) * WEEK;\n        if (week_cursor >= last_token_time) return 0;\n        if (week_cursor < _start_time) week_cursor = _start_time;\n\n        IVotingEscrow.Point memory old_user_point;\n\n        for (uint256 i = 0; i < 50; i++) {\n            if (week_cursor >= _last_token_time) break;\n\n            if (week_cursor >= user_point.ts && user_epoch <= max_user_epoch) {\n                user_epoch += 1;\n                old_user_point = user_point;\n                if (user_epoch > max_user_epoch) {\n                    user_point = IVotingEscrow.Point(0, 0, 0, 0);\n                } else {\n                    user_point = IVotingEscrow(ve).user_point_history(\n                        _tokenId,\n                        user_epoch\n                    );\n                }\n            } else {\n                int128 dt = int128(int256(week_cursor - old_user_point.ts));\n                uint256 balance_of = Math.max(\n                    uint256(\n                        int256(old_user_point.bias - dt * old_user_point.slope)\n                    ),\n                    0\n                );\n                if (balance_of == 0 && user_epoch > max_user_epoch) break;\n                if (balance_of != 0) {\n                    to_distribute +=\n                        (balance_of * tokens_per_week[week_cursor]) /\n                        ve_supply[week_cursor];\n                }\n                week_cursor += WEEK;\n            }\n        }\n\n        return to_distribute;\n    }\n\n    function claimable(uint256 _tokenId) external view returns (uint256) {\n        uint256 _last_token_time = (last_token_time / WEEK) * WEEK;\n        return _claimable(_tokenId, voting_escrow, _last_token_time);\n    }\n\n    function claim(uint256 _tokenId) external returns (uint256) {\n        if (block.timestamp >= time_cursor) _checkpoint_total_supply();\n        uint256 _last_token_time = last_token_time;\n        _last_token_time = (_last_token_time / WEEK) * WEEK;\n        uint256 amount = _claim(_tokenId, voting_escrow, _last_token_time);\n        if (amount != 0) {\n            IVotingEscrow(voting_escrow).deposit_for(_tokenId, amount);\n            token_last_balance -= amount;\n        }\n        return amount;\n    }\n\n    function claim_many(uint256[] memory _tokenIds) external returns (bool) {\n        if (block.timestamp >= time_cursor) _checkpoint_total_supply();\n        uint256 _last_token_time = last_token_time;\n        _last_token_time = (_last_token_time / WEEK) * WEEK;\n        address _voting_escrow = voting_escrow;\n        uint256 total = 0;\n\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            uint256 _tokenId = _tokenIds[i];\n            if (_tokenId == 0) break;\n            uint256 amount = _claim(_tokenId, _voting_escrow, _last_token_time);\n            if (amount != 0) {\n                IVotingEscrow(_voting_escrow).deposit_for(_tokenId, amount);\n                total += amount;\n            }\n        }\n        if (total != 0) {\n            token_last_balance -= total;\n        }\n\n        return true;\n    }\n\n    // Once off event on contract initialize\n    function setDepositor(address _depositor) external {\n        require(msg.sender == depositor);\n        depositor = _depositor;\n    }\n}\n"
    },
    "contracts/Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\nimport \"contracts/interfaces/IERC20.sol\";\nimport \"contracts/interfaces/IPair.sol\";\nimport \"contracts/interfaces/IPairFactory.sol\";\nimport \"contracts/interfaces/IRouter.sol\";\nimport \"contracts/interfaces/IWETH.sol\";\n\ncontract Router is IRouter {\n    struct route {\n        address from;\n        address to;\n        bool stable;\n    }\n\n    address public immutable factory;\n    IWETH public immutable weth;\n    uint256 internal constant MINIMUM_LIQUIDITY = 10**3;\n    bytes32 immutable pairCodeHash;\n\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"Router: EXPIRED\");\n        _;\n    }\n\n    constructor(address _factory, address _weth) {\n        factory = _factory;\n        pairCodeHash = IPairFactory(_factory).pairCodeHash();\n        weth = IWETH(_weth);\n    }\n\n    receive() external payable {\n        assert(msg.sender == address(weth)); // only accept ETH via fallback from the WETH contract\n    }\n\n    function sortTokens(address tokenA, address tokenB)\n        public\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"Router: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"Router: ZERO_ADDRESS\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) public view returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1, stable)),\n                            pairCodeHash // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quoteLiquidity(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"Router: INSUFFICIENT_AMOUNT\");\n        require(reserveA > 0 && reserveB > 0, \"Router: INSUFFICIENT_LIQUIDITY\");\n        amountB = (amountA * reserveB) / reserveA;\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) public view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IPair(\n            pairFor(tokenA, tokenB, stable)\n        ).getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountOut(\n        uint256 amountIn,\n        address tokenIn,\n        address tokenOut\n    ) external view returns (uint256 amount, bool stable) {\n        address pair = pairFor(tokenIn, tokenOut, true);\n        uint256 amountStable;\n        uint256 amountVolatile;\n        if (IPairFactory(factory).isPair(pair)) {\n            amountStable = IPair(pair).getAmountOut(amountIn, tokenIn);\n        }\n        pair = pairFor(tokenIn, tokenOut, false);\n        if (IPairFactory(factory).isPair(pair)) {\n            amountVolatile = IPair(pair).getAmountOut(amountIn, tokenIn);\n        }\n        return\n            amountStable > amountVolatile\n                ? (amountStable, true)\n                : (amountVolatile, false);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(uint256 amountIn, route[] memory routes)\n        public\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(routes.length >= 1, \"Router: INVALID_PATH\");\n        amounts = new uint256[](routes.length + 1);\n        amounts[0] = amountIn;\n        for (uint256 i = 0; i < routes.length; i++) {\n            address pair = pairFor(\n                routes[i].from,\n                routes[i].to,\n                routes[i].stable\n            );\n            if (IPairFactory(factory).isPair(pair)) {\n                amounts[i + 1] = IPair(pair).getAmountOut(\n                    amounts[i],\n                    routes[i].from\n                );\n            }\n        }\n    }\n\n    function isPair(address pair) external view returns (bool) {\n        return IPairFactory(factory).isPair(pair);\n    }\n\n    function quoteAddLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 amountADesired,\n        uint256 amountBDesired\n    )\n        external\n        view\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        )\n    {\n        // create the pair if it doesn't exist yet\n        address _pair = IPairFactory(factory).getPair(tokenA, tokenB, stable);\n        (uint256 reserveA, uint256 reserveB) = (0, 0);\n        uint256 _totalSupply = 0;\n        if (_pair != address(0)) {\n            _totalSupply = IERC20(_pair).totalSupply();\n            (reserveA, reserveB) = getReserves(tokenA, tokenB, stable);\n        }\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n            liquidity = Math.sqrt(amountA * amountB) - MINIMUM_LIQUIDITY;\n        } else {\n            uint256 amountBOptimal = quoteLiquidity(\n                amountADesired,\n                reserveA,\n                reserveB\n            );\n            if (amountBOptimal <= amountBDesired) {\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n                liquidity = Math.min(\n                    (amountA * _totalSupply) / reserveA,\n                    (amountB * _totalSupply) / reserveB\n                );\n            } else {\n                uint256 amountAOptimal = quoteLiquidity(\n                    amountBDesired,\n                    reserveB,\n                    reserveA\n                );\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n                liquidity = Math.min(\n                    (amountA * _totalSupply) / reserveA,\n                    (amountB * _totalSupply) / reserveB\n                );\n            }\n        }\n    }\n\n    function quoteRemoveLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 liquidity\n    ) external view returns (uint256 amountA, uint256 amountB) {\n        // create the pair if it doesn't exist yet\n        address _pair = IPairFactory(factory).getPair(tokenA, tokenB, stable);\n\n        if (_pair == address(0)) {\n            return (0, 0);\n        }\n\n        (uint256 reserveA, uint256 reserveB) = getReserves(\n            tokenA,\n            tokenB,\n            stable\n        );\n        uint256 _totalSupply = IERC20(_pair).totalSupply();\n\n        amountA = (liquidity * reserveA) / _totalSupply; // using balances ensures pro-rata distribution\n        amountB = (liquidity * reserveB) / _totalSupply; // using balances ensures pro-rata distribution\n    }\n\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) internal returns (uint256 amountA, uint256 amountB) {\n        require(amountADesired >= amountAMin);\n        require(amountBDesired >= amountBMin);\n        // create the pair if it doesn't exist yet\n        address _pair = IPairFactory(factory).getPair(tokenA, tokenB, stable);\n        if (_pair == address(0)) {\n            _pair = IPairFactory(factory).createPair(tokenA, tokenB, stable);\n        }\n        (uint256 reserveA, uint256 reserveB) = getReserves(\n            tokenA,\n            tokenB,\n            stable\n        );\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint256 amountBOptimal = quoteLiquidity(\n                amountADesired,\n                reserveA,\n                reserveB\n            );\n            if (amountBOptimal <= amountBDesired) {\n                require(\n                    amountBOptimal >= amountBMin,\n                    \"Router: INSUFFICIENT_B_AMOUNT\"\n                );\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint256 amountAOptimal = quoteLiquidity(\n                    amountBDesired,\n                    reserveB,\n                    reserveA\n                );\n                assert(amountAOptimal <= amountADesired);\n                require(\n                    amountAOptimal >= amountAMin,\n                    \"Router: INSUFFICIENT_A_AMOUNT\"\n                );\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        ensure(deadline)\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        )\n    {\n        (amountA, amountB) = _addLiquidity(\n            tokenA,\n            tokenB,\n            stable,\n            amountADesired,\n            amountBDesired,\n            amountAMin,\n            amountBMin\n        );\n        address pair = pairFor(tokenA, tokenB, stable);\n        _safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        _safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        liquidity = IPair(pair).mint(to);\n    }\n\n    function addLiquidityETH(\n        address token,\n        bool stable,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        ensure(deadline)\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        )\n    {\n        (amountToken, amountETH) = _addLiquidity(\n            token,\n            address(weth),\n            stable,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n        address pair = pairFor(token, address(weth), stable);\n        _safeTransferFrom(token, msg.sender, pair, amountToken);\n        weth.deposit{value: amountETH}();\n        assert(weth.transfer(pair, amountETH));\n        liquidity = IPair(pair).mint(to);\n        // refund dust eth, if any\n        if (msg.value > amountETH)\n            _safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) public ensure(deadline) returns (uint256 amountA, uint256 amountB) {\n        address pair = pairFor(tokenA, tokenB, stable);\n        require(IPair(pair).transferFrom(msg.sender, pair, liquidity)); // send liquidity to pair\n        (uint256 amount0, uint256 amount1) = IPair(pair).burn(to);\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0\n            ? (amount0, amount1)\n            : (amount1, amount0);\n        require(amountA >= amountAMin, \"Router: INSUFFICIENT_A_AMOUNT\");\n        require(amountB >= amountBMin, \"Router: INSUFFICIENT_B_AMOUNT\");\n    }\n\n    function removeLiquidityETH(\n        address token,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) public ensure(deadline) returns (uint256 amountToken, uint256 amountETH) {\n        (amountToken, amountETH) = removeLiquidity(\n            token,\n            address(weth),\n            stable,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        _safeTransfer(token, to, amountToken);\n        weth.withdraw(amountETH);\n        _safeTransferETH(to, amountETH);\n    }\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB) {\n        address pair = pairFor(tokenA, tokenB, stable);\n        {\n            uint256 value = approveMax ? type(uint256).max : liquidity;\n            IPair(pair).permit(\n                msg.sender,\n                address(this),\n                value,\n                deadline,\n                v,\n                r,\n                s\n            );\n        }\n\n        (amountA, amountB) = removeLiquidity(\n            tokenA,\n            tokenB,\n            stable,\n            liquidity,\n            amountAMin,\n            amountBMin,\n            to,\n            deadline\n        );\n    }\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH) {\n        address pair = pairFor(token, address(weth), stable);\n        uint256 value = approveMax ? type(uint256).max : liquidity;\n        IPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountToken, amountETH) = removeLiquidityETH(\n            token,\n            stable,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline\n        );\n    }\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(\n        uint256[] memory amounts,\n        route[] memory routes,\n        address _to\n    ) internal virtual {\n        for (uint256 i = 0; i < routes.length; i++) {\n            (address token0, ) = sortTokens(routes[i].from, routes[i].to);\n            uint256 amountOut = amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) = routes[i].from == token0\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n            address to = i < routes.length - 1\n                ? pairFor(\n                    routes[i + 1].from,\n                    routes[i + 1].to,\n                    routes[i + 1].stable\n                )\n                : _to;\n            IPair(pairFor(routes[i].from, routes[i].to, routes[i].stable)).swap(\n                    amount0Out,\n                    amount1Out,\n                    to,\n                    new bytes(0)\n                );\n        }\n    }\n\n    function swapExactTokensForTokensSimple(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address tokenFrom,\n        address tokenTo,\n        bool stable,\n        address to,\n        uint256 deadline\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\n        route[] memory routes = new route[](1);\n        routes[0].from = tokenFrom;\n        routes[0].to = tokenTo;\n        routes[0].stable = stable;\n        amounts = getAmountsOut(amountIn, routes);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        _safeTransferFrom(\n            routes[0].from,\n            msg.sender,\n            pairFor(routes[0].from, routes[0].to, routes[0].stable),\n            amounts[0]\n        );\n        _swap(amounts, routes, to);\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = getAmountsOut(amountIn, routes);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        _safeTransferFrom(\n            routes[0].from,\n            msg.sender,\n            pairFor(routes[0].from, routes[0].to, routes[0].stable),\n            amounts[0]\n        );\n        _swap(amounts, routes, to);\n    }\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external payable ensure(deadline) returns (uint256[] memory amounts) {\n        require(routes[0].from == address(weth), \"Router: INVALID_PATH\");\n        amounts = getAmountsOut(msg.value, routes);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        weth.deposit{value: amounts[0]}();\n        assert(\n            weth.transfer(\n                pairFor(routes[0].from, routes[0].to, routes[0].stable),\n                amounts[0]\n            )\n        );\n        _swap(amounts, routes, to);\n    }\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\n        require(\n            routes[routes.length - 1].to == address(weth),\n            \"Router: INVALID_PATH\"\n        );\n        amounts = getAmountsOut(amountIn, routes);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        _safeTransferFrom(\n            routes[0].from,\n            msg.sender,\n            pairFor(routes[0].from, routes[0].to, routes[0].stable),\n            amounts[0]\n        );\n        _swap(amounts, routes, address(this));\n        weth.withdraw(amounts[amounts.length - 1]);\n        _safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n\n    function UNSAFE_swapExactTokensForTokens(\n        uint256[] memory amounts,\n        route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external ensure(deadline) returns (uint256[] memory) {\n        _safeTransferFrom(\n            routes[0].from,\n            msg.sender,\n            pairFor(routes[0].from, routes[0].to, routes[0].stable),\n            amounts[0]\n        );\n        _swap(amounts, routes, to);\n        return amounts;\n    }\n\n    function _safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n}\n"
    },
    "contracts/routerV.sol": {
      "content": ""
    },
    "contracts/VeArtProxy.sol": {
      "content": "pragma solidity 0.8.13;\n\nimport {Base64} from \"contracts/libraries/Base64.sol\";\nimport {IVeArtProxy} from \"contracts/interfaces/IVeArtProxy.sol\";\n\ncontract VeArtProxy is IVeArtProxy {\n    function toString(uint value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT license\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint temp = value;\n        uint digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    function _tokenURI(uint _tokenId, uint _balanceOf, uint _locked_end, uint _value) external pure returns (string memory output) {\n        output = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\"100%\" height=\"100%\" fill=\"black\" /><text x=\"10\" y=\"20\" class=\"base\">';\n        output = string(abi.encodePacked(output, \"token \", toString(_tokenId), '</text><text x=\"10\" y=\"40\" class=\"base\">'));\n        output = string(abi.encodePacked(output, \"balanceOf \", toString(_balanceOf), '</text><text x=\"10\" y=\"60\" class=\"base\">'));\n        output = string(abi.encodePacked(output, \"locked_end \", toString(_locked_end), '</text><text x=\"10\" y=\"80\" class=\"base\">'));\n        output = string(abi.encodePacked(output, \"value \", toString(_value), '</text></svg>'));\n\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"lock #', toString(_tokenId), '\", \"description\": \"Velocimeter locks, can be used to boost gauge yields, vote on token emission, and receive bribes\", \"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\"}'))));\n        output = string(abi.encodePacked('data:application/json;base64,', json));\n    }\n}\n"
    },
    "contracts/VelocimeterLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"contracts/interfaces/IPair.sol\";\nimport \"contracts/interfaces/IRouter.sol\";\n\ncontract VelocimeterLibrary {\n    IRouter internal immutable router;\n\n    constructor(address _router) {\n        router = IRouter(_router);\n    }\n\n    function _f(uint x0, uint y) internal pure returns (uint) {\n        return x0*(y*y/1e18*y/1e18)/1e18+(x0*x0/1e18*x0/1e18)*y/1e18;\n    }\n\n    function _d(uint x0, uint y) internal pure returns (uint) {\n        return 3*x0*(y*y/1e18)/1e18+(x0*x0/1e18*x0/1e18);\n    }\n\n    function _get_y(uint x0, uint xy, uint y) internal pure returns (uint) {\n        for (uint i = 0; i < 255; i++) {\n            uint y_prev = y;\n            uint k = _f(x0, y);\n            if (k < xy) {\n                uint dy = (xy - k)*1e18/_d(x0, y);\n                y = y + dy;\n            } else {\n                uint dy = (k - xy)*1e18/_d(x0, y);\n                y = y - dy;\n            }\n            if (y > y_prev) {\n                if (y - y_prev <= 1) {\n                    return y;\n                }\n            } else {\n                if (y_prev - y <= 1) {\n                    return y;\n                }\n            }\n        }\n        return y;\n    }\n\n    function getTradeDiff(uint amountIn, address tokenIn, address tokenOut, bool stable) external view returns (uint a, uint b) {\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0,) = IPair(router.pairFor(tokenIn, tokenOut, stable)).metadata();\n        uint sample = tokenIn == t0 ? r0*dec1/r1 : r1*dec0/r0;\n        a = _getAmountOut(sample, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / sample;\n        b = _getAmountOut(amountIn, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / amountIn;\n    }\n\n    function getTradeDiff(uint amountIn, address tokenIn, address pair) external view returns (uint a, uint b) {\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0,) = IPair(pair).metadata();\n        uint sample = tokenIn == t0 ? r0*dec1/r1 : r1*dec0/r0;\n        a = _getAmountOut(sample, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / sample;\n        b = _getAmountOut(amountIn, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / amountIn;\n    }\n\n    function getSample(address tokenIn, address tokenOut, bool stable) external view returns (uint) {\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0,) = IPair(router.pairFor(tokenIn, tokenOut, stable)).metadata();\n        uint sample = tokenIn == t0 ? r0*dec1/r1 : r1*dec0/r0;\n        return _getAmountOut(sample, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / sample;\n    }\n\n    function getMinimumValue(address tokenIn, address tokenOut, bool stable) external view returns (uint, uint, uint) {\n        (uint dec0, uint dec1, uint r0, uint r1,, address t0,) = IPair(router.pairFor(tokenIn, tokenOut, stable)).metadata();\n        uint sample = tokenIn == t0 ? r0*dec1/r1 : r1*dec0/r0;\n        return (sample, r0, r1);\n    }\n\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut, bool stable) external view returns (uint) {\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0,) = IPair(router.pairFor(tokenIn, tokenOut, stable)).metadata();\n        return _getAmountOut(amountIn, tokenIn, r0, r1, t0, dec0, dec1, st) * 1e18 / amountIn;\n    }\n\n    function _getAmountOut(uint amountIn, address tokenIn, uint _reserve0, uint _reserve1, address token0, uint decimals0, uint decimals1, bool stable) internal pure returns (uint) {\n        if (stable) {\n            uint xy =  _k(_reserve0, _reserve1, stable, decimals0, decimals1);\n            _reserve0 = _reserve0 * 1e18 / decimals0;\n            _reserve1 = _reserve1 * 1e18 / decimals1;\n            (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\n            amountIn = tokenIn == token0 ? amountIn * 1e18 / decimals0 : amountIn * 1e18 / decimals1;\n            uint y = reserveB - _get_y(amountIn+reserveA, xy, reserveB);\n            return y * (tokenIn == token0 ? decimals1 : decimals0) / 1e18;\n        } else {\n            (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\n            return amountIn * reserveB / (reserveA + amountIn);\n        }\n    }\n\n    function _k(uint x, uint y, bool stable, uint decimals0, uint decimals1) internal pure returns (uint) {\n        if (stable) {\n            uint _x = x * 1e18 / decimals0;\n            uint _y = y * 1e18 / decimals1;\n            uint _a = (_x * _y) / 1e18;\n            uint _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\n            return _a * _b / 1e18;  // x3y+y3x >= k\n        } else {\n            return x * y; // xy >= k\n        }\n    }\n    \n}\n"
    },
    "contracts/Voter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\nimport \"contracts/interfaces/IBribe.sol\";\nimport \"contracts/interfaces/IBribeFactory.sol\";\nimport \"contracts/interfaces/IGauge.sol\";\nimport \"contracts/interfaces/IGaugeFactory.sol\";\nimport \"contracts/interfaces/IERC20.sol\";\nimport \"contracts/interfaces/IMinter.sol\";\nimport \"contracts/interfaces/IPair.sol\";\nimport \"contracts/interfaces/IPairFactory.sol\";\nimport \"contracts/interfaces/IVoter.sol\";\nimport \"contracts/interfaces/IVotingEscrow.sol\";\n\ncontract Voter is IVoter {\n    address public immutable _ve; // the ve token that governs these contracts\n    address public immutable factory; // the PairFactory\n    address internal immutable base;\n    address public immutable gaugefactory;\n    address public immutable bribefactory;\n    uint256 internal constant DURATION = 7 days; // rewards are released over 7 days\n    address public minter;\n    address public governor; // should be set to an IGovernor\n    address public emergencyCouncil; // credibly neutral party similar to Curve's Emergency DAO\n\n    uint256 public totalWeight; // total voting weight\n\n    address[] public pools; // all pools viable for incentives\n    mapping(address => address) public gauges; // pool => gauge\n    mapping(address => address) public poolForGauge; // gauge => pool\n    mapping(address => address) public internal_bribes; // gauge => internal bribe (only fees)\n    mapping(address => address) public external_bribes; // gauge => external bribe (real bribes)\n    mapping(address => uint256) public weights; // pool => weight\n    mapping(uint256 => mapping(address => uint256)) public votes; // nft => pool => votes\n    mapping(uint256 => address[]) public poolVote; // nft => pools\n    mapping(uint256 => uint256) public usedWeights; // nft => total voting weight of user\n    mapping(uint256 => uint256) public lastVoted; // nft => timestamp of last vote, to ensure one vote per epoch\n    mapping(address => bool) public isGauge;\n    mapping(address => bool) public isWhitelisted;\n    mapping(address => bool) public isAlive;\n\n    event GaugeCreated(\n        address indexed gauge,\n        address creator,\n        address internal_bribe,\n        address indexed external_bribe,\n        address indexed pool\n    );\n    event GaugeKilled(address indexed gauge);\n    event GaugeRevived(address indexed gauge);\n    event Voted(address indexed voter, uint256 tokenId, uint256 weight);\n    event Abstained(uint256 tokenId, uint256 weight);\n    event Deposit(\n        address indexed lp,\n        address indexed gauge,\n        uint256 tokenId,\n        uint256 amount\n    );\n    event Withdraw(\n        address indexed lp,\n        address indexed gauge,\n        uint256 tokenId,\n        uint256 amount\n    );\n    event NotifyReward(\n        address indexed sender,\n        address indexed reward,\n        uint256 amount\n    );\n    event DistributeReward(\n        address indexed sender,\n        address indexed gauge,\n        uint256 amount\n    );\n    event Attach(address indexed owner, address indexed gauge, uint256 tokenId);\n    event Detach(address indexed owner, address indexed gauge, uint256 tokenId);\n    event Whitelisted(address indexed whitelister, address indexed token);\n\n    constructor(\n        address __ve,\n        address _factory,\n        address _gauges,\n        address _bribes\n    ) {\n        _ve = __ve;\n        factory = _factory;\n        base = IVotingEscrow(__ve).token();\n        gaugefactory = _gauges;\n        bribefactory = _bribes;\n        minter = msg.sender;\n        governor = msg.sender;\n        emergencyCouncil = msg.sender;\n    }\n\n    // simple re-entrancy check\n    uint256 internal _unlocked = 1;\n    modifier lock() {\n        require(_unlocked == 1);\n        _unlocked = 2;\n        _;\n        _unlocked = 1;\n    }\n\n    modifier onlyNewEpoch(uint256 _tokenId) {\n        // ensure new epoch since last vote\n        require(\n            (block.timestamp / DURATION) * DURATION > lastVoted[_tokenId],\n            \"TOKEN_ALREADY_VOTED_THIS_EPOCH\"\n        );\n        _;\n    }\n\n    function initialize(address[] memory _tokens, address _minter) external {\n        require(msg.sender == minter);\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            _whitelist(_tokens[i]);\n        }\n        minter = _minter;\n    }\n\n    function setGovernor(address _governor) public {\n        require(msg.sender == governor);\n        governor = _governor;\n    }\n\n    function setEmergencyCouncil(address _council) public {\n        require(msg.sender == emergencyCouncil);\n        emergencyCouncil = _council;\n    }\n\n    function reset(uint256 _tokenId) external onlyNewEpoch(_tokenId) {\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, _tokenId));\n        lastVoted[_tokenId] = block.timestamp;\n        _reset(_tokenId);\n        IVotingEscrow(_ve).abstain(_tokenId);\n    }\n\n    function _reset(uint256 _tokenId) internal {\n        address[] storage _poolVote = poolVote[_tokenId];\n        uint256 _poolVoteCnt = _poolVote.length;\n        uint256 _totalWeight = 0;\n\n        for (uint256 i = 0; i < _poolVoteCnt; i++) {\n            address _pool = _poolVote[i];\n            uint256 _votes = votes[_tokenId][_pool];\n\n            if (_votes != 0) {\n                _updateFor(gauges[_pool]);\n                weights[_pool] -= _votes;\n                votes[_tokenId][_pool] -= _votes;\n                if (_votes > 0) {\n                    IBribe(internal_bribes[gauges[_pool]])._withdraw(\n                        uint256(_votes),\n                        _tokenId\n                    );\n                    IBribe(external_bribes[gauges[_pool]])._withdraw(\n                        uint256(_votes),\n                        _tokenId\n                    );\n                    _totalWeight += _votes;\n                } else {\n                    _totalWeight -= _votes;\n                }\n                emit Abstained(_tokenId, _votes);\n            }\n        }\n        totalWeight -= uint256(_totalWeight);\n        usedWeights[_tokenId] = 0;\n        delete poolVote[_tokenId];\n    }\n\n    // remove poke function\n\n    function poke(uint256 _tokenId) external {\n        require(\n            IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, _tokenId) ||\n                msg.sender == governor\n        );\n        address[] memory _poolVote = poolVote[_tokenId];\n        uint256 _poolCnt = _poolVote.length;\n        uint256[] memory _weights = new uint256[](_poolCnt);\n\n        for (uint256 i = 0; i < _poolCnt; i++) {\n            _weights[i] = votes[_tokenId][_poolVote[i]];\n        }\n\n        _vote(_tokenId, _poolVote, _weights);\n    }\n\n    function _vote(\n        uint256 _tokenId,\n        address[] memory _poolVote,\n        uint256[] memory _weights\n    ) internal {\n        _reset(_tokenId);\n        uint256 _poolCnt = _poolVote.length;\n        uint256 _weight = IVotingEscrow(_ve).balanceOfNFT(_tokenId);\n        uint256 _totalVoteWeight = 0;\n        uint256 _totalWeight = 0;\n        uint256 _usedWeight = 0;\n\n        for (uint256 i = 0; i < _poolCnt; i++) {\n            _totalVoteWeight += _weights[i];\n        }\n\n        for (uint256 i = 0; i < _poolCnt; i++) {\n            address _pool = _poolVote[i];\n            address _gauge = gauges[_pool];\n\n            if (isGauge[_gauge]) {\n                uint256 _poolWeight = (_weights[i] * _weight) /\n                    _totalVoteWeight;\n                require(votes[_tokenId][_pool] == 0);\n                require(_poolWeight != 0);\n                _updateFor(_gauge);\n\n                poolVote[_tokenId].push(_pool);\n\n                weights[_pool] += _poolWeight;\n                votes[_tokenId][_pool] += _poolWeight;\n                IBribe(internal_bribes[_gauge])._deposit(\n                    uint256(_poolWeight),\n                    _tokenId\n                );\n                IBribe(external_bribes[_gauge])._deposit(\n                    uint256(_poolWeight),\n                    _tokenId\n                );\n                _usedWeight += _poolWeight;\n                _totalWeight += _poolWeight;\n                emit Voted(msg.sender, _tokenId, _poolWeight);\n            }\n        }\n        if (_usedWeight > 0) IVotingEscrow(_ve).voting(_tokenId);\n        totalWeight += uint256(_totalWeight);\n        usedWeights[_tokenId] = uint256(_usedWeight);\n    }\n\n    function vote(\n        uint256 tokenId,\n        address[] calldata _poolVote,\n        uint256[] calldata _weights\n    ) external onlyNewEpoch(tokenId) {\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, tokenId));\n        require(_poolVote.length == _weights.length);\n        lastVoted[tokenId] = block.timestamp;\n        _vote(tokenId, _poolVote, _weights);\n    }\n\n    function whitelist(address _token) public {\n        require(msg.sender == governor);\n        _whitelist(_token);\n    }\n\n    function _whitelist(address _token) internal {\n        require(!isWhitelisted[_token]);\n        isWhitelisted[_token] = true;\n        emit Whitelisted(msg.sender, _token);\n    }\n\n    function createGauge(address _pool) external returns (address) {\n        require(gauges[_pool] == address(0x0), \"exists\");\n        address[] memory allowedRewards = new address[](3);\n        address[] memory internalRewards = new address[](2);\n        bool isPair = IPairFactory(factory).isPair(_pool);\n        address tokenA;\n        address tokenB;\n\n        if (isPair) {\n            (tokenA, tokenB) = IPair(_pool).tokens();\n            allowedRewards[0] = tokenA;\n            allowedRewards[1] = tokenB;\n            internalRewards[0] = tokenA;\n            internalRewards[1] = tokenB;\n\n            if (base != tokenA && base != tokenB) {\n                allowedRewards[2] = base;\n            }\n        }\n\n        if (msg.sender != governor) {\n            // gov can create for any pool, even non-Velocimeter pairs\n            require(isPair, \"!_pool\");\n            require(\n                isWhitelisted[tokenA] && isWhitelisted[tokenB],\n                \"!whitelisted\"\n            );\n        }\n\n        address _internal_bribe = IBribeFactory(bribefactory)\n            .createInternalBribe(internalRewards);\n        address _external_bribe = IBribeFactory(bribefactory)\n            .createExternalBribe(allowedRewards);\n        address _gauge = IGaugeFactory(gaugefactory).createGauge(\n            _pool,\n            _internal_bribe,\n            _external_bribe,\n            _ve,\n            isPair,\n            allowedRewards\n        );\n\n        IERC20(base).approve(_gauge, type(uint256).max);\n        internal_bribes[_gauge] = _internal_bribe;\n        external_bribes[_gauge] = _external_bribe;\n        gauges[_pool] = _gauge;\n        poolForGauge[_gauge] = _pool;\n        isGauge[_gauge] = true;\n        isAlive[_gauge] = true;\n        _updateFor(_gauge);\n        pools.push(_pool);\n        emit GaugeCreated(\n            _gauge,\n            msg.sender,\n            _internal_bribe,\n            _external_bribe,\n            _pool\n        );\n        return _gauge;\n    }\n\n    function killGauge(address _gauge) external {\n        require(msg.sender == emergencyCouncil, \"not emergency council\");\n        require(isAlive[_gauge], \"gauge already dead\");\n        isAlive[_gauge] = false;\n        claimable[_gauge] = 0;\n        emit GaugeKilled(_gauge);\n    }\n\n    function reviveGauge(address _gauge) external {\n        require(msg.sender == emergencyCouncil, \"not emergency council\");\n        require(!isAlive[_gauge], \"gauge already alive\");\n        isAlive[_gauge] = true;\n        emit GaugeRevived(_gauge);\n    }\n\n    function attachTokenToGauge(uint256 tokenId, address account) external {\n        require(isGauge[msg.sender]);\n        require(isAlive[msg.sender]); // killed gauges cannot attach tokens to themselves\n        if (tokenId > 0) IVotingEscrow(_ve).attach(tokenId);\n        emit Attach(account, msg.sender, tokenId);\n    }\n\n    function emitDeposit(\n        uint256 tokenId,\n        address account,\n        uint256 amount\n    ) external {\n        require(isGauge[msg.sender]);\n        require(isAlive[msg.sender]);\n        emit Deposit(account, msg.sender, tokenId, amount);\n    }\n\n    function detachTokenFromGauge(uint256 tokenId, address account) external {\n        require(isGauge[msg.sender]);\n        if (tokenId > 0) IVotingEscrow(_ve).detach(tokenId);\n        emit Detach(account, msg.sender, tokenId);\n    }\n\n    function emitWithdraw(\n        uint256 tokenId,\n        address account,\n        uint256 amount\n    ) external {\n        require(isGauge[msg.sender]);\n        emit Withdraw(account, msg.sender, tokenId, amount);\n    }\n\n    function length() external view returns (uint256) {\n        return pools.length;\n    }\n\n    uint256 internal index;\n    mapping(address => uint256) internal supplyIndex;\n    mapping(address => uint256) public claimable;\n\n    function notifyRewardAmount(uint256 amount) external {\n        _safeTransferFrom(base, msg.sender, address(this), amount); // transfer the distro in\n        uint256 _ratio = (amount * 1e18) / totalWeight; // 1e18 adjustment is removed during claim\n        if (_ratio > 0) {\n            index += _ratio;\n        }\n        emit NotifyReward(msg.sender, base, amount);\n    }\n\n    function updateFor(address[] memory _gauges) external {\n        for (uint256 i = 0; i < _gauges.length; i++) {\n            _updateFor(_gauges[i]);\n        }\n    }\n\n    function updateForRange(uint256 start, uint256 end) public {\n        for (uint256 i = start; i < end; i++) {\n            _updateFor(gauges[pools[i]]);\n        }\n    }\n\n    function updateAll() external {\n        updateForRange(0, pools.length);\n    }\n\n    function updateGauge(address _gauge) external {\n        _updateFor(_gauge);\n    }\n\n    function _updateFor(address _gauge) internal {\n        address _pool = poolForGauge[_gauge];\n        uint256 _supplied = weights[_pool];\n        if (_supplied > 0) {\n            uint256 _supplyIndex = supplyIndex[_gauge];\n            uint256 _index = index; // get global index0 for accumulated distro\n            supplyIndex[_gauge] = _index; // update _gauge current position to global position\n            uint256 _delta = _index - _supplyIndex; // see if there is any difference that need to be accrued\n            if (_delta > 0) {\n                uint256 _share = (uint256(_supplied) * _delta) / 1e18; // add accrued difference for each supplied token\n                if (isAlive[_gauge]) {\n                    claimable[_gauge] += _share;\n                }\n            }\n        } else {\n            supplyIndex[_gauge] = index; // new users are set to the default global state\n        }\n    }\n\n    function claimRewards(address[] memory _gauges, address[][] memory _tokens)\n        external\n    {\n        for (uint256 i = 0; i < _gauges.length; i++) {\n            IGauge(_gauges[i]).getReward(msg.sender, _tokens[i]);\n        }\n    }\n\n    function claimBribes(\n        address[] memory _bribes,\n        address[][] memory _tokens,\n        uint256 _tokenId\n    ) external {\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, _tokenId));\n        for (uint256 i = 0; i < _bribes.length; i++) {\n            IBribe(_bribes[i]).getRewardForOwner(_tokenId, _tokens[i]);\n        }\n    }\n\n    function claimFees(\n        address[] memory _fees,\n        address[][] memory _tokens,\n        uint256 _tokenId\n    ) external {\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, _tokenId));\n        for (uint256 i = 0; i < _fees.length; i++) {\n            IBribe(_fees[i]).getRewardForOwner(_tokenId, _tokens[i]);\n        }\n    }\n\n    function distributeFees(address[] memory _gauges) external {\n        for (uint256 i = 0; i < _gauges.length; i++) {\n            if (IGauge(_gauges[i]).isForPair()) {\n                IGauge(_gauges[i]).claimFees();\n            }\n        }\n    }\n\n    function distribute(address _gauge) public lock {\n        IMinter(minter).update_period();\n        _updateFor(_gauge); // should set claimable to 0 if killed\n        uint256 _claimable = claimable[_gauge];\n        if (\n            _claimable > IGauge(_gauge).left(base) && _claimable / DURATION > 0\n        ) {\n            claimable[_gauge] = 0;\n            IGauge(_gauge).notifyRewardAmount(base, _claimable);\n            emit DistributeReward(msg.sender, _gauge, _claimable);\n        }\n    }\n\n    function distro() external {\n        distribute(0, pools.length);\n    }\n\n    function distribute() external {\n        distribute(0, pools.length);\n    }\n\n    function distribute(uint256 start, uint256 finish) public {\n        for (uint256 x = start; x < finish; x++) {\n            distribute(gauges[pools[x]]);\n        }\n    }\n\n    function distribute(address[] memory _gauges) external {\n        for (uint256 x = 0; x < _gauges.length; x++) {\n            distribute(_gauges[x]);\n        }\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n}\n"
    },
    "contracts/VotingEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {IERC721, IERC721Metadata} from \"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport {IVotes} from \"lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol\";\nimport {IERC721Receiver} from \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {IERC20} from \"contracts/interfaces/IERC20.sol\";\nimport {IVeArtProxy} from \"contracts/interfaces/IVeArtProxy.sol\";\nimport {IVotingEscrow} from \"contracts/interfaces/IVotingEscrow.sol\";\n\n/// @title Voting Escrow\n/// @notice veNFT implementation that escrows ERC-20 tokens in the form of an ERC-721 NFT\n/// @notice Votes have a weight depending on time, so that users are committed to the future of (whatever they are voting for)\n/// @author Modified from Solidly (https://github.com/solidlyexchange/solidly/blob/master/contracts/ve.sol)\n/// @author Modified from Curve (https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy)\n/// @author Modified from Nouns DAO (https://github.com/withtally/my-nft-dao-project/blob/main/contracts/ERC721Checkpointable.sol)\n/// @dev Vote weight decays linearly over time. Lock time cannot be more than `MAXTIME` (4 years).\ncontract VotingEscrow is IERC721, IERC721Metadata, IVotes {\n    enum DepositType {\n        DEPOSIT_FOR_TYPE,\n        CREATE_LOCK_TYPE,\n        INCREASE_LOCK_AMOUNT,\n        INCREASE_UNLOCK_TIME,\n        MERGE_TYPE\n    }\n\n    struct LockedBalance {\n        int128 amount;\n        uint end;\n    }\n\n    struct Point {\n        int128 bias;\n        int128 slope; // # -dweight / dt\n        uint ts;\n        uint blk; // block\n    }\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\n     * What we can do is to extrapolate ***At functions */\n\n    /// @notice A checkpoint for marking delegated tokenIds from a given timestamp\n    struct Checkpoint {\n        uint timestamp;\n        uint[] tokenIds;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Deposit(\n        address indexed provider,\n        uint tokenId,\n        uint value,\n        uint indexed locktime,\n        DepositType deposit_type,\n        uint ts\n    );\n    event Withdraw(address indexed provider, uint tokenId, uint value, uint ts);\n    event Supply(uint prevSupply, uint supply);\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    address public immutable token;\n    address public voter;\n    address public team;\n    address public artProxy;\n\n    mapping(uint => Point) public point_history; // epoch -> unsigned point\n\n    /// @dev Mapping of interface id to bool about whether or not it's supported\n    mapping(bytes4 => bool) internal supportedInterfaces;\n\n    /// @dev ERC165 interface ID of ERC165\n    bytes4 internal constant ERC165_INTERFACE_ID = 0x01ffc9a7;\n\n    /// @dev ERC165 interface ID of ERC721\n    bytes4 internal constant ERC721_INTERFACE_ID = 0x80ac58cd;\n\n    /// @dev ERC165 interface ID of ERC721Metadata\n    bytes4 internal constant ERC721_METADATA_INTERFACE_ID = 0x5b5e139f;\n\n    /// @dev Current count of token\n    uint internal tokenId;\n\n    /// @notice Contract constructor\n    /// @param token_addr `FLOW` token address\n    constructor(address token_addr, address art_proxy) {\n        token = token_addr;\n        voter = msg.sender;\n        team = msg.sender;\n        artProxy = art_proxy;\n\n        point_history[0].blk = block.number;\n        point_history[0].ts = block.timestamp;\n\n        supportedInterfaces[ERC165_INTERFACE_ID] = true;\n        supportedInterfaces[ERC721_INTERFACE_ID] = true;\n        supportedInterfaces[ERC721_METADATA_INTERFACE_ID] = true;\n\n        // mint-ish\n        emit Transfer(address(0), address(this), tokenId);\n        // burn-ish\n        emit Transfer(address(this), address(0), tokenId);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev reentrancy guard\n    uint8 internal constant _not_entered = 1;\n    uint8 internal constant _entered = 2;\n    uint8 internal _entered_state = 1;\n    modifier nonreentrant() {\n        require(_entered_state == _not_entered);\n        _entered_state = _entered;\n        _;\n        _entered_state = _not_entered;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                             METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string constant public name = \"veNFT\";\n    string constant public symbol = \"veNFT\";\n    string constant public version = \"1.0.0\";\n    uint8 constant public decimals = 18;\n\n    function setTeam(address _team) external {\n        require(msg.sender == team);\n        team = _team;\n    }\n\n    function setArtProxy(address _proxy) external {\n        require(msg.sender == team);\n        artProxy = _proxy;\n    }\n\n    /// @dev Returns current token URI metadata\n    /// @param _tokenId Token ID to fetch URI for.\n    function tokenURI(uint _tokenId) external view returns (string memory) {\n        require(idToOwner[_tokenId] != address(0), \"Query for nonexistent token\");\n        LockedBalance memory _locked = locked[_tokenId];\n        return IVeArtProxy(artProxy)._tokenURI(\n            _tokenId,\n            _balanceOfNFT(_tokenId, block.timestamp),\n            _locked.end,\n            uint(int256(_locked.amount))\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Mapping from NFT ID to the address that owns it.\n    mapping(uint => address) internal idToOwner;\n\n    /// @dev Mapping from owner address to count of his tokens.\n    mapping(address => uint) internal ownerToNFTokenCount;\n\n    /// @dev Returns the address of the owner of the NFT.\n    /// @param _tokenId The identifier for an NFT.\n    function ownerOf(uint _tokenId) public view returns (address) {\n        return idToOwner[_tokenId];\n    }\n\n    /// @dev Returns the number of NFTs owned by `_owner`.\n    ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n    /// @param _owner Address for whom to query the balance.\n    function _balance(address _owner) internal view returns (uint) {\n        return ownerToNFTokenCount[_owner];\n    }\n\n    /// @dev Returns the number of NFTs owned by `_owner`.\n    ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n    /// @param _owner Address for whom to query the balance.\n    function balanceOf(address _owner) external view returns (uint) {\n        return _balance(_owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Mapping from NFT ID to approved address.\n    mapping(uint => address) internal idToApprovals;\n\n    /// @dev Mapping from owner address to mapping of operator addresses.\n    mapping(address => mapping(address => bool)) internal ownerToOperators;\n\n    mapping(uint => uint) public ownership_change;\n\n    /// @dev Get the approved address for a single NFT.\n    /// @param _tokenId ID of the NFT to query the approval of.\n    function getApproved(uint _tokenId) external view returns (address) {\n        return idToApprovals[_tokenId];\n    }\n\n    /// @dev Checks if `_operator` is an approved operator for `_owner`.\n    /// @param _owner The address that owns the NFTs.\n    /// @param _operator The address that acts on behalf of the owner.\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n        return (ownerToOperators[_owner])[_operator];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\n    ///      Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\n    ///      Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\n    ///      Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\n    /// @param _approved Address to be approved for the given NFT ID.\n    /// @param _tokenId ID of the token to be approved.\n    function approve(address _approved, uint _tokenId) public {\n        address owner = idToOwner[_tokenId];\n        // Throws if `_tokenId` is not a valid NFT\n        require(owner != address(0));\n        // Throws if `_approved` is the current owner\n        require(_approved != owner);\n        // Check requirements\n        bool senderIsOwner = (idToOwner[_tokenId] == msg.sender);\n        bool senderIsApprovedForAll = (ownerToOperators[owner])[msg.sender];\n        require(senderIsOwner || senderIsApprovedForAll);\n        // Set the approval\n        idToApprovals[_tokenId] = _approved;\n        emit Approval(owner, _approved, _tokenId);\n    }\n\n    /// @dev Enables or disables approval for a third party (\"operator\") to manage all of\n    ///      `msg.sender`'s assets. It also emits the ApprovalForAll event.\n    ///      Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\n    /// @notice This works even if sender doesn't own any tokens at the time.\n    /// @param _operator Address to add to the set of authorized operators.\n    /// @param _approved True if the operators is approved, false to revoke approval.\n    function setApprovalForAll(address _operator, bool _approved) external {\n        // Throws if `_operator` is the `msg.sender`\n        assert(_operator != msg.sender);\n        ownerToOperators[msg.sender][_operator] = _approved;\n        emit ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /* TRANSFER FUNCTIONS */\n    /// @dev Clear an approval of a given address\n    ///      Throws if `_owner` is not the current owner.\n    function _clearApproval(address _owner, uint _tokenId) internal {\n        // Throws if `_owner` is not the current owner\n        assert(idToOwner[_tokenId] == _owner);\n        if (idToApprovals[_tokenId] != address(0)) {\n            // Reset approvals\n            idToApprovals[_tokenId] = address(0);\n        }\n    }\n\n    /// @dev Returns whether the given spender can transfer a given token ID\n    /// @param _spender address of the spender to query\n    /// @param _tokenId uint ID of the token to be transferred\n    /// @return bool whether the msg.sender is approved for the given token ID, is an operator of the owner, or is the owner of the token\n    function _isApprovedOrOwner(address _spender, uint _tokenId) internal view returns (bool) {\n        address owner = idToOwner[_tokenId];\n        bool spenderIsOwner = owner == _spender;\n        bool spenderIsApproved = _spender == idToApprovals[_tokenId];\n        bool spenderIsApprovedForAll = (ownerToOperators[owner])[_spender];\n        return spenderIsOwner || spenderIsApproved || spenderIsApprovedForAll;\n    }\n\n    function isApprovedOrOwner(address _spender, uint _tokenId) external view returns (bool) {\n        return _isApprovedOrOwner(_spender, _tokenId);\n    }\n\n    /// @dev Exeute transfer of a NFT.\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n    ///      address for this NFT. (NOTE: `msg.sender` not allowed in internal function so pass `_sender`.)\n    ///      Throws if `_to` is the zero address.\n    ///      Throws if `_from` is not the current owner.\n    ///      Throws if `_tokenId` is not a valid NFT.\n    function _transferFrom(\n        address _from,\n        address _to,\n        uint _tokenId,\n        address _sender\n    ) internal {\n        require(attachments[_tokenId] == 0 && !voted[_tokenId], \"attached\");\n        // Check requirements\n        require(_isApprovedOrOwner(_sender, _tokenId));\n        // Clear approval. Throws if `_from` is not the current owner\n        _clearApproval(_from, _tokenId);\n        // Remove NFT. Throws if `_tokenId` is not a valid NFT\n        _removeTokenFrom(_from, _tokenId);\n        // auto re-delegate\n        _moveTokenDelegates(delegates(_from), delegates(_to), _tokenId);\n        // Add NFT\n        _addTokenTo(_to, _tokenId);\n        // Set the block of ownership transfer (for Flash NFT protection)\n        ownership_change[_tokenId] = block.number;\n        // Log the transfer\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT.\n    ///      Throws if `_from` is not the current owner.\n    ///      Throws if `_to` is the zero address.\n    ///      Throws if `_tokenId` is not a valid NFT.\n    /// @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n    ///        they maybe be permanently lost.\n    /// @param _from The current owner of the NFT.\n    /// @param _to The new owner.\n    /// @param _tokenId The NFT to transfer.\n    function transferFrom(\n        address _from,\n        address _to,\n        uint _tokenId\n    ) external {\n        _transferFrom(_from, _to, _tokenId, msg.sender);\n    }\n\n    /// @dev Transfers the ownership of an NFT from one address to another address.\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\n    ///      approved address for this NFT.\n    ///      Throws if `_from` is not the current owner.\n    ///      Throws if `_to` is the zero address.\n    ///      Throws if `_tokenId` is not a valid NFT.\n    ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n    ///      the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`.\n    /// @param _from The current owner of the NFT.\n    /// @param _to The new owner.\n    /// @param _tokenId The NFT to transfer.\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint _tokenId\n    ) external {\n        safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    function _isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n        uint size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /// @dev Transfers the ownership of an NFT from one address to another address.\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\n    ///      approved address for this NFT.\n    ///      Throws if `_from` is not the current owner.\n    ///      Throws if `_to` is the zero address.\n    ///      Throws if `_tokenId` is not a valid NFT.\n    ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n    ///      the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`.\n    /// @param _from The current owner of the NFT.\n    /// @param _to The new owner.\n    /// @param _tokenId The NFT to transfer.\n    /// @param _data Additional data with no specified format, sent in call to `_to`.\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint _tokenId,\n        bytes memory _data\n    ) public {\n        _transferFrom(_from, _to, _tokenId, msg.sender);\n\n        if (_isContract(_to)) {\n            // Throws if transfer destination is a contract which does not implement 'onERC721Received'\n            try IERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) returns (bytes4 response) {\n                if (response != IERC721Receiver(_to).onERC721Received.selector) {\n                    revert(\"ERC721: ERC721Receiver rejected tokens\");\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Interface identification is specified in ERC-165.\n    /// @param _interfaceID Id of the interface\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\n        return supportedInterfaces[_interfaceID];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Mapping from owner address to mapping of index to tokenIds\n    mapping(address => mapping(uint => uint)) internal ownerToNFTokenIdList;\n\n    /// @dev Mapping from NFT ID to index of owner\n    mapping(uint => uint) internal tokenToOwnerIndex;\n\n    /// @dev  Get token by index\n    function tokenOfOwnerByIndex(address _owner, uint _tokenIndex) external view returns (uint) {\n        return ownerToNFTokenIdList[_owner][_tokenIndex];\n    }\n\n    /// @dev Add a NFT to an index mapping to a given address\n    /// @param _to address of the receiver\n    /// @param _tokenId uint ID Of the token to be added\n    function _addTokenToOwnerList(address _to, uint _tokenId) internal {\n        uint current_count = _balance(_to);\n\n        ownerToNFTokenIdList[_to][current_count] = _tokenId;\n        tokenToOwnerIndex[_tokenId] = current_count;\n    }\n\n    /// @dev Add a NFT to a given address\n    ///      Throws if `_tokenId` is owned by someone.\n    function _addTokenTo(address _to, uint _tokenId) internal {\n        // Throws if `_tokenId` is owned by someone\n        assert(idToOwner[_tokenId] == address(0));\n        // Change the owner\n        idToOwner[_tokenId] = _to;\n        // Update owner token index tracking\n        _addTokenToOwnerList(_to, _tokenId);\n        // Change count tracking\n        ownerToNFTokenCount[_to] += 1;\n    }\n\n    /// @dev Function to mint tokens\n    ///      Throws if `_to` is zero address.\n    ///      Throws if `_tokenId` is owned by someone.\n    /// @param _to The address that will receive the minted tokens.\n    /// @param _tokenId The token id to mint.\n    /// @return A boolean that indicates if the operation was successful.\n    function _mint(address _to, uint _tokenId) internal returns (bool) {\n        // Throws if `_to` is zero address\n        assert(_to != address(0));\n        // checkpoint for gov\n        _moveTokenDelegates(address(0), delegates(_to), _tokenId);\n        // Add NFT. Throws if `_tokenId` is owned by someone\n        _addTokenTo(_to, _tokenId);\n        emit Transfer(address(0), _to, _tokenId);\n        return true;\n    }\n\n    /// @dev Remove a NFT from an index mapping to a given address\n    /// @param _from address of the sender\n    /// @param _tokenId uint ID Of the token to be removed\n    function _removeTokenFromOwnerList(address _from, uint _tokenId) internal {\n        // Delete\n        uint current_count = _balance(_from) - 1;\n        uint current_index = tokenToOwnerIndex[_tokenId];\n\n        if (current_count == current_index) {\n            // update ownerToNFTokenIdList\n            ownerToNFTokenIdList[_from][current_count] = 0;\n            // update tokenToOwnerIndex\n            tokenToOwnerIndex[_tokenId] = 0;\n        } else {\n            uint lastTokenId = ownerToNFTokenIdList[_from][current_count];\n\n            // Add\n            // update ownerToNFTokenIdList\n            ownerToNFTokenIdList[_from][current_index] = lastTokenId;\n            // update tokenToOwnerIndex\n            tokenToOwnerIndex[lastTokenId] = current_index;\n\n            // Delete\n            // update ownerToNFTokenIdList\n            ownerToNFTokenIdList[_from][current_count] = 0;\n            // update tokenToOwnerIndex\n            tokenToOwnerIndex[_tokenId] = 0;\n        }\n    }\n\n    /// @dev Remove a NFT from a given address\n    ///      Throws if `_from` is not the current owner.\n    function _removeTokenFrom(address _from, uint _tokenId) internal {\n        // Throws if `_from` is not the current owner\n        assert(idToOwner[_tokenId] == _from);\n        // Change the owner\n        idToOwner[_tokenId] = address(0);\n        // Update owner token index tracking\n        _removeTokenFromOwnerList(_from, _tokenId);\n        // Change count tracking\n        ownerToNFTokenCount[_from] -= 1;\n    }\n\n    function _burn(uint _tokenId) internal {\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \"caller is not owner nor approved\");\n\n        address owner = ownerOf(_tokenId);\n\n        // Clear approval\n        approve(address(0), _tokenId);\n        // checkpoint for gov\n        _moveTokenDelegates(delegates(owner), address(0), _tokenId);\n        // Remove token\n        _removeTokenFrom(msg.sender, _tokenId);\n        emit Transfer(owner, address(0), _tokenId);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             ESCROW STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint => uint) public user_point_epoch;\n    mapping(uint => Point[1000000000]) public user_point_history; // user -> Point[user_epoch]\n    mapping(uint => LockedBalance) public locked;\n    uint public epoch;\n    mapping(uint => int128) public slope_changes; // time -> signed slope change\n    uint public supply;\n\n    uint internal constant WEEK = 1 weeks;\n    uint internal constant MAXTIME = 4 * 365 * 86400;\n    int128 internal constant iMAXTIME = 4 * 365 * 86400;\n    uint internal constant MULTIPLIER = 1 ether;\n\n    /*//////////////////////////////////////////////////////////////\n                              ESCROW LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Get the most recently recorded rate of voting power decrease for `_tokenId`\n    /// @param _tokenId token of the NFT\n    /// @return Value of the slope\n    function get_last_user_slope(uint _tokenId) external view returns (int128) {\n        uint uepoch = user_point_epoch[_tokenId];\n        return user_point_history[_tokenId][uepoch].slope;\n    }\n\n    /// @notice Get the timestamp for checkpoint `_idx` for `_tokenId`\n    /// @param _tokenId token of the NFT\n    /// @param _idx User epoch number\n    /// @return Epoch time of the checkpoint\n    function user_point_history__ts(uint _tokenId, uint _idx) external view returns (uint) {\n        return user_point_history[_tokenId][_idx].ts;\n    }\n\n    /// @notice Get timestamp when `_tokenId`'s lock finishes\n    /// @param _tokenId User NFT\n    /// @return Epoch time of the lock end\n    function locked__end(uint _tokenId) external view returns (uint) {\n        return locked[_tokenId].end;\n    }\n\n    /// @notice Record global and per-user data to checkpoint\n    /// @param _tokenId NFT token ID. No user checkpoint if 0\n    /// @param old_locked Pevious locked amount / end lock time for the user\n    /// @param new_locked New locked amount / end lock time for the user\n    function _checkpoint(\n        uint _tokenId,\n        LockedBalance memory old_locked,\n        LockedBalance memory new_locked\n    ) internal {\n        Point memory u_old;\n        Point memory u_new;\n        int128 old_dslope = 0;\n        int128 new_dslope = 0;\n        uint _epoch = epoch;\n\n        if (_tokenId != 0) {\n            // Calculate slopes and biases\n            // Kept at zero when they have to\n            if (old_locked.end > block.timestamp && old_locked.amount > 0) {\n                u_old.slope = old_locked.amount / iMAXTIME;\n                u_old.bias = u_old.slope * int128(int256(old_locked.end - block.timestamp));\n            }\n            if (new_locked.end > block.timestamp && new_locked.amount > 0) {\n                u_new.slope = new_locked.amount / iMAXTIME;\n                u_new.bias = u_new.slope * int128(int256(new_locked.end - block.timestamp));\n            }\n\n            // Read values of scheduled changes in the slope\n            // old_locked.end can be in the past and in the future\n            // new_locked.end can ONLY by in the FUTURE unless everything expired: than zeros\n            old_dslope = slope_changes[old_locked.end];\n            if (new_locked.end != 0) {\n                if (new_locked.end == old_locked.end) {\n                    new_dslope = old_dslope;\n                } else {\n                    new_dslope = slope_changes[new_locked.end];\n                }\n            }\n        }\n\n        Point memory last_point = Point({bias: 0, slope: 0, ts: block.timestamp, blk: block.number});\n        if (_epoch > 0) {\n            last_point = point_history[_epoch];\n        }\n        uint last_checkpoint = last_point.ts;\n        // initial_last_point is used for extrapolation to calculate block number\n        // (approximately, for *At methods) and save them\n        // as we cannot figure that out exactly from inside the contract\n        Point memory initial_last_point = last_point;\n        uint block_slope = 0; // dblock/dt\n        if (block.timestamp > last_point.ts) {\n            block_slope = (MULTIPLIER * (block.number - last_point.blk)) / (block.timestamp - last_point.ts);\n        }\n        // If last point is already recorded in this block, slope=0\n        // But that's ok b/c we know the block in such case\n\n        // Go over weeks to fill history and calculate what the current point is\n        {\n            uint t_i = (last_checkpoint / WEEK) * WEEK;\n            for (uint i = 0; i < 255; ++i) {\n                // Hopefully it won't happen that this won't get used in 5 years!\n                // If it does, users will be able to withdraw but vote weight will be broken\n                t_i += WEEK;\n                int128 d_slope = 0;\n                if (t_i > block.timestamp) {\n                    t_i = block.timestamp;\n                } else {\n                    d_slope = slope_changes[t_i];\n                }\n                last_point.bias -= last_point.slope * int128(int256(t_i - last_checkpoint));\n                last_point.slope += d_slope;\n                if (last_point.bias < 0) {\n                    // This can happen\n                    last_point.bias = 0;\n                }\n                if (last_point.slope < 0) {\n                    // This cannot happen - just in case\n                    last_point.slope = 0;\n                }\n                last_checkpoint = t_i;\n                last_point.ts = t_i;\n                last_point.blk = initial_last_point.blk + (block_slope * (t_i - initial_last_point.ts)) / MULTIPLIER;\n                _epoch += 1;\n                if (t_i == block.timestamp) {\n                    last_point.blk = block.number;\n                    break;\n                } else {\n                    point_history[_epoch] = last_point;\n                }\n            }\n        }\n\n        epoch = _epoch;\n        // Now point_history is filled until t=now\n\n        if (_tokenId != 0) {\n            // If last point was in this block, the slope change has been applied already\n            // But in such case we have 0 slope(s)\n            last_point.slope += (u_new.slope - u_old.slope);\n            last_point.bias += (u_new.bias - u_old.bias);\n            if (last_point.slope < 0) {\n                last_point.slope = 0;\n            }\n            if (last_point.bias < 0) {\n                last_point.bias = 0;\n            }\n        }\n\n        // Record the changed point into history\n        point_history[_epoch] = last_point;\n\n        if (_tokenId != 0) {\n            // Schedule the slope changes (slope is going down)\n            // We subtract new_user_slope from [new_locked.end]\n            // and add old_user_slope to [old_locked.end]\n            if (old_locked.end > block.timestamp) {\n                // old_dslope was <something> - u_old.slope, so we cancel that\n                old_dslope += u_old.slope;\n                if (new_locked.end == old_locked.end) {\n                    old_dslope -= u_new.slope; // It was a new deposit, not extension\n                }\n                slope_changes[old_locked.end] = old_dslope;\n            }\n\n            if (new_locked.end > block.timestamp) {\n                if (new_locked.end > old_locked.end) {\n                    new_dslope -= u_new.slope; // old slope disappeared at this point\n                    slope_changes[new_locked.end] = new_dslope;\n                }\n                // else: we recorded it already in old_dslope\n            }\n            // Now handle user history\n            uint user_epoch = user_point_epoch[_tokenId] + 1;\n\n            user_point_epoch[_tokenId] = user_epoch;\n            u_new.ts = block.timestamp;\n            u_new.blk = block.number;\n            user_point_history[_tokenId][user_epoch] = u_new;\n        }\n    }\n\n    /// @notice Deposit and lock tokens for a user\n    /// @param _tokenId NFT that holds lock\n    /// @param _value Amount to deposit\n    /// @param unlock_time New time when to unlock the tokens, or 0 if unchanged\n    /// @param locked_balance Previous locked amount / timestamp\n    /// @param deposit_type The type of deposit\n    function _deposit_for(\n        uint _tokenId,\n        uint _value,\n        uint unlock_time,\n        LockedBalance memory locked_balance,\n        DepositType deposit_type\n    ) internal {\n        LockedBalance memory _locked = locked_balance;\n        uint supply_before = supply;\n\n        supply = supply_before + _value;\n        LockedBalance memory old_locked;\n        (old_locked.amount, old_locked.end) = (_locked.amount, _locked.end);\n        // Adding to existing lock, or if a lock is expired - creating a new one\n        _locked.amount += int128(int256(_value));\n        if (unlock_time != 0) {\n            _locked.end = unlock_time;\n        }\n        locked[_tokenId] = _locked;\n\n        // Possibilities:\n        // Both old_locked.end could be current or expired (>/< block.timestamp)\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\n        // _locked.end > block.timestamp (always)\n        _checkpoint(_tokenId, old_locked, _locked);\n\n        address from = msg.sender;\n        if (_value != 0 && deposit_type != DepositType.MERGE_TYPE) {\n            assert(IERC20(token).transferFrom(from, address(this), _value));\n        }\n\n        emit Deposit(from, _tokenId, _value, _locked.end, deposit_type, block.timestamp);\n        emit Supply(supply_before, supply_before + _value);\n    }\n\n    function block_number() external view returns (uint) {\n        return block.number;\n    }\n\n    /// @notice Record global data to checkpoint\n    function checkpoint() external {\n        _checkpoint(0, LockedBalance(0, 0), LockedBalance(0, 0));\n    }\n\n    /// @notice Deposit `_value` tokens for `_tokenId` and add to the lock\n    /// @dev Anyone (even a smart contract) can deposit for someone else, but\n    ///      cannot extend their locktime and deposit for a brand new user\n    /// @param _tokenId lock NFT\n    /// @param _value Amount to add to user's lock\n    function deposit_for(uint _tokenId, uint _value) external nonreentrant {\n        LockedBalance memory _locked = locked[_tokenId];\n\n        require(_value > 0); // dev: need non-zero value\n        require(_locked.amount > 0, 'No existing lock found');\n        require(_locked.end > block.timestamp, 'Cannot add to expired lock. Withdraw');\n        _deposit_for(_tokenId, _value, 0, _locked, DepositType.DEPOSIT_FOR_TYPE);\n    }\n\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\n    /// @param _value Amount to deposit\n    /// @param _lock_duration Number of seconds to lock tokens for (rounded down to nearest week)\n    /// @param _to Address to deposit\n    function _create_lock(uint _value, uint _lock_duration, address _to) internal returns (uint) {\n        uint unlock_time = (block.timestamp + _lock_duration) / WEEK * WEEK; // Locktime is rounded down to weeks\n\n        require(_value > 0); // dev: need non-zero value\n        require(unlock_time > block.timestamp, 'Can only lock until time in the future');\n        require(unlock_time <= block.timestamp + MAXTIME, 'Voting lock can be 4 years max');\n\n        ++tokenId;\n        uint _tokenId = tokenId;\n        _mint(_to, _tokenId);\n\n        _deposit_for(_tokenId, _value, unlock_time, locked[_tokenId], DepositType.CREATE_LOCK_TYPE);\n        return _tokenId;\n    }\n\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lock_duration`\n    /// @param _value Amount to deposit\n    /// @param _lock_duration Number of seconds to lock tokens for (rounded down to nearest week)\n    function create_lock(uint _value, uint _lock_duration) external nonreentrant returns (uint) {\n        return _create_lock(_value, _lock_duration, msg.sender);\n    }\n\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\n    /// @param _value Amount to deposit\n    /// @param _lock_duration Number of seconds to lock tokens for (rounded down to nearest week)\n    /// @param _to Address to deposit\n    function create_lock_for(uint _value, uint _lock_duration, address _to) external nonreentrant returns (uint) {\n        return _create_lock(_value, _lock_duration, _to);\n    }\n\n    /// @notice Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\n    /// @param _value Amount of tokens to deposit and add to the lock\n    function increase_amount(uint _tokenId, uint _value) external nonreentrant {\n        assert(_isApprovedOrOwner(msg.sender, _tokenId));\n\n        LockedBalance memory _locked = locked[_tokenId];\n\n        assert(_value > 0); // dev: need non-zero value\n        require(_locked.amount > 0, 'No existing lock found');\n        require(_locked.end > block.timestamp, 'Cannot add to expired lock. Withdraw');\n\n        _deposit_for(_tokenId, _value, 0, _locked, DepositType.INCREASE_LOCK_AMOUNT);\n    }\n\n    /// @notice Extend the unlock time for `_tokenId`\n    /// @param _lock_duration New number of seconds until tokens unlock\n    function increase_unlock_time(uint _tokenId, uint _lock_duration) external nonreentrant {\n        assert(_isApprovedOrOwner(msg.sender, _tokenId));\n\n        LockedBalance memory _locked = locked[_tokenId];\n        uint unlock_time = (block.timestamp + _lock_duration) / WEEK * WEEK; // Locktime is rounded down to weeks\n\n        require(_locked.end > block.timestamp, 'Lock expired');\n        require(_locked.amount > 0, 'Nothing is locked');\n        require(unlock_time > _locked.end, 'Can only increase lock duration');\n        require(unlock_time <= block.timestamp + MAXTIME, 'Voting lock can be 4 years max');\n\n        _deposit_for(_tokenId, 0, unlock_time, _locked, DepositType.INCREASE_UNLOCK_TIME);\n    }\n\n    /// @notice Withdraw all tokens for `_tokenId`\n    /// @dev Only possible if the lock has expired\n    function withdraw(uint _tokenId) external nonreentrant {\n        assert(_isApprovedOrOwner(msg.sender, _tokenId));\n        require(attachments[_tokenId] == 0 && !voted[_tokenId], \"attached\");\n\n        LockedBalance memory _locked = locked[_tokenId];\n        require(block.timestamp >= _locked.end, \"The lock didn't expire\");\n        uint value = uint(int256(_locked.amount));\n\n        locked[_tokenId] = LockedBalance(0,0);\n        uint supply_before = supply;\n        supply = supply_before - value;\n\n        // old_locked can have either expired <= timestamp or zero end\n        // _locked has only 0 end\n        // Both can have >= 0 amount\n        _checkpoint(_tokenId, _locked, LockedBalance(0,0));\n\n        assert(IERC20(token).transfer(msg.sender, value));\n\n        // Burn the NFT\n        _burn(_tokenId);\n\n        emit Withdraw(msg.sender, _tokenId, value, block.timestamp);\n        emit Supply(supply_before, supply_before - value);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                           GAUGE VOTING STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\n    // They measure the weights for the purpose of voting, so they don't represent\n    // real coins.\n\n    /// @notice Binary search to estimate timestamp for block number\n    /// @param _block Block to find\n    /// @param max_epoch Don't go beyond this epoch\n    /// @return Approximate timestamp for block\n    function _find_block_epoch(uint _block, uint max_epoch) internal view returns (uint) {\n        // Binary search\n        uint _min = 0;\n        uint _max = max_epoch;\n        for (uint i = 0; i < 128; ++i) {\n            // Will be always enough for 128-bit numbers\n            if (_min >= _max) {\n                break;\n            }\n            uint _mid = (_min + _max + 1) / 2;\n            if (point_history[_mid].blk <= _block) {\n                _min = _mid;\n            } else {\n                _max = _mid - 1;\n            }\n        }\n        return _min;\n    }\n\n    /// @notice Get the current voting power for `_tokenId`\n    /// @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\n    /// @param _tokenId NFT for lock\n    /// @param _t Epoch time to return voting power at\n    /// @return User voting power\n    function _balanceOfNFT(uint _tokenId, uint _t) internal view returns (uint) {\n        uint _epoch = user_point_epoch[_tokenId];\n        if (_epoch == 0) {\n            return 0;\n        } else {\n            Point memory last_point = user_point_history[_tokenId][_epoch];\n            last_point.bias -= last_point.slope * int128(int256(_t) - int256(last_point.ts));\n            if (last_point.bias < 0) {\n                last_point.bias = 0;\n            }\n            return uint(int256(last_point.bias));\n        }\n    }\n\n    function balanceOfNFT(uint _tokenId) external view returns (uint) {\n        if (ownership_change[_tokenId] == block.number) return 0;\n        return _balanceOfNFT(_tokenId, block.timestamp);\n    }\n\n    function balanceOfNFTAt(uint _tokenId, uint _t) external view returns (uint) {\n        return _balanceOfNFT(_tokenId, _t);\n    }\n\n    /// @notice Measure voting power of `_tokenId` at block height `_block`\n    /// @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\n    /// @param _tokenId User's wallet NFT\n    /// @param _block Block to calculate the voting power at\n    /// @return Voting power\n    function _balanceOfAtNFT(uint _tokenId, uint _block) internal view returns (uint) {\n        // Copying and pasting totalSupply code because Vyper cannot pass by\n        // reference yet\n        assert(_block <= block.number);\n\n        // Binary search\n        uint _min = 0;\n        uint _max = user_point_epoch[_tokenId];\n        for (uint i = 0; i < 128; ++i) {\n            // Will be always enough for 128-bit numbers\n            if (_min >= _max) {\n                break;\n            }\n            uint _mid = (_min + _max + 1) / 2;\n            if (user_point_history[_tokenId][_mid].blk <= _block) {\n                _min = _mid;\n            } else {\n                _max = _mid - 1;\n            }\n        }\n\n        Point memory upoint = user_point_history[_tokenId][_min];\n\n        uint max_epoch = epoch;\n        uint _epoch = _find_block_epoch(_block, max_epoch);\n        Point memory point_0 = point_history[_epoch];\n        uint d_block = 0;\n        uint d_t = 0;\n        if (_epoch < max_epoch) {\n            Point memory point_1 = point_history[_epoch + 1];\n            d_block = point_1.blk - point_0.blk;\n            d_t = point_1.ts - point_0.ts;\n        } else {\n            d_block = block.number - point_0.blk;\n            d_t = block.timestamp - point_0.ts;\n        }\n        uint block_time = point_0.ts;\n        if (d_block != 0) {\n            block_time += (d_t * (_block - point_0.blk)) / d_block;\n        }\n\n        upoint.bias -= upoint.slope * int128(int256(block_time - upoint.ts));\n        if (upoint.bias >= 0) {\n            return uint(uint128(upoint.bias));\n        } else {\n            return 0;\n        }\n    }\n\n    function balanceOfAtNFT(uint _tokenId, uint _block) external view returns (uint) {\n        return _balanceOfAtNFT(_tokenId, _block);\n    }\n\n    /// @notice Calculate total voting power at some point in the past\n    /// @param _block Block to calculate the total voting power at\n    /// @return Total voting power at `_block`\n    function totalSupplyAt(uint _block) external view returns (uint) {\n        assert(_block <= block.number);\n        uint _epoch = epoch;\n        uint target_epoch = _find_block_epoch(_block, _epoch);\n\n        Point memory point = point_history[target_epoch];\n        uint dt = 0;\n        if (target_epoch < _epoch) {\n            Point memory point_next = point_history[target_epoch + 1];\n            if (point.blk != point_next.blk) {\n                dt = ((_block - point.blk) * (point_next.ts - point.ts)) / (point_next.blk - point.blk);\n            }\n        } else {\n            if (point.blk != block.number) {\n                dt = ((_block - point.blk) * (block.timestamp - point.ts)) / (block.number - point.blk);\n            }\n        }\n        // Now dt contains info on how far are we beyond point\n        return _supply_at(point, point.ts + dt);\n    }\n    /// @notice Calculate total voting power at some point in the past\n    /// @param point The point (bias/slope) to start search from\n    /// @param t Time to calculate the total voting power at\n    /// @return Total voting power at that time\n    function _supply_at(Point memory point, uint t) internal view returns (uint) {\n        Point memory last_point = point;\n        uint t_i = (last_point.ts / WEEK) * WEEK;\n        for (uint i = 0; i < 255; ++i) {\n            t_i += WEEK;\n            int128 d_slope = 0;\n            if (t_i > t) {\n                t_i = t;\n            } else {\n                d_slope = slope_changes[t_i];\n            }\n            last_point.bias -= last_point.slope * int128(int256(t_i - last_point.ts));\n            if (t_i == t) {\n                break;\n            }\n            last_point.slope += d_slope;\n            last_point.ts = t_i;\n        }\n\n        if (last_point.bias < 0) {\n            last_point.bias = 0;\n        }\n        return uint(uint128(last_point.bias));\n    }\n\n    function totalSupply() external view returns (uint) {\n        return totalSupplyAtT(block.timestamp);\n    }\n\n    /// @notice Calculate total voting power\n    /// @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\n    /// @return Total voting power\n    function totalSupplyAtT(uint t) public view returns (uint) {\n        uint _epoch = epoch;\n        Point memory last_point = point_history[_epoch];\n        return _supply_at(last_point, t);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            GAUGE VOTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint => uint) public attachments;\n    mapping(uint => bool) public voted;\n\n    function setVoter(address _voter) external {\n        require(msg.sender == voter);\n        voter = _voter;\n    }\n\n    function voting(uint _tokenId) external {\n        require(msg.sender == voter);\n        voted[_tokenId] = true;\n    }\n\n    function abstain(uint _tokenId) external {\n        require(msg.sender == voter);\n        voted[_tokenId] = false;\n    }\n\n    function attach(uint _tokenId) external {\n        require(msg.sender == voter);\n        attachments[_tokenId] = attachments[_tokenId] + 1;\n    }\n\n    function detach(uint _tokenId) external {\n        require(msg.sender == voter);\n        attachments[_tokenId] = attachments[_tokenId] - 1;\n    }\n\n    function merge(uint _from, uint _to) external {\n        require(attachments[_from] == 0 && !voted[_from], \"attached\");\n        require(_from != _to);\n        require(_isApprovedOrOwner(msg.sender, _from));\n        require(_isApprovedOrOwner(msg.sender, _to));\n\n        LockedBalance memory _locked0 = locked[_from];\n        LockedBalance memory _locked1 = locked[_to];\n        uint value0 = uint(int256(_locked0.amount));\n        uint end = _locked0.end >= _locked1.end ? _locked0.end : _locked1.end;\n\n        locked[_from] = LockedBalance(0, 0);\n        _checkpoint(_from, _locked0, LockedBalance(0, 0));\n        _burn(_from);\n        _deposit_for(_to, value0, end, _locked1, DepositType.MERGE_TYPE);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            DAO VOTING STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice A record of each accounts delegate\n    mapping(address => address) private _delegates;\n    uint public constant MAX_DELEGATES = 1024; // avoid too much gas\n\n    /// @notice A record of delegated token checkpoints for each account, by index\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping(address => uint32) public numCheckpoints;\n\n    /// @notice A record of states for signing / validating signatures\n    mapping(address => uint) public nonces;\n\n    /**\n     * @notice Overrides the standard `Comp.sol` delegates mapping to return\n     * the delegator's own address if they haven't delegated.\n     * This avoids having to delegate to oneself.\n     */\n    function delegates(address delegator) public view returns (address) {\n        address current = _delegates[delegator];\n        return current == address(0) ? delegator : current;\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getVotes(address account) external view returns (uint) {\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n        uint[] storage _tokenIds = checkpoints[account][nCheckpoints - 1].tokenIds;\n        uint votes = 0;\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            uint tId = _tokenIds[i];\n            votes = votes + _balanceOfNFT(tId, block.timestamp);\n        }\n        return votes;\n    }\n\n    function getPastVotesIndex(address account, uint timestamp) public view returns (uint32) {\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint storage cp = checkpoints[account][center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPastVotes(address account, uint timestamp)\n        public\n        view\n        returns (uint)\n    {\n        uint32 _checkIndex = getPastVotesIndex(account, timestamp);\n        // Sum votes\n        uint[] storage _tokenIds = checkpoints[account][_checkIndex].tokenIds;\n        uint votes = 0;\n        for (uint i = 0; i < _tokenIds.length; i++) {\n            uint tId = _tokenIds[i];\n            // Use the provided input timestamp here to get the right decay\n            votes = votes + _balanceOfNFT(tId, timestamp);\n        }\n        return votes;\n    }\n\n    function getPastTotalSupply(uint256 timestamp) external view returns (uint) {\n        return totalSupplyAtT(timestamp);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                             DAO VOTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _moveTokenDelegates(\n        address srcRep,\n        address dstRep,\n        uint _tokenId\n    ) internal {\n        if (srcRep != dstRep && _tokenId > 0) {\n            if (srcRep != address(0)) {\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint[] storage srcRepOld = srcRepNum > 0\n                    ? checkpoints[srcRep][srcRepNum - 1].tokenIds\n                    : checkpoints[srcRep][0].tokenIds;\n                uint32 nextSrcRepNum = _findWhatCheckpointToWrite(srcRep);\n                uint[] storage srcRepNew = checkpoints[srcRep][\n                    nextSrcRepNum\n                ].tokenIds;\n                // All the same except _tokenId\n                for (uint i = 0; i < srcRepOld.length; i++) {\n                    uint tId = srcRepOld[i];\n                    if (tId != _tokenId) {\n                        srcRepNew.push(tId);\n                    }\n                }\n\n                numCheckpoints[srcRep] = srcRepNum + 1;\n            }\n\n            if (dstRep != address(0)) {\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint[] storage dstRepOld = dstRepNum > 0\n                    ? checkpoints[dstRep][dstRepNum - 1].tokenIds\n                    : checkpoints[dstRep][0].tokenIds;\n                uint32 nextDstRepNum = _findWhatCheckpointToWrite(dstRep);\n                uint[] storage dstRepNew = checkpoints[dstRep][\n                    nextDstRepNum\n                ].tokenIds;\n                // All the same plus _tokenId\n                require(\n                    dstRepOld.length + 1 <= MAX_DELEGATES,\n                    \"dstRep would have too many tokenIds\"\n                );\n                for (uint i = 0; i < dstRepOld.length; i++) {\n                    uint tId = dstRepOld[i];\n                    dstRepNew.push(tId);\n                }\n                dstRepNew.push(_tokenId);\n\n                numCheckpoints[dstRep] = dstRepNum + 1;\n            }\n        }\n    }\n\n    function _findWhatCheckpointToWrite(address account)\n        internal\n        view\n        returns (uint32)\n    {\n        uint _timestamp = block.timestamp;\n        uint32 _nCheckPoints = numCheckpoints[account];\n\n        if (\n            _nCheckPoints > 0 &&\n            checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            return _nCheckPoints - 1;\n        } else {\n            return _nCheckPoints;\n        }\n    }\n\n    function _moveAllDelegates(\n        address owner,\n        address srcRep,\n        address dstRep\n    ) internal {\n        // You can only redelegate what you own\n        if (srcRep != dstRep) {\n            if (srcRep != address(0)) {\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint[] storage srcRepOld = srcRepNum > 0\n                    ? checkpoints[srcRep][srcRepNum - 1].tokenIds\n                    : checkpoints[srcRep][0].tokenIds;\n                uint32 nextSrcRepNum = _findWhatCheckpointToWrite(srcRep);\n                uint[] storage srcRepNew = checkpoints[srcRep][\n                    nextSrcRepNum\n                ].tokenIds;\n                // All the same except what owner owns\n                for (uint i = 0; i < srcRepOld.length; i++) {\n                    uint tId = srcRepOld[i];\n                    if (idToOwner[tId] != owner) {\n                        srcRepNew.push(tId);\n                    }\n                }\n\n                numCheckpoints[srcRep] = srcRepNum + 1;\n            }\n\n            if (dstRep != address(0)) {\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint[] storage dstRepOld = dstRepNum > 0\n                    ? checkpoints[dstRep][dstRepNum - 1].tokenIds\n                    : checkpoints[dstRep][0].tokenIds;\n                uint32 nextDstRepNum = _findWhatCheckpointToWrite(dstRep);\n                uint[] storage dstRepNew = checkpoints[dstRep][\n                    nextDstRepNum\n                ].tokenIds;\n                uint ownerTokenCount = ownerToNFTokenCount[owner];\n                require(\n                    dstRepOld.length + ownerTokenCount <= MAX_DELEGATES,\n                    \"dstRep would have too many tokenIds\"\n                );\n                // All the same\n                for (uint i = 0; i < dstRepOld.length; i++) {\n                    uint tId = dstRepOld[i];\n                    dstRepNew.push(tId);\n                }\n                // Plus all that's owned\n                for (uint i = 0; i < ownerTokenCount; i++) {\n                    uint tId = ownerToNFTokenIdList[owner][i];\n                    dstRepNew.push(tId);\n                }\n\n                numCheckpoints[dstRep] = dstRepNum + 1;\n            }\n        }\n    }\n\n    function _delegate(address delegator, address delegatee) internal {\n        /// @notice differs from `_delegate()` in `Comp.sol` to use `delegates` override method to simulate auto-delegation\n        address currentDelegate = delegates(delegator);\n\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n        _moveAllDelegates(delegator, currentDelegate, delegatee);\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) public {\n        if (delegatee == address(0)) delegatee = msg.sender;\n        return _delegate(msg.sender, delegatee);\n    }\n\n    function delegateBySig(\n        address delegatee,\n        uint nonce,\n        uint expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(name)),\n                keccak256(bytes(version)),\n                block.chainid,\n                address(this)\n            )\n        );\n        bytes32 structHash = keccak256(\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\n        );\n        bytes32 digest = keccak256(\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\n        );\n        address signatory = ecrecover(digest, v, r, s);\n        require(\n            signatory != address(0),\n            \"VotingEscrow::delegateBySig: invalid signature\"\n        );\n        require(\n            nonce == nonces[signatory]++,\n            \"VotingEscrow::delegateBySig: invalid nonce\"\n        );\n        require(\n            block.timestamp <= expiry,\n            \"VotingEscrow::delegateBySig: signature expired\"\n        );\n        return _delegate(signatory, delegatee);\n    }\n}\n"
    },
    "contracts/WrappedExternalBribe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\nimport \"contracts/ExternalBribe.sol\";\nimport \"contracts/interfaces/IERC20.sol\";\nimport \"contracts/interfaces/IGauge.sol\";\nimport \"contracts/interfaces/IVoter.sol\";\nimport \"contracts/interfaces/IVotingEscrow.sol\";\n\n// Bribes pay out rewards for a given pool based on the votes that were received from the user (goes hand in hand with Voter.vote())\ncontract WrappedExternalBribe {\n    address public immutable voter;\n    address public immutable _ve;\n    ExternalBribe public underlying_bribe;\n\n    uint256 internal constant DURATION = 7 days; // rewards are released over the voting period\n    uint256 internal constant MAX_REWARD_TOKENS = 16;\n\n    uint256 internal constant PRECISION = 10**18;\n\n    mapping(address => mapping(uint256 => uint256)) public tokenRewardsPerEpoch;\n    mapping(address => uint256) public periodFinish;\n    mapping(address => mapping(uint256 => uint256)) public lastEarn;\n\n    address[] public rewards;\n    mapping(address => bool) public isReward;\n\n    /// @notice A checkpoint for marking balance\n    struct RewardCheckpoint {\n        uint256 timestamp;\n        uint256 balance;\n    }\n\n    event NotifyReward(\n        address indexed from,\n        address indexed reward,\n        uint256 epoch,\n        uint256 amount\n    );\n    event ClaimRewards(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n\n    constructor(address _voter, address _old_bribe) {\n        voter = _voter;\n        _ve = IVoter(_voter)._ve();\n        underlying_bribe = ExternalBribe(_old_bribe);\n\n        for (uint256 i; i < underlying_bribe.rewardsListLength(); i++) {\n            address underlying_reward = underlying_bribe.rewards(i);\n            if (underlying_reward != address(0)) {\n                isReward[underlying_reward] = true;\n                rewards.push(underlying_reward);\n            }\n        }\n    }\n\n    // simple re-entrancy check\n    uint256 internal _unlocked = 1;\n    modifier lock() {\n        require(_unlocked == 1);\n        _unlocked = 2;\n        _;\n        _unlocked = 1;\n    }\n\n    function _bribeStart(uint256 timestamp) internal pure returns (uint256) {\n        return timestamp - (timestamp % (7 days));\n    }\n\n    function getEpochStart(uint256 timestamp) public pure returns (uint256) {\n        uint256 bribeStart = _bribeStart(timestamp);\n        uint256 bribeEnd = bribeStart + DURATION;\n        return timestamp < bribeEnd ? bribeStart : bribeStart + 7 days;\n    }\n\n    function rewardsListLength() external view returns (uint256) {\n        return rewards.length;\n    }\n\n    // returns the last time the reward was modified or periodFinish if the reward has ended\n    function lastTimeRewardApplicable(address token)\n        public\n        view\n        returns (uint256)\n    {\n        return Math.min(block.timestamp, periodFinish[token]);\n    }\n\n    // allows a user to claim rewards for a given token\n    function getReward(uint256 tokenId, address[] memory tokens) external lock {\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, tokenId));\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 _reward = earned(tokens[i], tokenId);\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\n            if (_reward > 0) _safeTransfer(tokens[i], msg.sender, _reward);\n\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\n        }\n    }\n\n    // used by Voter to allow batched reward claims\n    function getRewardForOwner(uint256 tokenId, address[] memory tokens)\n        external\n        lock\n    {\n        require(msg.sender == voter);\n        address _owner = IVotingEscrow(_ve).ownerOf(tokenId);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 _reward = earned(tokens[i], tokenId);\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\n            if (_reward > 0) _safeTransfer(tokens[i], _owner, _reward);\n\n            emit ClaimRewards(_owner, tokens[i], _reward);\n        }\n    }\n\n    function earned(address token, uint256 tokenId)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _startTimestamp = lastEarn[token][tokenId];\n        if (underlying_bribe.numCheckpoints(tokenId) == 0) {\n            return 0;\n        }\n\n        uint256 _startIndex = underlying_bribe.getPriorBalanceIndex(\n            tokenId,\n            _startTimestamp\n        );\n        uint256 _endIndex = underlying_bribe.numCheckpoints(tokenId) - 1;\n\n        uint256 reward = 0;\n        // you only earn once per epoch (after it's over)\n        RewardCheckpoint memory prevRewards;\n        prevRewards.timestamp = _bribeStart(_startTimestamp);\n        uint256 _prevTs = 0;\n        uint256 _prevBal = 0;\n        uint256 _prevSupply = 1;\n\n        if (_endIndex > 0) {\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\n                (_prevTs, _prevBal) = underlying_bribe.checkpoints(tokenId, i);\n                uint256 _nextEpochStart = _bribeStart(_prevTs);\n                // check that you've earned it\n                // this won't happen until a week has passed\n                if (_nextEpochStart > prevRewards.timestamp) {\n                    reward += prevRewards.balance;\n                }\n\n                prevRewards.timestamp = _nextEpochStart;\n                (, _prevSupply) = underlying_bribe.supplyCheckpoints(\n                    underlying_bribe.getPriorSupplyIndex(\n                        _nextEpochStart + DURATION\n                    )\n                );\n                prevRewards.balance =\n                    (_prevBal * tokenRewardsPerEpoch[token][_nextEpochStart]) /\n                    _prevSupply;\n            }\n        }\n\n        (_prevTs, _prevBal) = underlying_bribe.checkpoints(tokenId, _endIndex);\n        uint256 _lastEpochStart = _bribeStart(_prevTs);\n        uint256 _lastEpochEnd = _lastEpochStart + DURATION;\n\n        if (\n            block.timestamp > _lastEpochEnd && _startTimestamp < _lastEpochEnd\n        ) {\n            (, _prevSupply) = underlying_bribe.supplyCheckpoints(\n                underlying_bribe.getPriorSupplyIndex(_lastEpochEnd)\n            );\n            reward +=\n                (_prevBal * tokenRewardsPerEpoch[token][_lastEpochStart]) /\n                _prevSupply;\n        }\n\n        return reward;\n    }\n\n    function left(address token) external view returns (uint256) {\n        uint256 adjustedTstamp = getEpochStart(block.timestamp);\n        return tokenRewardsPerEpoch[token][adjustedTstamp];\n    }\n\n    function notifyRewardAmount(address token, uint256 amount) external lock {\n        require(amount > 0);\n        if (!isReward[token]) {\n            require(\n                IVoter(voter).isWhitelisted(token),\n                \"bribe tokens must be whitelisted\"\n            );\n            require(\n                rewards.length < MAX_REWARD_TOKENS,\n                \"too many rewards tokens\"\n            );\n        }\n        // bribes kick in at the start of next bribe period\n        uint256 adjustedTstamp = getEpochStart(block.timestamp);\n        uint256 epochRewards = tokenRewardsPerEpoch[token][adjustedTstamp];\n\n        _safeTransferFrom(token, msg.sender, address(this), amount);\n        tokenRewardsPerEpoch[token][adjustedTstamp] = epochRewards + amount;\n\n        periodFinish[token] = adjustedTstamp + DURATION;\n\n        if (!isReward[token]) {\n            isReward[token] = true;\n            rewards.push(token);\n        }\n\n        emit NotifyReward(msg.sender, token, adjustedTstamp, amount);\n    }\n\n    function swapOutRewardToken(\n        uint256 i,\n        address oldToken,\n        address newToken\n    ) external {\n        require(msg.sender == IVotingEscrow(_ve).team(), \"only team\");\n        require(rewards[i] == oldToken);\n        isReward[oldToken] = false;\n        isReward[newToken] = true;\n        rewards[i] = newToken;\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n}\n"
    },
    "contracts/WrappedExternalBribeV.sol": {
      "content": ""
    },
    "lib/LayerZero/contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.5.0;\n\nimport \"./ILayerZeroUserApplicationConfig.sol\";\n\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n    // @param _dstChainId - the destination chain identifier\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n    // @param _payload - a custom bytes payload to send to the destination contract\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\n\n    // @notice used by the messaging library to publish verified payload\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source contract (as bytes) at the source chain\n    // @param _dstAddress - the address on destination chain\n    // @param _nonce - the unbound message ordering nonce\n    // @param _gasLimit - the gas limit for external contract execution\n    // @param _payload - verified payload to send to the destination contract\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\n\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\n\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n    // @param _srcAddress - the source chain contract address\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\n\n    // @notice get this Endpoint's immutable source identifier\n    function getChainId() external view returns (uint16);\n\n    // @notice the interface to retry failed message on this Endpoint destination\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    // @param _payload - the payload to be retried\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\n\n    // @notice query if any STORED payload (message blocking) at the endpoint.\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    // @notice query if the _libraryAddress is valid for sending msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the _libraryAddress is valid for receiving msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the non-reentrancy guard for send() is on\n    // @return true if the guard is on. false otherwise\n    function isSendingPayload() external view returns (bool);\n\n    // @notice query if the non-reentrancy guard for receive() is on\n    // @return true if the guard is on. false otherwise\n    function isReceivingPayload() external view returns (bool);\n\n    // @notice get the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _userApplication - the contract address of the user application\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\n\n    // @notice get the send() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getSendVersion(address _userApplication) external view returns (uint16);\n\n    // @notice get the lzReceive() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\n}\n"
    },
    "lib/LayerZero/contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroReceiver {\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n    // @param _srcChainId - the source endpoint identifier\n    // @param _srcAddress - the source sending contract address from the source chain\n    // @param _nonce - the ordered message nonce\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\n}\n"
    },
    "lib/LayerZero/contracts/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroUserApplicationConfig {\n    // @notice set the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    // @param _config - configuration in the bytes. can encode arbitrary content.\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\n\n    // @notice set the send() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setSendVersion(uint16 _version) external;\n\n    // @notice set the lzReceive() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setReceiveVersion(uint16 _version) external;\n\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\n    // @param _srcChainId - the chainId of the source chain\n    // @param _srcAddress - the contract address of the source contract at the source chain\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/governance/IGovernor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/IGovernor.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Interface of the {Governor} core.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernor is IERC165 {\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /**\n     * @dev Emitted when a proposal is created.\n     */\n    event ProposalCreated(\n        uint256 proposalId,\n        address proposer,\n        address[] targets,\n        uint256[] values,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 startBlock,\n        uint256 endBlock,\n        string description\n    );\n\n    /**\n     * @dev Emitted when a proposal is canceled.\n     */\n    event ProposalCanceled(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a proposal is executed.\n     */\n    event ProposalExecuted(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a vote is cast without params.\n     *\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\n     */\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\n\n    /**\n     * @dev Emitted when a vote is cast with params.\n     *\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\n     * `params` are additional encoded parameters. Their intepepretation also depends on the voting module used.\n     */\n    event VoteCastWithParams(\n        address indexed voter,\n        uint256 proposalId,\n        uint8 support,\n        uint256 weight,\n        string reason,\n        bytes params\n    );\n\n    /**\n     * @notice module:core\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\n     */\n    function name() public view virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\"\n     */\n    function version() public view virtual returns (string memory);\n\n    /**\n     * @notice module:voting\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\n     *\n     * There are 2 standard keys: `support` and `quorum`.\n     *\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\n     *\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\n     * name that describes the behavior. For example:\n     *\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\n     *\n     * NOTE: The string can be decoded by the standard\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\n     * JavaScript class.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\n     */\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Current state of a proposal, following Compound's convention\n     */\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\n\n    /**\n     * @notice module:core\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\n     * beginning of the following block.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\n     * during this block.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\n     * leave time for users to buy voting power, or delegate it, before the voting of a proposal starts.\n     */\n    function votingDelay() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\n     *\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\n     * duration compared to the voting delay.\n     */\n    function votingPeriod() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Minimum number of cast voted required for a proposal to be successful.\n     *\n     * Note: The `blockNumber` parameter corresponds to the snapshot used for counting vote. This allows to scale the\n     * quorum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\n     */\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\n\n    /**\n     * @notice module:reputation\n     * @dev Voting power of an `account` at a specific `blockNumber`.\n     *\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\n     * multiple), {ERC20Votes} tokens.\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\n\n    /**\n     * @notice module:reputation\n     * @dev Voting power of an `account` at a specific `blockNumber` given additional encoded parameters.\n     */\n    function getVotesWithParams(\n        address account,\n        uint256 blockNumber,\n        bytes memory params\n    ) public view virtual returns (uint256);\n\n    /**\n     * @notice module:voting\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\n\n    /**\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\n     * {IGovernor-votingPeriod} blocks after the voting starts.\n     *\n     * Emits a {ProposalCreated} event.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\n     * deadline to be reached.\n     *\n     * Emits a {ProposalExecuted} event.\n     *\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Cast a vote\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote with a reason\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote with a reason and additional encoded parameters\n     *\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\n     */\n    function castVoteWithReasonAndParams(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote using the user's cryptographic signature.\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature.\n     *\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\n     */\n    function castVoteWithReasonAndParamsBySig(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual returns (uint256 balance);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n *\n * _Available since v4.5._\n */\ninterface IVotes {\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\n     */\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\n\nimport \"./EIP712.sol\";\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/structs/DoubleEndedQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/DoubleEndedQueue.sol)\npragma solidity ^0.8.4;\n\nimport \"../math/SafeCast.sol\";\n\n/**\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\n * the existing queue contents are left in storage.\n *\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\n * used in storage, and not in memory.\n * ```\n * DoubleEndedQueue.Bytes32Deque queue;\n * ```\n *\n * _Available since v4.6._\n */\nlibrary DoubleEndedQueue {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\n     * data[end - 1].\n     */\n    struct Bytes32Deque {\n        int128 _begin;\n        int128 _end;\n        mapping(int128 => bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     */\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\n        int128 backIndex = deque._end;\n        deque._data[backIndex] = value;\n        unchecked {\n            deque._end = backIndex + 1;\n        }\n    }\n\n    /**\n     * @dev Removes the item at the end of the queue and returns it.\n     *\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\n        if (empty(deque)) revert Empty();\n        int128 backIndex;\n        unchecked {\n            backIndex = deque._end - 1;\n        }\n        value = deque._data[backIndex];\n        delete deque._data[backIndex];\n        deque._end = backIndex;\n    }\n\n    /**\n     * @dev Inserts an item at the beginning of the queue.\n     */\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\n        int128 frontIndex;\n        unchecked {\n            frontIndex = deque._begin - 1;\n        }\n        deque._data[frontIndex] = value;\n        deque._begin = frontIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\n        if (empty(deque)) revert Empty();\n        int128 frontIndex = deque._begin;\n        value = deque._data[frontIndex];\n        delete deque._data[frontIndex];\n        unchecked {\n            deque._begin = frontIndex + 1;\n        }\n    }\n\n    /**\n     * @dev Returns the item at the beginning of the queue.\n     *\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\n        if (empty(deque)) revert Empty();\n        int128 frontIndex = deque._begin;\n        return deque._data[frontIndex];\n    }\n\n    /**\n     * @dev Returns the item at the end of the queue.\n     *\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\n        if (empty(deque)) revert Empty();\n        int128 backIndex;\n        unchecked {\n            backIndex = deque._end - 1;\n        }\n        return deque._data[backIndex];\n    }\n\n    /**\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\n     * `length(deque) - 1`.\n     *\n     * Reverts with `OutOfBounds` if the index is out of bounds.\n     */\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\n        // int256(deque._begin) is a safe upcast\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\n        if (idx >= deque._end) revert OutOfBounds();\n        return deque._data[idx];\n    }\n\n    /**\n     * @dev Resets the queue back to being empty.\n     *\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\n     * out on potential gas refunds.\n     */\n    function clear(Bytes32Deque storage deque) internal {\n        deque._begin = 0;\n        deque._end = 0;\n    }\n\n    /**\n     * @dev Returns the number of items in the queue.\n     */\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\n        // We also assume there are at most int256.max items in the queue.\n        unchecked {\n            return uint256(int256(deque._end) - int256(deque._begin));\n        }\n    }\n\n    /**\n     * @dev Returns true if the queue is empty.\n     */\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\n        return deque._end <= deque._begin;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Timers.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Tooling for timepoints, timers and delays\n */\nlibrary Timers {\n    struct Timestamp {\n        uint64 _deadline;\n    }\n\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(Timestamp storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(Timestamp memory timer) internal view returns (bool) {\n        return timer._deadline > block.timestamp;\n    }\n\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.timestamp;\n    }\n\n    struct BlockNumber {\n        uint64 _deadline;\n    }\n\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\n        return timer._deadline;\n    }\n\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\n        timer._deadline = timestamp;\n    }\n\n    function reset(BlockNumber storage timer) internal {\n        timer._deadline = 0;\n    }\n\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline == 0;\n    }\n\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\n        return timer._deadline > 0;\n    }\n\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\n        return timer._deadline > block.number;\n    }\n\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\n        return isStarted(timer) && timer._deadline <= block.number;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x0000000000000031363735353339323034313033"
      }
    }
  }
}