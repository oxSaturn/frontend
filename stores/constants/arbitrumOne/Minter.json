{
  "address": "0xA9ee0C9f59Cf387859c8E9e3b333F9e8c2ea51F4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__voter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__ve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__rewards_distributor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weekly",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "circulating_supply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "circulating_emission",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TEAM_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_flow",
      "outputs": [
        {
          "internalType": "contract IFlow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_rewards_distributor",
      "outputs": [
        {
          "internalType": "contract IRewardsDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ve",
      "outputs": [
        {
          "internalType": "contract IVotingEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_voter",
      "outputs": [
        {
          "internalType": "contract IVoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "active_period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculate_emission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minted",
          "type": "uint256"
        }
      ],
      "name": "calculate_growth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulating_emission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circulating_supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "claimants",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingTeam",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_team",
          "type": "address"
        }
      ],
      "name": "setTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_teamRate",
          "type": "uint256"
        }
      ],
      "name": "setTeamRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "team",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "update_period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weekly",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weekly_emission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f4423eed3e5dbb799714e6f2c6deefbf9229630f1a821c03649730155b199ed",
  "receipt": {
    "to": null,
    "from": "0x53f3B51FD7F327E1Ec4E6eAa3A049149cB2acaD2",
    "contractAddress": "0xA9ee0C9f59Cf387859c8E9e3b333F9e8c2ea51F4",
    "transactionIndex": 1,
    "gasUsed": "8439331",
    "logsBloom": "0x
    "blockHash": "0x686c7d9ee125145ef07f8d91dbbf258c59b1ea893818bad00d5cfeb689dd1dbb",
    "transactionHash": "0x9f4423eed3e5dbb799714e6f2c6deefbf9229630f1a821c03649730155b199ed",
    "logs": [],
    "blockNumber": 58032111,
    "cumulativeGasUsed": "8439331",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2862Bf1ADC96d485B6E85C062b170903DE9A2Bd5",
    "0xfa01adbAA40f0EEeCEA76b7B18AC8bE064536787",
    "0xffCC209120a8fb388140689ea1235e4eD78620d5"
  ],
  "numDeployments": 1,
  "solcInputHash": "816572db58a4a8203fcf6f77728173df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__rewards_distributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weekly\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"circulating_supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"circulating_emission\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TEAM_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_flow\",\"outputs\":[{\"internalType\":\"contract IFlow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewards_distributor\",\"outputs\":[{\"internalType\":\"contract IRewardsDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ve\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_voter\",\"outputs\":[{\"internalType\":\"contract IVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculate_emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minted\",\"type\":\"uint256\"}],\"name\":\"calculate_growth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulating_emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulating_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"claimants\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"}],\"name\":\"setTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamRate\",\"type\":\"uint256\"}],\"name\":\"setTeamRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weekly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weekly_emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Minter.sol\":\"Minter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363735353339323034313033\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Minter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"contracts/interfaces/IMinter.sol\\\";\\nimport \\\"contracts/interfaces/IRewardsDistributor.sol\\\";\\nimport \\\"contracts/interfaces/IFlow.sol\\\";\\nimport \\\"contracts/interfaces/IVoter.sol\\\";\\nimport \\\"contracts/interfaces/IVotingEscrow.sol\\\";\\n\\n// codifies the minting rules as per ve(3,3), abstracted from the token to support any token that allows minting\\n\\ncontract Minter is IMinter {\\n    uint256 internal constant WEEK = 86400 * 7; // allows minting once per week (reset every Thursday 00:00 UTC)\\n    uint256 internal constant EMISSION = 990;\\n    uint256 internal constant TAIL_EMISSION = 2;\\n    uint256 internal constant PRECISION = 1000;\\n    IFlow public immutable _flow;\\n    IVoter public immutable _voter;\\n    IVotingEscrow public immutable _ve;\\n    IRewardsDistributor public immutable _rewards_distributor;\\n    uint256 public weekly = 15_000_000 * 1e18; // represents a starting weekly emission of 15M FLOW (FLOW has 18 decimals)\\n    uint256 public active_period;\\n    uint256 internal constant LOCK = 86400 * 7 * 52 * 4;\\n\\n    address internal initializer;\\n    address public team;\\n    address public pendingTeam;\\n    uint256 public teamRate;\\n    uint256 public constant MAX_TEAM_RATE = 50; // 5% max\\n\\n    event Mint(\\n        address indexed sender,\\n        uint256 weekly,\\n        uint256 circulating_supply,\\n        uint256 circulating_emission\\n    );\\n\\n    constructor(\\n        address __voter, // the voting & distribution system\\n        address __ve, // the ve(3,3) system that will be locked into\\n        address __rewards_distributor // the distribution system that ensures users aren't diluted\\n    ) {\\n        initializer = msg.sender;\\n        team = msg.sender;\\n        teamRate = 30; // 30 bps = 3%\\n        _flow = IFlow(IVotingEscrow(__ve).token());\\n        _voter = IVoter(__voter);\\n        _ve = IVotingEscrow(__ve);\\n        _rewards_distributor = IRewardsDistributor(__rewards_distributor);\\n        active_period = ((block.timestamp + (2 * WEEK)) / WEEK) * WEEK;\\n    }\\n\\n    function initialize(\\n        address[] memory claimants, // partnerAddrs\\n        uint256[] memory amounts, // partnerAmounts\\n        uint256 max // sum amounts / max = % ownership of top protocols, so if initial 20m is distributed, and target is 25% protocol ownership, then max - 4 x 20m = 80m\\n    ) external {\\n        require(initializer == msg.sender);\\n        _flow.mint(address(this), max);\\n        _flow.approve(address(_ve), type(uint256).max);\\n        for (uint256 i = 0; i < claimants.length; i++) {\\n            _ve.create_lock_for(amounts[i], LOCK, claimants[i]);\\n        }\\n        initializer = address(0);\\n        active_period = ((block.timestamp) / WEEK) * WEEK; // allow minter.update_period() to mint new emissions THIS Thursday\\n    }\\n\\n    function setTeam(address _team) external {\\n        require(msg.sender == team, \\\"not team\\\");\\n        pendingTeam = _team;\\n    }\\n\\n    function acceptTeam() external {\\n        require(msg.sender == pendingTeam, \\\"not pending team\\\");\\n        team = pendingTeam;\\n    }\\n\\n    function setTeamRate(uint256 _teamRate) external {\\n        require(msg.sender == team, \\\"not team\\\");\\n        require(_teamRate <= MAX_TEAM_RATE, \\\"rate too high\\\");\\n        teamRate = _teamRate;\\n    }\\n\\n    // calculate circulating supply as total token supply - locked supply\\n    function circulating_supply() public view returns (uint256) {\\n        return _flow.totalSupply() - _ve.totalSupply();\\n    }\\n\\n    // emission calculation is 1% of available supply to mint adjusted by circulating / total supply\\n    function calculate_emission() public view returns (uint256) {\\n        return (weekly * EMISSION) / PRECISION;\\n    }\\n\\n    // weekly emission takes the max of calculated (aka target) emission versus circulating tail end emission\\n    function weekly_emission() public view returns (uint256) {\\n        return Math.max(calculate_emission(), circulating_emission());\\n    }\\n\\n    // calculates tail end (infinity) emissions as 0.2% of total supply\\n    function circulating_emission() public view returns (uint256) {\\n        return (circulating_supply() * TAIL_EMISSION) / PRECISION;\\n    }\\n\\n    // calculate inflation and adjust ve balances accordingly\\n    function calculate_growth(uint256 _minted) public view returns (uint256) {\\n        uint256 _veTotal = _ve.totalSupply();\\n        uint256 _flowTotal = _flow.totalSupply();\\n        return\\n            (((((_minted * _veTotal) / _flowTotal) * _veTotal) / _flowTotal) *\\n                _veTotal) /\\n            _flowTotal /\\n            2;\\n    }\\n\\n    // update period can only be called once per cycle (1 week)\\n    function update_period() external returns (uint256) {\\n        uint256 _period = active_period;\\n        if (block.timestamp >= _period + WEEK && initializer == address(0)) {\\n            // only trigger if new week\\n            _period = (block.timestamp / WEEK) * WEEK;\\n            active_period = _period;\\n            weekly = weekly_emission();\\n\\n            uint256 _growth = calculate_growth(weekly);\\n            uint256 _teamEmissions = (teamRate * (_growth + weekly)) /\\n                (PRECISION - teamRate);\\n            uint256 _required = _growth + weekly + _teamEmissions;\\n            uint256 _balanceOf = _flow.balanceOf(address(this));\\n            if (_balanceOf < _required) {\\n                _flow.mint(address(this), _required - _balanceOf);\\n            }\\n\\n            require(_flow.transfer(team, _teamEmissions));\\n            require(_flow.transfer(address(_rewards_distributor), _growth));\\n            _rewards_distributor.checkpoint_token(); // checkpoint token balance that was just minted in rewards distributor\\n            _rewards_distributor.checkpoint_total_supply(); // checkpoint supply\\n\\n            _flow.approve(address(_voter), weekly);\\n            _voter.notifyRewardAmount(weekly);\\n\\n            emit Mint(\\n                msg.sender,\\n                weekly,\\n                circulating_supply(),\\n                circulating_emission()\\n            );\\n        }\\n        return _period;\\n    }\\n}\\n\",\"keccak256\":\"0x727eea05351dc27cf7dec9d1dd31ea84bfdff68f0cfd20f94c5db9770f7b849e\",\"license\":\"MIT\"},\"contracts/interfaces/IFlow.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IFlow {\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address, uint) external returns (bool);\\n    function transferFrom(address,address,uint) external returns (bool);\\n    function mint(address, uint) external returns (bool);\\n    function minter() external returns (address);\\n    function claim(address, uint) external returns (bool);\\n}\\n\",\"keccak256\":\"0x957c4997b5ac464df3484317f7526b8425008684147ab08af5e4bd10d5a60d8d\"},\"contracts/interfaces/IMinter.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IMinter {\\n    function update_period() external returns (uint);\\n}\\n\",\"keccak256\":\"0x22a493b7559b31b779773d0279189161af0d6c0e741d470fd7a8afdf91558304\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IRewardsDistributor {\\n    function checkpoint_token() external;\\n    function checkpoint_total_supply() external;\\n}\\n\",\"keccak256\":\"0x34c330b70b2b8847a6afce921a69eed82d1ecb3d2a0ee61401619a7b28e69243\"},\"contracts/interfaces/IVoter.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IVoter {\\n    function _ve() external view returns (address);\\n    function governor() external view returns (address);\\n    function emergencyCouncil() external view returns (address);\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n    function emitDeposit(uint _tokenId, address account, uint amount) external;\\n    function emitWithdraw(uint _tokenId, address account, uint amount) external;\\n    function isWhitelisted(address token) external view returns (bool);\\n    function notifyRewardAmount(uint amount) external;\\n    function distribute(address _gauge) external;\\n}\\n\",\"keccak256\":\"0x033115b88f156c6db67ca468fc9da8e4197bbd48bc8cf5a1652b9ebd307b2d31\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IVotingEscrow {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    function token() external view returns (address);\\n    function team() external returns (address);\\n    function epoch() external view returns (uint);\\n    function point_history(uint loc) external view returns (Point memory);\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n    function transferFrom(address, address, uint) external;\\n\\n    function voting(uint tokenId) external;\\n    function abstain(uint tokenId) external;\\n    function attach(uint tokenId) external;\\n    function detach(uint tokenId) external;\\n\\n    function checkpoint() external;\\n    function deposit_for(uint tokenId, uint value) external;\\n    function create_lock_for(uint, uint, address) external returns (uint);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x9c51afef11e82c70d08871264602e385a4f7caf36383e1bc5a6c214f93a4c0d1\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3546b156d97633f7f8cad536d5454c81d1d604687c02b2eb105fdc33cb962b41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040526a0c685fa11e01ec6f0000006000553480156200002157600080fd5b506040516200158838038062001588833981016040819052620000449162000156565b60028054336001600160a01b03199182168117909255600380549091169091179055601e60055560408051637e062a3560e11b815290516001600160a01b0384169163fc0c546a9160048083019260209291908290030181865afa158015620000b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d79190620001a0565b6001600160a01b0390811660805283811660a05282811660c052811660e05262093a808062000108816002620001db565b620001149042620001fd565b62000120919062000218565b6200012c9190620001db565b600155506200023b915050565b80516001600160a01b03811681146200015157600080fd5b919050565b6000806000606084860312156200016c57600080fd5b620001778462000139565b9250620001876020850162000139565b9150620001976040850162000139565b90509250925092565b600060208284031215620001b357600080fd5b620001be8262000139565b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615620001f857620001f8620001c5565b500290565b60008219821115620002135762000213620001c5565b500190565b6000826200023657634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e051611295620002f3600039600081816101d101528181610c3701528181610cde0152610d5101526000818161023a015281816104b30152818161055f01528181610689015261087501526000818161019201528181610e090152610ea301526000818161029d01528181610426015281816104e30152818161070f015281816108f701528181610a5f01528181610ade01528181610ba801528181610c660152610dda01526112956000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806385170813116100ad578063cfc6c8ff11610071578063cfc6c8ff14610277578063d13996081461027f578063e038c75a14610288578063ed29fc1114610290578063fe75cac51461029857600080fd5b8063851708131461020f57806385f2aef2146102225780638dd598fb146102355780638e01fbfa1461025c578063b5cc143a1461026f57600080fd5b806336d96faf116100f457806336d96faf146101855780633db9b42a1461018d5780634b1cd5da146101cc57806359d46ffc146101f357806378ef7f021461020657600080fd5b806301c8e6fd14610131578063095cf5c61461014c5780631eebae801461016157806326cfc17b146101695780632e8f7b1f14610172575b600080fd5b610139603281565b6040519081526020015b60405180910390f35b61015f61015a366004610f9c565b6102bf565b005b61013961032b565b61013960005481565b61015f610180366004610fb7565b610353565b6101396103de565b6101b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610143565b6101b47f000000000000000000000000000000000000000000000000000000000000000081565b6004546101b4906001600160a01b031681565b61013960055481565b61015f61021d3660046110a6565b6103f3565b6003546101b4906001600160a01b031681565b6101b47f000000000000000000000000000000000000000000000000000000000000000081565b61013961026a366004610fb7565b610684565b61015f6107e6565b610139610857565b61013960015481565b610139610871565b610139610981565b6101b47f000000000000000000000000000000000000000000000000000000000000000081565b6003546001600160a01b031633146103095760405162461bcd60e51b81526020600482015260086024820152676e6f74207465616d60c01b60448201526064015b60405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60006103e8600261033a610871565b6103449190611185565b61034e91906111a4565b905090565b6003546001600160a01b031633146103985760405162461bcd60e51b81526020600482015260086024820152676e6f74207465616d60c01b6044820152606401610300565b60328111156103d95760405162461bcd60e51b815260206004820152600d60248201526c0e4c2e8ca40e8dede40d0d2ced609b1b6044820152606401610300565b600555565b60006103e86103de6000546103449190611185565b6002546001600160a01b0316331461040a57600080fd5b6040516340c10f1960e01b8152306004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f19906044016020604051808303816000875af1158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b91906111c6565b5060405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af115801561052c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055091906111c6565b5060005b8351811015610653577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d4e54c3b84838151811061059e5761059e6111e8565b602002602001015163077f88008785815181106105bd576105bd6111e8565b60200260200101516040518463ffffffff1660e01b81526004016105fd9392919092835260208301919091526001600160a01b0316604082015260600190565b6020604051808303816000875af115801561061c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064091906111fe565b508061064b81611217565b915050610554565b50600280546001600160a01b031916905562093a8061067281426111a4565b61067c9190611185565b600155505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070991906111fe565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f91906111fe565b9050600281838181816107a2828b611185565b6107ac91906111a4565b6107b69190611185565b6107c091906111a4565b6107ca9190611185565b6107d491906111a4565b6107de91906111a4565b949350505050565b6004546001600160a01b031633146108335760405162461bcd60e51b815260206004820152601060248201526f6e6f742070656e64696e67207465616d60801b6044820152606401610300565b600454600380546001600160a01b0319166001600160a01b03909216919091179055565b600061034e6108646103de565b61086c61032b565b610f6d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f591906111fe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097791906111fe565b61034e9190611230565b60015460009061099462093a8082611247565b42101580156109ac57506002546001600160a01b0316155b15610f685762093a806109bf81426111a4565b6109c99190611185565b600181905590506109d8610857565b6000818155906109e790610684565b905060006005546103e86109fb9190611230565b600054610a089084611247565b600554610a159190611185565b610a1f91906111a4565b905060008160005484610a329190611247565b610a3c9190611247565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aca91906111fe565b905081811015610b7f576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166340c10f1930610b0e8486611230565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7d91906111c6565b505b60035460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1791906111c6565b610c2057600080fd5b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd391906111c6565b610cdc57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663811a40fe6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d3757600080fd5b505af1158015610d4b573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b21ed5026040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610daa57600080fd5b505af1158015610dbe573d6000803e3d6000fd5b505060005460405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063095ea7b39250610e45917f0000000000000000000000000000000000000000000000000000000000000000916004016001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8891906111c6565b50600054604051633c6b16ab60e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633c6b16ab90602401600060405180830381600087803b158015610eef57600080fd5b505af1158015610f03573d6000803e3d6000fd5b50505050336001600160a01b03167fb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb600054610f3d610871565b610f4561032b565b6040805193845260208401929092529082015260600160405180910390a2505050505b919050565b6000818311610f7c5781610f7e565b825b9392505050565b80356001600160a01b0381168114610f6857600080fd5b600060208284031215610fae57600080fd5b610f7e82610f85565b600060208284031215610fc957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561100f5761100f610fd0565b604052919050565b600067ffffffffffffffff82111561103157611031610fd0565b5060051b60200190565b600082601f83011261104c57600080fd5b8135602061106161105c83611017565b610fe6565b82815260059290921b8401810191818101908684111561108057600080fd5b8286015b8481101561109b5780358352918301918301611084565b509695505050505050565b6000806000606084860312156110bb57600080fd5b833567ffffffffffffffff808211156110d357600080fd5b818601915086601f8301126110e757600080fd5b813560206110f761105c83611017565b82815260059290921b8401810191818101908a84111561111657600080fd5b948201945b8386101561113b5761112c86610f85565b8252948201949082019061111b565b9750508701359250508082111561115157600080fd5b5061115e8682870161103b565b925050604084013590509250925092565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561119f5761119f61116f565b500290565b6000826111c157634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156111d857600080fd5b81518015158114610f7e57600080fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561121057600080fd5b5051919050565b6000600182016112295761122961116f565b5060010190565b6000828210156112425761124261116f565b500390565b6000821982111561125a5761125a61116f565b50019056fea26469706673582212208bc003ee39b765b48d66a36d4a2baae464b369a0037feb8b7982ba6c0ef980c164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806385170813116100ad578063cfc6c8ff11610071578063cfc6c8ff14610277578063d13996081461027f578063e038c75a14610288578063ed29fc1114610290578063fe75cac51461029857600080fd5b8063851708131461020f57806385f2aef2146102225780638dd598fb146102355780638e01fbfa1461025c578063b5cc143a1461026f57600080fd5b806336d96faf116100f457806336d96faf146101855780633db9b42a1461018d5780634b1cd5da146101cc57806359d46ffc146101f357806378ef7f021461020657600080fd5b806301c8e6fd14610131578063095cf5c61461014c5780631eebae801461016157806326cfc17b146101695780632e8f7b1f14610172575b600080fd5b610139603281565b6040519081526020015b60405180910390f35b61015f61015a366004610f9c565b6102bf565b005b61013961032b565b61013960005481565b61015f610180366004610fb7565b610353565b6101396103de565b6101b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610143565b6101b47f000000000000000000000000000000000000000000000000000000000000000081565b6004546101b4906001600160a01b031681565b61013960055481565b61015f61021d3660046110a6565b6103f3565b6003546101b4906001600160a01b031681565b6101b47f000000000000000000000000000000000000000000000000000000000000000081565b61013961026a366004610fb7565b610684565b61015f6107e6565b610139610857565b61013960015481565b610139610871565b610139610981565b6101b47f000000000000000000000000000000000000000000000000000000000000000081565b6003546001600160a01b031633146103095760405162461bcd60e51b81526020600482015260086024820152676e6f74207465616d60c01b60448201526064015b60405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60006103e8600261033a610871565b6103449190611185565b61034e91906111a4565b905090565b6003546001600160a01b031633146103985760405162461bcd60e51b81526020600482015260086024820152676e6f74207465616d60c01b6044820152606401610300565b60328111156103d95760405162461bcd60e51b815260206004820152600d60248201526c0e4c2e8ca40e8dede40d0d2ced609b1b6044820152606401610300565b600555565b60006103e86103de6000546103449190611185565b6002546001600160a01b0316331461040a57600080fd5b6040516340c10f1960e01b8152306004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f19906044016020604051808303816000875af1158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b91906111c6565b5060405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af115801561052c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055091906111c6565b5060005b8351811015610653577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d4e54c3b84838151811061059e5761059e6111e8565b602002602001015163077f88008785815181106105bd576105bd6111e8565b60200260200101516040518463ffffffff1660e01b81526004016105fd9392919092835260208301919091526001600160a01b0316604082015260600190565b6020604051808303816000875af115801561061c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064091906111fe565b508061064b81611217565b915050610554565b50600280546001600160a01b031916905562093a8061067281426111a4565b61067c9190611185565b600155505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070991906111fe565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f91906111fe565b9050600281838181816107a2828b611185565b6107ac91906111a4565b6107b69190611185565b6107c091906111a4565b6107ca9190611185565b6107d491906111a4565b6107de91906111a4565b949350505050565b6004546001600160a01b031633146108335760405162461bcd60e51b815260206004820152601060248201526f6e6f742070656e64696e67207465616d60801b6044820152606401610300565b600454600380546001600160a01b0319166001600160a01b03909216919091179055565b600061034e6108646103de565b61086c61032b565b610f6d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f591906111fe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097791906111fe565b61034e9190611230565b60015460009061099462093a8082611247565b42101580156109ac57506002546001600160a01b0316155b15610f685762093a806109bf81426111a4565b6109c99190611185565b600181905590506109d8610857565b6000818155906109e790610684565b905060006005546103e86109fb9190611230565b600054610a089084611247565b600554610a159190611185565b610a1f91906111a4565b905060008160005484610a329190611247565b610a3c9190611247565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aca91906111fe565b905081811015610b7f576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166340c10f1930610b0e8486611230565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7d91906111c6565b505b60035460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1791906111c6565b610c2057600080fd5b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd391906111c6565b610cdc57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663811a40fe6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d3757600080fd5b505af1158015610d4b573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b21ed5026040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610daa57600080fd5b505af1158015610dbe573d6000803e3d6000fd5b505060005460405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063095ea7b39250610e45917f0000000000000000000000000000000000000000000000000000000000000000916004016001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8891906111c6565b50600054604051633c6b16ab60e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633c6b16ab90602401600060405180830381600087803b158015610eef57600080fd5b505af1158015610f03573d6000803e3d6000fd5b50505050336001600160a01b03167fb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb600054610f3d610871565b610f4561032b565b6040805193845260208401929092529082015260600160405180910390a2505050505b919050565b6000818311610f7c5781610f7e565b825b9392505050565b80356001600160a01b0381168114610f6857600080fd5b600060208284031215610fae57600080fd5b610f7e82610f85565b600060208284031215610fc957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561100f5761100f610fd0565b604052919050565b600067ffffffffffffffff82111561103157611031610fd0565b5060051b60200190565b600082601f83011261104c57600080fd5b8135602061106161105c83611017565b610fe6565b82815260059290921b8401810191818101908684111561108057600080fd5b8286015b8481101561109b5780358352918301918301611084565b509695505050505050565b6000806000606084860312156110bb57600080fd5b833567ffffffffffffffff808211156110d357600080fd5b818601915086601f8301126110e757600080fd5b813560206110f761105c83611017565b82815260059290921b8401810191818101908a84111561111657600080fd5b948201945b8386101561113b5761112c86610f85565b8252948201949082019061111b565b9750508701359250508082111561115157600080fd5b5061115e8682870161103b565b925050604084013590509250925092565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561119f5761119f61116f565b500290565b6000826111c157634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156111d857600080fd5b81518015158114610f7e57600080fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561121057600080fd5b5051919050565b6000600182016112295761122961116f565b5060010190565b6000828210156112425761124261116f565b500390565b6000821982111561125a5761125a61116f565b50019056fea26469706673582212208bc003ee39b765b48d66a36d4a2baae464b369a0037feb8b7982ba6c0ef980c164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6699,
        "contract": "contracts/Minter.sol:Minter",
        "label": "weekly",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6701,
        "contract": "contracts/Minter.sol:Minter",
        "label": "active_period",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6712,
        "contract": "contracts/Minter.sol:Minter",
        "label": "initializer",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6714,
        "contract": "contracts/Minter.sol:Minter",
        "label": "team",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6716,
        "contract": "contracts/Minter.sol:Minter",
        "label": "pendingTeam",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6718,
        "contract": "contracts/Minter.sol:Minter",
        "label": "teamRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}