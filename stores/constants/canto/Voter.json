{
  "address": "0xC5B58aE761a77fF16d548dE9b42933c8FBfe4c33",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__ve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauges",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bribes",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedxbribefactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "Abstained",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Attach",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Detach",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributeReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "internal_bribe",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "external_bribe",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wxbribe",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "GaugeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        }
      ],
      "name": "GaugeKilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        }
      ],
      "name": "GaugeRevived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotifyReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whitelister",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Whitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_ve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "attachTokenToGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bribefactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_fees",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "createGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "detachTokenFromGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finish",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "distributeFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distro",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyCouncil",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emitDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emitWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "external_bribes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugefactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gauges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "internal_bribes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAlive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isGauge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "killGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastVoted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "length",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "poke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolForGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolVote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "reviveGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_council",
          "type": "address"
        }
      ],
      "name": "setEmergencyCouncil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "setGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "updateFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "updateForRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "updateGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_poolVote",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "weights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedxbribefactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbad62622f3d3518c760b610da9799e96dba23fe62d9f1c32291172f0115c17c4",
  "receipt": {
    "to": null,
    "from": "0x53f3B51FD7F327E1Ec4E6eAa3A049149cB2acaD2",
    "contractAddress": "0xC5B58aE761a77fF16d548dE9b42933c8FBfe4c33",
    "transactionIndex": 0,
    "gasUsed": "3422836",
    "logsBloom": "0x
    "blockHash": "0x169d5630f48e70d6721e7273bd792038fbb4daf76d524c57c7d5df64083b61d8",
    "transactionHash": "0xbad62622f3d3518c760b610da9799e96dba23fe62d9f1c32291172f0115c17c4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2975089,
        "transactionHash": "0xbad62622f3d3518c760b610da9799e96dba23fe62d9f1c32291172f0115c17c4",
        "address": "0xEcf044C5B4b867CFda001101c617eCd347095B44",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000a178469e3d08beaa0a289e416ab924f10807989",
          "0x00000000000000000000000000000000000000000000000000000000000000d0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x169d5630f48e70d6721e7273bd792038fbb4daf76d524c57c7d5df64083b61d8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2975089,
        "transactionHash": "0xbad62622f3d3518c760b610da9799e96dba23fe62d9f1c32291172f0115c17c4",
        "address": "0xEcf044C5B4b867CFda001101c617eCd347095B44",
        "topics": [
          "0xcc0bec1447060c88cdc5a739cf29cfa26c453574dd3f5b9e4dcc317d6401cb1c"
        ],
        "data": "0x000000000000000000000000c5b58ae761a77ff16d548de9b42933c8fbfe4c330000000000000000000000000a178469e3d08beaa0a289e416ab924f1080798900000000000000000000000000000000000000000000000000000000000000d0",
        "logIndex": 1,
        "blockHash": "0x169d5630f48e70d6721e7273bd792038fbb4daf76d524c57c7d5df64083b61d8"
      }
    ],
    "blockNumber": 2975089,
    "cumulativeGasUsed": "3422836",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x990efF367C6c4aece43c1E98099061c897730F27",
    "0xb12aF64E128A1D4489D13314eB4Df81cBCE126aC",
    "0xA472b00DdCf03f099dB954c70133dD6F0c5Fcc26",
    "0xa9fa811Cc3BDdF9ba8dAC435f26B77525Eb3B546",
    "0x3a9238141a4655d0dC907e18BBf9c21b843F09c7"
  ],
  "numDeployments": 1,
  "solcInputHash": "35e0ac8ae47caef0caca6801c152e6fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauges\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribes\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedxbribefactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Abstained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Attach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Detach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"internal_bribe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"external_bribe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wxbribe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"GaugeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"GaugeKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"GaugeRevived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"attachTokenToGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribefactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fees\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"detachTokenFromGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distro\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyCouncil\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"external_bribes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugefactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"internal_bribes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGauge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"killGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastVoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolForGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"reviveGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_council\",\"type\":\"address\"}],\"name\":\"setEmergencyCouncil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"updateFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"updateForRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"updateGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_poolVote\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedxbribefactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voter.sol\":\"Voter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363736353439383830373835\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\nimport \\\"contracts/interfaces/IPair.sol\\\";\\nimport \\\"contracts/interfaces/IPairCallee.sol\\\";\\nimport \\\"contracts/factories/PairFactory.sol\\\";\\nimport \\\"contracts/PairFees.sol\\\";\\n\\nimport \\\"contracts/interfaces/IBribe.sol\\\";\\nimport \\\"contracts/interfaces/ITurnstile.sol\\\";\\n\\n// The base pair of pools, either stable or volatile\\ncontract Pair is IPair {\\n    address internal multisig = 0x0a178469E3d08BEAA0a289E416Ab924F10807989;\\n    address internal turnstile = 0xEcf044C5B4b867CFda001101c617eCd347095B44;\\n    string public name;\\n    string public symbol;\\n    uint8 public constant decimals = 18;\\n\\n    // Used to denote stable or volatile pair, not immutable since construction happens in the initialize method for CREATE2 deterministic addresses\\n    bool public immutable stable;\\n\\n    uint256 public totalSupply = 0;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    mapping(address => uint256) public balanceOf;\\n\\n    bytes32 internal DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 internal constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    uint256 internal constant MINIMUM_LIQUIDITY = 10 ** 3;\\n\\n    address public immutable token0;\\n    address public immutable token1;\\n    address public immutable fees;\\n    address immutable factory; // explain this? can this be public? can I call this from inside a contract\\n    address public externalBribe;\\n    address public immutable voter;\\n    address public immutable tank;\\n    bool public hasGauge;\\n\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint256 timestamp;\\n        uint256 reserve0Cumulative;\\n        uint256 reserve1Cumulative;\\n    }\\n\\n    // Capture oracle reading every 30 minutes\\n    uint256 constant periodSize = 1800;\\n\\n    Observation[] public observations;\\n\\n    uint256 internal immutable decimals0;\\n    uint256 internal immutable decimals1;\\n\\n    uint256 public reserve0;\\n    uint256 public reserve1;\\n    uint256 public blockTimestampLast;\\n\\n    uint256 public reserve0CumulativeLast;\\n    uint256 public reserve1CumulativeLast;\\n\\n    // index0 and index1 are used to accumulate fees, this is split out from normal trades to keep the swap \\\"clean\\\"\\n    // this further allows LP holders to easily claim fees for tokens they have/staked\\n    uint256 public index0 = 0;\\n    uint256 public index1 = 0;\\n\\n    // position assigned to each LP to track their current index0 & index1 vs the global position\\n    mapping(address => uint256) public supplyIndex0;\\n    mapping(address => uint256) public supplyIndex1;\\n\\n    // tracks the amount of unclaimed, but claimable tokens off of fees for token0 and token1\\n    mapping(address => uint256) public claimable0;\\n    mapping(address => uint256) public claimable1;\\n\\n    event Fees(address indexed sender, uint256 amount0, uint256 amount1);\\n    event TankFees(address indexed token, uint256 amount0, address tank);\\n    event GaugeFees(address indexed token, uint256 amount0, address externalBribe);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint256 reserve0, uint256 reserve1);\\n    event Claim(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    constructor() {\\n        factory = msg.sender;\\n        voter = PairFactory(msg.sender).voter(); // nice easy way to add the voter :) we already getting this from pair factory tho\\n        tank = PairFactory(msg.sender).tank(); // nice easy way to add the voter :) we already getting this from pair factory tho\\n        (address _token0, address _token1, bool _stable) = PairFactory(msg.sender).getInitializable(); //wondering why msg.sender is passed here??\\n        (token0, token1, stable) = (_token0, _token1, _stable);\\n        fees = address(new PairFees(_token0, _token1));\\n        //     externalBribe = address();  this does not need to be set at the time of creation\\n        if (_stable) {\\n            name = string(abi.encodePacked(\\\"StableV1 AMM - \\\", IERC20(_token0).symbol(), \\\"/\\\", IERC20(_token1).symbol()));\\n            symbol = string(abi.encodePacked(\\\"sAMM-\\\", IERC20(_token0).symbol(), \\\"/\\\", IERC20(_token1).symbol()));\\n        } else {\\n            name =\\n                string(abi.encodePacked(\\\"VolatileV1 AMM - \\\", IERC20(_token0).symbol(), \\\"/\\\", IERC20(_token1).symbol()));\\n            symbol = string(abi.encodePacked(\\\"vAMM-\\\", IERC20(_token0).symbol(), \\\"/\\\", IERC20(_token1).symbol()));\\n        }\\n\\n        decimals0 = 10 ** IERC20(_token0).decimals();\\n        decimals1 = 10 ** IERC20(_token1).decimals();\\n\\n        observations.push(Observation(block.timestamp, 0, 0));\\n\\n        ITurnstile(turnstile).register(multisig);\\n    }\\n\\n    // simple re-entrancy check\\n    uint256 internal _unlocked = 1;\\n\\n    modifier lock() {\\n        require(_unlocked == 1);\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n\\n    function _safeApprove(address token, address spender, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, spender, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function setExternalBribe(address _externalBribe) external {\\n        require(msg.sender == voter, \\\"Only voter can set external bribe\\\");\\n        externalBribe = _externalBribe;\\n        _safeApprove(token0, externalBribe, type(uint256).max);\\n        _safeApprove(token1, externalBribe, type(uint256).max);\\n        // _safeApprove(token0, externalBribe, amount);\\n    }\\n\\n    function setHasGauge(bool value) external {\\n        require(msg.sender == voter, \\\"Only voter can set has gauge\\\");\\n        hasGauge = value;\\n    }\\n\\n    function observationLength() external view returns (uint256) {\\n        return observations.length;\\n    }\\n\\n    function lastObservation() public view returns (Observation memory) {\\n        return observations[observations.length - 1];\\n    }\\n\\n    function metadata()\\n        external\\n        view\\n        returns (uint256 dec0, uint256 dec1, uint256 r0, uint256 r1, bool st, address t0, address t1)\\n    {\\n        return (decimals0, decimals1, reserve0, reserve1, stable, token0, token1);\\n    }\\n\\n    function tokens() external view returns (address, address) {\\n        return (token0, token1);\\n    }\\n\\n    // claim accumulated but unclaimed fees (viewable via claimable0 and claimable1)\\n    function claimFees() external returns (uint256 claimed0, uint256 claimed1) {\\n        _updateFor(msg.sender);\\n\\n        claimed0 = claimable0[msg.sender];\\n        claimed1 = claimable1[msg.sender];\\n\\n        if (claimed0 > 0 || claimed1 > 0) {\\n            claimable0[msg.sender] = 0;\\n            claimable1[msg.sender] = 0;\\n\\n            PairFees(fees).claimFeesFor(msg.sender, claimed0, claimed1);\\n\\n            emit Claim(msg.sender, msg.sender, claimed0, claimed1);\\n        }\\n    }\\n\\n    // dunks update0\\n\\n    // Accrue fees on token0\\n    // function _update0(uint256 amount) internal {\\n    //     _safeTransfer(token0, fees, amount); // transfer the fees out to PairFees\\n    //     uint256 _ratio = (amount * 1e18) / totalSupply; // 1e18 adjustment is removed during claim\\n    //     if (_ratio > 0) {\\n    //         index0 += _ratio;\\n    //     }\\n    //     emit Fees(msg.sender, amount, 0);\\n    // }\\n\\n    // // Accrue fees on token1\\n    // function _update1(uint256 amount) internal {\\n    //     _safeTransfer(token1, fees, amount);\\n    //     uint256 _ratio = (amount * 1e18) / totalSupply;\\n    //     if (_ratio > 0) {\\n    //         index1 += _ratio;\\n    //     }\\n    //     emit Fees(msg.sender, 0, amount);\\n    // }\\n\\n    // Accrue fees on token0.\\n    function _update0(uint256 amount) internal {\\n        if (hasGauge == false) {\\n            _safeTransfer(token0, tank, amount); // transfer the fees to tank MSig for gaugeless LPs\\n            uint256 _ratio = (amount * 1e18) / totalSupply; // 1e18 adjustment is removed during claim\\n            if (_ratio > 0) {\\n                index0 += _ratio;\\n            }\\n            emit TankFees(token0, amount, tank);\\n        }\\n        if (hasGauge == true) {\\n            // _safeApprove(token0, externalBribe, amount);  // max abprove when setExternalBribe() is called\\n            IBribe(externalBribe).notifyRewardAmount(token0, amount); //transfer fees to exBribes\\n            //  _safeTransfer(token0, tank, amount);\\n            uint256 _ratio = (amount * 1e18) / totalSupply; // 1e18 adjustment is removed during claim\\n            if (_ratio > 0) {\\n                index0 += _ratio;\\n            }\\n            emit GaugeFees(token0, amount, externalBribe);\\n        }\\n    }\\n\\n    // Accrue fees on token1\\n    function _update1(uint256 amount) internal {\\n        if (hasGauge == false) {\\n            _safeTransfer(token1, tank, amount); // transfer the fees to tank MSig for gaugeless LPs\\n            uint256 _ratio = (amount * 1e18) / totalSupply; // 1e18 adjustment is removed during claim\\n            if (_ratio > 0) {\\n                index0 += _ratio;\\n            }\\n            emit TankFees(token1, amount, tank);\\n        }\\n        if (hasGauge == true) {\\n            //there is no interface for external bribe so this errors\\n            // _safeApprove(token1, externalBribe, amount); // we do this once above\\n            IBribe(externalBribe).notifyRewardAmount(token1, amount); //transfer fees to exBribes\\n            uint256 _ratio = (amount * 1e18) / totalSupply; // 1e18 adjustment is removed during claim\\n            if (_ratio > 0) {\\n                index0 += _ratio;\\n            }\\n            emit GaugeFees(token1, amount, externalBribe);\\n        }\\n    }\\n\\n    // this function MUST be called on any balance changes, otherwise can be used to infinitely claim fees\\n    // Fees are segregated from core funds, so fees can never put liquidity at risk\\n    function _updateFor(address recipient) internal {\\n        uint256 _supplied = balanceOf[recipient]; // get LP balance of `recipient`\\n        if (_supplied > 0) {\\n            uint256 _supplyIndex0 = supplyIndex0[recipient]; // get last adjusted index0 for recipient\\n            uint256 _supplyIndex1 = supplyIndex1[recipient];\\n            uint256 _index0 = index0; // get global index0 for accumulated fees\\n            uint256 _index1 = index1;\\n            supplyIndex0[recipient] = _index0; // update user current position to global position\\n            supplyIndex1[recipient] = _index1;\\n            uint256 _delta0 = _index0 - _supplyIndex0; // see if there is any difference that need to be accrued\\n            uint256 _delta1 = _index1 - _supplyIndex1;\\n            if (_delta0 > 0) {\\n                uint256 _share = (_supplied * _delta0) / 1e18; // add accrued difference for each supplied token\\n                claimable0[recipient] += _share;\\n            }\\n            if (_delta1 > 0) {\\n                uint256 _share = (_supplied * _delta1) / 1e18;\\n                claimable1[recipient] += _share;\\n            }\\n        } else {\\n            supplyIndex0[recipient] = index0; // new users are set to the default global state\\n            supplyIndex1[recipient] = index1;\\n        }\\n    }\\n\\n    function getReserves() public view returns (uint256 _reserve0, uint256 _reserve1, uint256 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint256 balance0, uint256 balance1, uint256 _reserve0, uint256 _reserve1) internal {\\n        uint256 blockTimestamp = block.timestamp;\\n        uint256 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            reserve0CumulativeLast += _reserve0 * timeElapsed;\\n            reserve1CumulativeLast += _reserve1 * timeElapsed;\\n        }\\n\\n        Observation memory _point = lastObservation();\\n        timeElapsed = blockTimestamp - _point.timestamp; // compare the last observation with current timestamp, if greater than 30 minutes, record a new event\\n        if (timeElapsed > periodSize) {\\n            observations.push(Observation(blockTimestamp, reserve0CumulativeLast, reserve1CumulativeLast));\\n        }\\n        reserve0 = balance0;\\n        reserve1 = balance1;\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices()\\n        public\\n        view\\n        returns (uint256 reserve0Cumulative, uint256 reserve1Cumulative, uint256 blockTimestamp)\\n    {\\n        blockTimestamp = block.timestamp;\\n        reserve0Cumulative = reserve0CumulativeLast;\\n        reserve1Cumulative = reserve1CumulativeLast;\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint256 _reserve0, uint256 _reserve1, uint256 _blockTimestampLast) = getReserves();\\n        if (_blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint256 timeElapsed = blockTimestamp - _blockTimestampLast;\\n            reserve0Cumulative += _reserve0 * timeElapsed;\\n            reserve1Cumulative += _reserve1 * timeElapsed;\\n        }\\n    }\\n\\n    // gives the current twap price measured from amountIn * tokenIn gives amountOut\\n    function current(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut) {\\n        Observation memory _observation = lastObservation();\\n        (uint256 reserve0Cumulative, uint256 reserve1Cumulative,) = currentCumulativePrices();\\n        if (block.timestamp == _observation.timestamp) {\\n            _observation = observations[observations.length - 2];\\n        }\\n\\n        uint256 timeElapsed = block.timestamp - _observation.timestamp;\\n        uint256 _reserve0 = (reserve0Cumulative - _observation.reserve0Cumulative) / timeElapsed;\\n        uint256 _reserve1 = (reserve1Cumulative - _observation.reserve1Cumulative) / timeElapsed;\\n        amountOut = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n    }\\n\\n    // as per `current`, however allows user configured granularity, up to the full window size\\n    function quote(address tokenIn, uint256 amountIn, uint256 granularity) external view returns (uint256 amountOut) {\\n        uint256[] memory _prices = sample(tokenIn, amountIn, granularity, 1);\\n        uint256 priceAverageCumulative;\\n        for (uint256 i = 0; i < _prices.length; i++) {\\n            priceAverageCumulative += _prices[i];\\n        }\\n        return priceAverageCumulative / granularity;\\n    }\\n\\n    // returns a memory set of twap prices\\n    function prices(address tokenIn, uint256 amountIn, uint256 points) external view returns (uint256[] memory) {\\n        return sample(tokenIn, amountIn, points, 1);\\n    }\\n\\n    function sample(address tokenIn, uint256 amountIn, uint256 points, uint256 window)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory _prices = new uint256[](points);\\n\\n        uint256 length = observations.length - 1;\\n        uint256 i = length - (points * window);\\n        uint256 nextIndex = 0;\\n        uint256 index = 0;\\n\\n        for (; i < length; i += window) {\\n            nextIndex = i + window;\\n            uint256 timeElapsed = observations[nextIndex].timestamp - observations[i].timestamp;\\n            uint256 _reserve0 =\\n                (observations[nextIndex].reserve0Cumulative - observations[i].reserve0Cumulative) / timeElapsed;\\n            uint256 _reserve1 =\\n                (observations[nextIndex].reserve1Cumulative - observations[i].reserve1Cumulative) / timeElapsed;\\n            _prices[index] = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n            // index < length; length cannot overflow\\n            unchecked {\\n                index = index + 1;\\n            }\\n        }\\n        return _prices;\\n    }\\n\\n    // this low-level function should be called by addLiquidity functions in Router.sol, which performs important safety checks\\n    // standard uniswap v2 implementation\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\\n        uint256 _balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 _balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 _amount0 = _balance0 - _reserve0;\\n        uint256 _amount1 = _balance1 - _reserve1;\\n\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(_amount0 * _amount1) - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min((_amount0 * _totalSupply) / _reserve0, (_amount1 * _totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, \\\"ILM\\\"); // Pair: INSUFFICIENT_LIQUIDITY_MINTED\\n        _mint(to, liquidity);\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, _amount0, _amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    // standard uniswap v2 implementation\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\\n        (address _token0, address _token1) = (token0, token1);\\n        uint256 _balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 _balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 _liquidity = balanceOf[address(this)];\\n\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = (_liquidity * _balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = (_liquidity * _balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"ILB\\\"); // Pair: INSUFFICIENT_LIQUIDITY_BURNED\\n        _burn(address(this), _liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        _balance0 = IERC20(_token0).balanceOf(address(this));\\n        _balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external lock {\\n        require(!PairFactory(factory).isPaused());\\n        require(amount0Out > 0 || amount1Out > 0, \\\"IOA\\\"); // Pair: INSUFFICIENT_OUTPUT_AMOUNT\\n        (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"IL\\\"); // Pair: INSUFFICIENT_LIQUIDITY\\n\\n        uint256 _balance0;\\n        uint256 _balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            (address _token0, address _token1) = (token0, token1);\\n            require(to != _token0 && to != _token1, \\\"IT\\\"); // Pair: INVALID_TO\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0) {\\n                IPairCallee(to).hook(msg.sender, amount0Out, amount1Out, data);\\n            } // callback, used for flash loans\\n            _balance0 = IERC20(_token0).balanceOf(address(this));\\n            _balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = _balance0 > _reserve0 - amount0Out ? _balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = _balance1 > _reserve1 - amount1Out ? _balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, \\\"IIA\\\"); // Pair: INSUFFICIENT_INPUT_AMOUNT\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            (address _token0, address _token1) = (token0, token1);\\n            if (amount0In > 0) {\\n                _update0((amount0In * PairFactory(factory).getFee(stable)) / 10000);\\n            } // accrue fees for token0 and move them out of pool\\n            if (amount1In > 0) {\\n                _update1((amount1In * PairFactory(factory).getFee(stable)) / 10000);\\n            } // accrue fees for token1 and move them out of pool\\n            _balance0 = IERC20(_token0).balanceOf(address(this)); // since we removed tokens, we need to reconfirm balances, can also simply use previous balance - amountIn/ 10000, but doing balanceOf again as safety check\\n            _balance1 = IERC20(_token1).balanceOf(address(this));\\n            // The curve, either x3y+y3x for stable pools, or x*y for volatile pools\\n            require(_k(_balance0, _balance1) >= _k(_reserve0, _reserve1), \\\"K\\\"); // Pair: K\\n        }\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        (address _token0, address _token1) = (token0, token1);\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)) - (reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)) - (reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n\\n    function _f(uint256 x0, uint256 y) internal pure returns (uint256) {\\n        return (x0 * ((((y * y) / 1e18) * y) / 1e18)) / 1e18 + (((((x0 * x0) / 1e18) * x0) / 1e18) * y) / 1e18;\\n    }\\n\\n    function _d(uint256 x0, uint256 y) internal pure returns (uint256) {\\n        return (3 * x0 * ((y * y) / 1e18)) / 1e18 + ((((x0 * x0) / 1e18) * x0) / 1e18);\\n    }\\n\\n    function _get_y(uint256 x0, uint256 xy, uint256 y) internal pure returns (uint256) {\\n        for (uint256 i = 0; i < 255; i++) {\\n            uint256 y_prev = y;\\n            uint256 k = _f(x0, y);\\n            if (k < xy) {\\n                uint256 dy = ((xy - k) * 1e18) / _d(x0, y);\\n                y = y + dy;\\n            } else {\\n                uint256 dy = ((k - xy) * 1e18) / _d(x0, y);\\n                y = y - dy;\\n            }\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    return y;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    return y;\\n                }\\n            }\\n        }\\n        return y;\\n    }\\n\\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256) {\\n        (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\\n        amountIn -= (amountIn * PairFactory(factory).getFee(stable)) / 10000; // remove fee from amount received\\n        return _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n    }\\n\\n    function _getAmountOut(uint256 amountIn, address tokenIn, uint256 _reserve0, uint256 _reserve1)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (stable) {\\n            uint256 xy = _k(_reserve0, _reserve1);\\n            _reserve0 = (_reserve0 * 1e18) / decimals0;\\n            _reserve1 = (_reserve1 * 1e18) / decimals1;\\n            (uint256 reserveA, uint256 reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n            amountIn = tokenIn == token0 ? (amountIn * 1e18) / decimals0 : (amountIn * 1e18) / decimals1;\\n            uint256 y = reserveB - _get_y(amountIn + reserveA, xy, reserveB);\\n            return (y * (tokenIn == token0 ? decimals1 : decimals0)) / 1e18;\\n        } else {\\n            (uint256 reserveA, uint256 reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n            return (amountIn * reserveB) / (reserveA + amountIn);\\n        }\\n    }\\n\\n    function _k(uint256 x, uint256 y) internal view returns (uint256) {\\n        if (stable) {\\n            uint256 _x = (x * 1e18) / decimals0;\\n            uint256 _y = (y * 1e18) / decimals1;\\n            uint256 _a = (_x * _y) / 1e18;\\n            uint256 _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\n            return (_a * _b) / 1e18; // x3y+y3x >= k\\n        } else {\\n            return x * y; // xy >= k\\n        }\\n    }\\n\\n    function _mint(address dst, uint256 amount) internal {\\n        _updateFor(dst); // balances must be updated on mint/burn/transfer\\n        totalSupply += amount;\\n        balanceOf[dst] += amount;\\n        emit Transfer(address(0), dst, amount);\\n    }\\n\\n    function _burn(address dst, uint256 amount) internal {\\n        _updateFor(dst);\\n        totalSupply -= amount;\\n        balanceOf[dst] -= amount;\\n        emit Transfer(dst, address(0), amount);\\n    }\\n\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external\\n    {\\n        require(deadline >= block.timestamp, \\\"Pair: EXPIRED\\\");\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Pair: INVALID_SIGNATURE\\\");\\n        allowance[owner][spender] = value;\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowance[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint256).max) {\\n            uint256 newAllowance = spenderAllowance - amount;\\n            allowance[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    function _transferTokens(address src, address dst, uint256 amount) internal {\\n        _updateFor(src); // update fee position for src\\n        _updateFor(dst); // update fee position for dst\\n\\n        balanceOf[src] -= amount;\\n        balanceOf[dst] += amount;\\n\\n        emit Transfer(src, dst, amount);\\n    }\\n\\n    function _safeTransfer(address token, address to, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n}\\n\",\"keccak256\":\"0x28ea7dd8afb495d76e14281c02c9c2e4b0e95b3ec0bf5b30a9b9f22ee99ab0ba\",\"license\":\"MIT\"},\"contracts/PairFees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport 'contracts/interfaces/IERC20.sol';\\nimport \\\"contracts/interfaces/ITurnstile.sol\\\";\\n\\n// Pair Fees contract is used as a 1:1 pair relationship to split out fees, this ensures that the curve does not need to be modified for LP shares\\ncontract PairFees {\\n    address internal multisig = 0x0a178469E3d08BEAA0a289E416Ab924F10807989;\\n    address internal turnstile = 0xEcf044C5B4b867CFda001101c617eCd347095B44;\\n\\n    address internal immutable pair; // The pair it is bonded to\\n    address internal immutable token0; // token0 of pair, saved localy and statically for gas optimization\\n    address internal immutable token1; // Token1 of pair, saved localy and statically for gas optimization\\n\\n    constructor(address _token0, address _token1) {\\n        pair = msg.sender;\\n        token0 = _token0;\\n        token1 = _token1;\\n\\n        ITurnstile(turnstile).register(multisig);\\n    }\\n\\n    function _safeTransfer(address token,address to,uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) =\\n        token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    // Allow the pair to transfer fees to users\\n    function claimFeesFor(address recipient, uint amount0, uint amount1) external {\\n        require(msg.sender == pair);\\n        if (amount0 > 0) _safeTransfer(token0, recipient, amount0);\\n        if (amount1 > 0) _safeTransfer(token1, recipient, amount1);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xaf9b1ccb2d51a752f668572cfc2b3c076173a1e2f584dfcad5c00314d4c10753\",\"license\":\"MIT\"},\"contracts/Voter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\nimport \\\"contracts/interfaces/IBribe.sol\\\";\\nimport \\\"contracts/interfaces/IBribeFactory.sol\\\";\\nimport \\\"contracts/interfaces/IGauge.sol\\\";\\nimport \\\"contracts/interfaces/IGaugeFactory.sol\\\";\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\nimport \\\"contracts/interfaces/IMinter.sol\\\";\\nimport \\\"contracts/interfaces/IPair.sol\\\";\\nimport \\\"contracts/interfaces/IPairFactory.sol\\\";\\nimport \\\"contracts/interfaces/IVoter.sol\\\";\\nimport \\\"contracts/interfaces/IVotingEscrow.sol\\\";\\n\\nimport \\\"contracts/Pair.sol\\\";\\n\\nimport \\\"contracts/interfaces/IWrappedExternalBribeFactory.sol\\\";\\nimport \\\"contracts/interfaces/ITurnstile.sol\\\";\\n\\ncontract Voter is IVoter {\\n    address internal multisig = 0x0a178469E3d08BEAA0a289E416Ab924F10807989;\\n    address internal turnstile = 0xEcf044C5B4b867CFda001101c617eCd347095B44;\\n    address public immutable _ve; // the ve token that governs these contracts\\n    address public immutable factory; // the PairFactory\\n    address internal immutable base;\\n    address public immutable gaugefactory;\\n    address public immutable bribefactory;\\n    address public immutable wrappedxbribefactory; // this is the address of the wrapped external bribe factory\\n    uint256 internal constant DURATION = 7 days; // rewards are released over 7 days\\n    address public minter;\\n    address public governor; // should be set to an IGovernor\\n    address public emergencyCouncil; // credibly neutral party similar to Curve's Emergency DAO\\n    uint256 public totalWeight; // total voting weight\\n\\n    address[] public pools; // all pools viable for incentives\\n    mapping(address => address) public gauges; // pool => gauge\\n    mapping(address => address) public poolForGauge; // gauge => pool\\n    mapping(address => address) public internal_bribes; // gauge => internal bribe (only fees)\\n    mapping(address => address) public external_bribes; // gauge => external bribe (real bribes)\\n    mapping(address => uint256) public weights; // pool => weight\\n    mapping(uint256 => mapping(address => uint256)) public votes; // nft => pool => votes\\n    mapping(uint256 => address[]) public poolVote; // nft => pools\\n    mapping(uint256 => uint256) public usedWeights; // nft => total voting weight of user\\n    mapping(uint256 => uint256) public lastVoted; // nft => timestamp of last vote, to ensure one vote per epoch\\n    mapping(address => bool) public isGauge;\\n    mapping(address => bool) public isWhitelisted;\\n    mapping(address => bool) public isAlive;\\n\\n    event GaugeCreated(\\n        address indexed gauge,\\n        address creator,\\n        address internal_bribe,\\n        address indexed external_bribe,\\n        address wxbribe,\\n        address indexed pool\\n    );\\n    event GaugeKilled(address indexed gauge);\\n    event GaugeRevived(address indexed gauge);\\n    event Voted(address indexed voter, uint256 tokenId, uint256 weight);\\n    event Abstained(uint256 tokenId, uint256 weight);\\n    event Deposit(address indexed lp, address indexed gauge, uint256 tokenId, uint256 amount);\\n    event Withdraw(address indexed lp, address indexed gauge, uint256 tokenId, uint256 amount);\\n    event NotifyReward(address indexed sender, address indexed reward, uint256 amount);\\n    event DistributeReward(address indexed sender, address indexed gauge, uint256 amount);\\n    event Attach(address indexed owner, address indexed gauge, uint256 tokenId);\\n    event Detach(address indexed owner, address indexed gauge, uint256 tokenId);\\n    event Whitelisted(address indexed whitelister, address indexed token);\\n\\n    constructor(address __ve, address _factory, address _gauges, address _bribes, address _wrappedxbribefactory) {\\n        _ve = __ve;\\n        factory = _factory;\\n        base = IVotingEscrow(__ve).token();\\n        gaugefactory = _gauges;\\n        bribefactory = _bribes;\\n        wrappedxbribefactory = _wrappedxbribefactory;\\n        minter = msg.sender;\\n        governor = msg.sender;\\n        emergencyCouncil = msg.sender;\\n\\n        ITurnstile(turnstile).register(multisig);\\n    }\\n\\n    // simple re-entrancy check\\n    uint256 internal _unlocked = 1;\\n\\n    modifier lock() {\\n        require(_unlocked == 1);\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n\\n    modifier onlyNewEpoch(uint256 _tokenId) {\\n        // ensure new epoch since last vote\\n        require((block.timestamp / DURATION) * DURATION > lastVoted[_tokenId], \\\"TOKEN_ALREADY_VOTED_THIS_EPOCH\\\");\\n        _;\\n    }\\n\\n    function initialize(address[] memory _tokens, address _minter) external {\\n        require(msg.sender == minter);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _whitelist(_tokens[i]);\\n        }\\n        minter = _minter;\\n    }\\n\\n    function setGovernor(address _governor) public {\\n        require(msg.sender == governor);\\n        governor = _governor;\\n    }\\n\\n    function setEmergencyCouncil(address _council) public {\\n        require(msg.sender == emergencyCouncil);\\n        emergencyCouncil = _council;\\n    }\\n\\n    function reset(uint256 _tokenId) external onlyNewEpoch(_tokenId) {\\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, _tokenId));\\n        lastVoted[_tokenId] = block.timestamp;\\n        _reset(_tokenId);\\n        IVotingEscrow(_ve).abstain(_tokenId);\\n    }\\n\\n    function _reset(uint256 _tokenId) internal {\\n        address[] storage _poolVote = poolVote[_tokenId];\\n        uint256 _poolVoteCnt = _poolVote.length;\\n        uint256 _totalWeight = 0;\\n\\n        for (uint256 i = 0; i < _poolVoteCnt; i++) {\\n            address _pool = _poolVote[i];\\n            uint256 _votes = votes[_tokenId][_pool];\\n\\n            if (_votes != 0) {\\n                _updateFor(gauges[_pool]);\\n                weights[_pool] -= _votes;\\n                votes[_tokenId][_pool] -= _votes;\\n                if (_votes > 0) {\\n                    IBribe(internal_bribes[gauges[_pool]])._withdraw(uint256(_votes), _tokenId);\\n                    IBribe(external_bribes[gauges[_pool]])._withdraw(uint256(_votes), _tokenId);\\n                    _totalWeight += _votes;\\n                } else {\\n                    _totalWeight -= _votes;\\n                }\\n                emit Abstained(_tokenId, _votes);\\n            }\\n        }\\n        totalWeight -= uint256(_totalWeight);\\n        usedWeights[_tokenId] = 0;\\n        delete poolVote[_tokenId];\\n    }\\n\\n    // remove poke function\\n\\n    function poke(uint256 _tokenId) external {\\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, _tokenId) || msg.sender == governor);\\n        address[] memory _poolVote = poolVote[_tokenId];\\n        uint256 _poolCnt = _poolVote.length;\\n        uint256[] memory _weights = new uint256[](_poolCnt);\\n\\n        for (uint256 i = 0; i < _poolCnt; i++) {\\n            _weights[i] = votes[_tokenId][_poolVote[i]];\\n        }\\n\\n        _vote(_tokenId, _poolVote, _weights);\\n    }\\n\\n    function _vote(uint256 _tokenId, address[] memory _poolVote, uint256[] memory _weights) internal {\\n        _reset(_tokenId);\\n        uint256 _poolCnt = _poolVote.length;\\n        uint256 _weight = IVotingEscrow(_ve).balanceOfNFT(_tokenId);\\n        uint256 _totalVoteWeight = 0;\\n        uint256 _totalWeight = 0;\\n        uint256 _usedWeight = 0;\\n\\n        for (uint256 i = 0; i < _poolCnt; i++) {\\n            _totalVoteWeight += _weights[i];\\n        }\\n\\n        for (uint256 i = 0; i < _poolCnt; i++) {\\n            address _pool = _poolVote[i];\\n            address _gauge = gauges[_pool];\\n\\n            if (isGauge[_gauge]) {\\n                uint256 _poolWeight = (_weights[i] * _weight) / _totalVoteWeight;\\n                require(votes[_tokenId][_pool] == 0);\\n                require(_poolWeight != 0);\\n                _updateFor(_gauge);\\n\\n                poolVote[_tokenId].push(_pool);\\n\\n                weights[_pool] += _poolWeight;\\n                votes[_tokenId][_pool] += _poolWeight;\\n                IBribe(internal_bribes[_gauge])._deposit(uint256(_poolWeight), _tokenId);\\n                IBribe(external_bribes[_gauge])._deposit(uint256(_poolWeight), _tokenId);\\n                _usedWeight += _poolWeight;\\n                _totalWeight += _poolWeight;\\n                emit Voted(msg.sender, _tokenId, _poolWeight);\\n            }\\n        }\\n        if (_usedWeight > 0) IVotingEscrow(_ve).voting(_tokenId);\\n        totalWeight += uint256(_totalWeight);\\n        usedWeights[_tokenId] = uint256(_usedWeight);\\n    }\\n\\n    function vote(uint256 tokenId, address[] calldata _poolVote, uint256[] calldata _weights)\\n        external\\n        onlyNewEpoch(tokenId)\\n    {\\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, tokenId));\\n        require(_poolVote.length == _weights.length);\\n        lastVoted[tokenId] = block.timestamp;\\n        _vote(tokenId, _poolVote, _weights);\\n    }\\n\\n    function whitelist(address _token) public {\\n        require(msg.sender == governor);\\n        _whitelist(_token);\\n    }\\n\\n    function _whitelist(address _token) internal {\\n        require(!isWhitelisted[_token]);\\n        isWhitelisted[_token] = true;\\n        emit Whitelisted(msg.sender, _token);\\n    }\\n\\n    function createGauge(address _pool) external returns (address) {\\n        require(gauges[_pool] == address(0x0), \\\"exists\\\");\\n        address[] memory allowedRewards = new address[](3);\\n        address[] memory internalRewards = new address[](2);\\n        bool isPair = IPairFactory(factory).isPair(_pool);\\n        address tokenA;\\n        address tokenB;\\n\\n        if (isPair) {\\n            (tokenA, tokenB) = IPair(_pool).tokens();\\n            allowedRewards[0] = tokenA;\\n            allowedRewards[1] = tokenB;\\n            internalRewards[0] = tokenA;\\n            internalRewards[1] = tokenB;\\n            // if one of the tokens is not base (FLOW) then add base(FLOW) to allowed rewards\\n            if (base != tokenA && base != tokenB) {\\n                allowedRewards[2] = base;\\n            }\\n        }\\n\\n        if (msg.sender != governor) {\\n            // gov can create for any pool, even non-Velocimeter pairs\\n            require(isPair, \\\"!_pool\\\");\\n            require(isWhitelisted[tokenA] && isWhitelisted[tokenB], \\\"!whitelisted\\\");\\n        }\\n\\n        address _internal_bribe = IBribeFactory(bribefactory).createInternalBribe(internalRewards);\\n        address _external_bribe = IBribeFactory(bribefactory).createExternalBribe(allowedRewards);\\n        address _wxbribe = IWrappedExternalBribeFactory(wrappedxbribefactory).createBribe(_external_bribe);\\n        address _gauge = IGaugeFactory(gaugefactory).createGauge(\\n            _pool, _internal_bribe, _external_bribe, _ve, isPair, allowedRewards\\n        );\\n\\n        IERC20(base).approve(_gauge, type(uint256).max);\\n        internal_bribes[_gauge] = _internal_bribe;\\n        external_bribes[_gauge] = _external_bribe;\\n        gauges[_pool] = _gauge;\\n        poolForGauge[_gauge] = _pool;\\n        isGauge[_gauge] = true;\\n        isAlive[_gauge] = true;\\n        _updateFor(_gauge);\\n        pools.push(_pool);\\n        Pair(_pool).setHasGauge(true); // may need to switch to IPair?\\n        Pair(_pool).setExternalBribe(_wxbribe); // Changed this to wrapped external bribe  from\\n        emit GaugeCreated(_gauge, msg.sender, _internal_bribe, _external_bribe, _wxbribe, _pool);\\n        return _gauge;\\n    }\\n\\n    function killGauge(address _gauge) external {\\n        require(msg.sender == emergencyCouncil, \\\"not emergency council\\\");\\n        require(isAlive[_gauge], \\\"gauge already dead\\\");\\n        isAlive[_gauge] = false;\\n        claimable[_gauge] = 0;\\n        emit GaugeKilled(_gauge);\\n    }\\n\\n    function reviveGauge(address _gauge) external {\\n        require(msg.sender == emergencyCouncil, \\\"not emergency council\\\");\\n        require(!isAlive[_gauge], \\\"gauge already alive\\\");\\n        isAlive[_gauge] = true;\\n        emit GaugeRevived(_gauge);\\n    }\\n\\n    function attachTokenToGauge(uint256 tokenId, address account) external {\\n        require(isGauge[msg.sender]);\\n        require(isAlive[msg.sender]); // killed gauges cannot attach tokens to themselves\\n        if (tokenId > 0) IVotingEscrow(_ve).attach(tokenId);\\n        emit Attach(account, msg.sender, tokenId);\\n    }\\n\\n    function emitDeposit(uint256 tokenId, address account, uint256 amount) external {\\n        require(isGauge[msg.sender]);\\n        require(isAlive[msg.sender]);\\n        emit Deposit(account, msg.sender, tokenId, amount);\\n    }\\n\\n    function detachTokenFromGauge(uint256 tokenId, address account) external {\\n        require(isGauge[msg.sender]);\\n        if (tokenId > 0) IVotingEscrow(_ve).detach(tokenId);\\n        emit Detach(account, msg.sender, tokenId);\\n    }\\n\\n    function emitWithdraw(uint256 tokenId, address account, uint256 amount) external {\\n        require(isGauge[msg.sender]);\\n        emit Withdraw(account, msg.sender, tokenId, amount);\\n    }\\n\\n    function length() external view returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    uint256 internal index;\\n    mapping(address => uint256) internal supplyIndex;\\n    mapping(address => uint256) public claimable;\\n\\n    function notifyRewardAmount(uint256 amount) external {\\n        _safeTransferFrom(base, msg.sender, address(this), amount); // transfer the distro in\\n        uint256 _ratio = (amount * 1e18) / totalWeight; // 1e18 adjustment is removed during claim\\n        if (_ratio > 0) {\\n            index += _ratio;\\n        }\\n        emit NotifyReward(msg.sender, base, amount);\\n    }\\n\\n    function updateFor(address[] memory _gauges) external {\\n        for (uint256 i = 0; i < _gauges.length; i++) {\\n            _updateFor(_gauges[i]);\\n        }\\n    }\\n\\n    function updateForRange(uint256 start, uint256 end) public {\\n        for (uint256 i = start; i < end; i++) {\\n            _updateFor(gauges[pools[i]]);\\n        }\\n    }\\n\\n    function updateAll() external {\\n        updateForRange(0, pools.length);\\n    }\\n\\n    function updateGauge(address _gauge) external {\\n        _updateFor(_gauge);\\n    }\\n\\n    function _updateFor(address _gauge) internal {\\n        address _pool = poolForGauge[_gauge];\\n        uint256 _supplied = weights[_pool];\\n        if (_supplied > 0) {\\n            uint256 _supplyIndex = supplyIndex[_gauge];\\n            uint256 _index = index; // get global index0 for accumulated distro\\n            supplyIndex[_gauge] = _index; // update _gauge current position to global position\\n            uint256 _delta = _index - _supplyIndex; // see if there is any difference that need to be accrued\\n            if (_delta > 0) {\\n                uint256 _share = (uint256(_supplied) * _delta) / 1e18; // add accrued difference for each supplied token\\n                if (isAlive[_gauge]) {\\n                    claimable[_gauge] += _share;\\n                }\\n            }\\n        } else {\\n            supplyIndex[_gauge] = index; // new users are set to the default global state\\n        }\\n    }\\n\\n    function claimRewards(address[] memory _gauges, address[][] memory _tokens) external {\\n        for (uint256 i = 0; i < _gauges.length; i++) {\\n            IGauge(_gauges[i]).getReward(msg.sender, _tokens[i]);\\n        }\\n    }\\n\\n    function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external {\\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, _tokenId));\\n        for (uint256 i = 0; i < _bribes.length; i++) {\\n            IBribe(_bribes[i]).getRewardForOwner(_tokenId, _tokens[i]);\\n        }\\n    }\\n\\n    function claimFees(address[] memory _fees, address[][] memory _tokens, uint256 _tokenId) external {\\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, _tokenId));\\n        for (uint256 i = 0; i < _fees.length; i++) {\\n            IBribe(_fees[i]).getRewardForOwner(_tokenId, _tokens[i]);\\n        }\\n    }\\n\\n    function distributeFees(address[] memory _gauges) external {\\n        for (uint256 i = 0; i < _gauges.length; i++) {\\n            if (IGauge(_gauges[i]).isForPair()) {\\n                IGauge(_gauges[i]).claimFees();\\n            }\\n        }\\n    }\\n\\n    function distribute(address _gauge) public lock {\\n        IMinter(minter).update_period();\\n        _updateFor(_gauge); // should set claimable to 0 if killed\\n        uint256 _claimable = claimable[_gauge];\\n        if (_claimable > IGauge(_gauge).left(base) && _claimable / DURATION > 0) {\\n            claimable[_gauge] = 0;\\n            IGauge(_gauge).notifyRewardAmount(base, _claimable);\\n            emit DistributeReward(msg.sender, _gauge, _claimable);\\n        }\\n    }\\n\\n    function distro() external {\\n        distribute(0, pools.length);\\n    }\\n\\n    function distribute() external {\\n        distribute(0, pools.length);\\n    }\\n\\n    function distribute(uint256 start, uint256 finish) public {\\n        for (uint256 x = start; x < finish; x++) {\\n            distribute(gauges[pools[x]]);\\n        }\\n    }\\n\\n    function distribute(address[] memory _gauges) external {\\n        for (uint256 x = 0; x < _gauges.length; x++) {\\n            distribute(_gauges[x]);\\n        }\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n}\\n\",\"keccak256\":\"0xd6d36ec42ed50e8d579a151db4edc7757f2d63f965b8ce0fe52a7cd571b6e269\",\"license\":\"MIT\"},\"contracts/factories/PairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"contracts/interfaces/IPairFactory.sol\\\";\\nimport \\\"contracts/Pair.sol\\\";\\nimport \\\"contracts/interfaces/ITurnstile.sol\\\";\\n\\ncontract PairFactory is IPairFactory {\\n    address internal multisig = 0x0a178469E3d08BEAA0a289E416Ab924F10807989;\\n    address internal turnstile = 0xEcf044C5B4b867CFda001101c617eCd347095B44;\\n    bool public isPaused;\\n    address public pauser;\\n    address public pendingPauser;\\n\\n    uint256 public stableFee;\\n    uint256 public volatileFee;\\n    uint256 public constant MAX_FEE = 50; // 0.5%\\n    address public feeManager;\\n    address public pendingFeeManager;\\n    address public voter;\\n    address public team;\\n    bool internal initial_voter_set;\\n    bool internal initial_tank_set;\\n    address public tank;\\n    address public deployer;\\n\\n    mapping(address => mapping(address => mapping(bool => address)))\\n        public getPair;\\n    address[] public allPairs;\\n    mapping(address => bool) public isPair; // simplified check if its a pair, given that `stable` flag might not be available in peripherals\\n\\n    address internal _temp0;\\n    address internal _temp1;\\n    bool internal _temp;\\n\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        bool stable,\\n        address pair,\\n        uint256\\n    );\\n\\n    constructor() {\\n        pauser = msg.sender;\\n        isPaused = false;\\n        feeManager = msg.sender;\\n        // stableFee = 2; // 0.02%\\n        // volatileFee = 2;\\n        stableFee = 3; // 0.03%\\n        volatileFee = 25; // 0.25%\\n        deployer = msg.sender;\\n\\n        ITurnstile(turnstile).register(multisig);\\n    }\\n\\n    // need to set team so that team can set voter we really only need to set the voter once :) - deployer can do this only once (either in the init script but then we have to do this one last otherwise it will fail)\\n\\n    function setTeam(address _team) external {\\n        require(msg.sender == deployer); // might need to set this to deployer?? or just make it\\n        require(team == address(0), \\\"The team has already been set.\\\");\\n        team = _team;\\n    }\\n\\n    // In this example, the owner variable is set to the address that deploys the contract in the constructor. The setTeam function requires that the caller (msg.sender) must be the owner, and that the team variable has not yet been set (it is equal to the address value of 0). If either of these conditions are not met, the function will revert and not update the team variable.\\n\\n    // we only get once shot at this.\\n\\n    function setVoter(address _voter) external {\\n        require(!initial_voter_set, \\\"The voter has already been set.\\\");\\n        require(msg.sender == deployer); // have to make sure that this can be set to the voter addres during init script\\n        voter = _voter;\\n        initial_voter_set = true;\\n    }\\n\\n    // function set tank on factory require team\\n\\n    function setTank(address _tank) external {\\n        require(!initial_tank_set, \\\"The tank has already been set.\\\");\\n        require(msg.sender == deployer); // this should be updateable to team but adding deployer so that init script can run..\\n        tank = _tank;\\n        initial_tank_set = true;\\n    }\\n\\n    // This makes tank updateable forever by the team address (multisig)\\n\\n    function acceptTank(address _tank) external {\\n        require(msg.sender == team, \\\"not pending team\\\");\\n        tank = _tank;\\n    }\\n\\n    // pair uses this to check if voter is updating external_bribe\\n\\n    function getVoter() external view returns (address) {\\n        return voter;\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function setPauser(address _pauser) external {\\n        require(msg.sender == pauser);\\n        pendingPauser = _pauser;\\n    }\\n\\n    function acceptPauser() external {\\n        require(msg.sender == pendingPauser);\\n        pauser = pendingPauser;\\n    }\\n\\n    function setPause(bool _state) external {\\n        require(msg.sender == pauser);\\n        isPaused = _state;\\n    }\\n\\n    function setFeeManager(address _feeManager) external {\\n        require(msg.sender == feeManager, \\\"not fee manager\\\");\\n        pendingFeeManager = _feeManager;\\n    }\\n\\n    function acceptFeeManager() external {\\n        require(msg.sender == pendingFeeManager, \\\"not pending fee manager\\\");\\n        feeManager = pendingFeeManager;\\n    }\\n\\n    function setFee(bool _stable, uint256 _fee) external {\\n        require(msg.sender == feeManager, \\\"not fee manager\\\");\\n        require(_fee <= MAX_FEE, \\\"fee too high\\\");\\n        require(_fee != 0, \\\"fee must be nonzero\\\");\\n        if (_stable) {\\n            stableFee = _fee;\\n        } else {\\n            volatileFee = _fee;\\n        }\\n    }\\n\\n    function getFee(bool _stable) public view returns (uint256) {\\n        return _stable ? stableFee : volatileFee;\\n    }\\n\\n    function pairCodeHash() external pure returns (bytes32) {\\n        return keccak256(type(Pair).creationCode);\\n    }\\n\\n    function getInitializable()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        )\\n    {\\n        return (_temp0, _temp1, _temp);\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external returns (address pair) {\\n        require(tokenA != tokenB, \\\"IA\\\"); // Pair: IDENTICAL_ADDRESSES\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"ZA\\\"); // Pair: ZERO_ADDRESS\\n        require(getPair[token0][token1][stable] == address(0), \\\"PE\\\"); // Pair: PAIR_EXISTS - single check is sufficient\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, stable)); // notice salt includes stable as well, 3 parameters\\n        (_temp0, _temp1, _temp) = (token0, token1, stable);\\n        pair = address(new Pair{salt: salt}());\\n        getPair[token0][token1][stable] = pair;\\n        getPair[token1][token0][stable] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        isPair[pair] = true;\\n        emit PairCreated(token0, token1, stable, pair, allPairs.length);\\n    }\\n}\\n\",\"keccak256\":\"0x52db19f074fba9d8be01977cf21ee0ef1dbc9f828da22f08f81fbd41d7eb3bfd\",\"license\":\"MIT\"},\"contracts/interfaces/IBribe.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IBribe {\\n    function _deposit(uint256 amount, uint256 tokenId) external;\\n    function _withdraw(uint256 amount, uint256 tokenId) external;\\n    function getRewardForOwner(uint256 tokenId, address[] memory tokens) external;\\n    function notifyRewardAmount(address token, uint256 amount) external; //keep same as external bribe\\n    function left(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x05d9a4d56b9e7ef3e876873b0ef701474a7b5cca9494d61f083bd3207d531f74\"},\"contracts/interfaces/IBribeFactory.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IBribeFactory {\\n    function createInternalBribe(address[] memory) external returns (address);\\n    function createExternalBribe(address[] memory) external returns (address);\\n}\\n\",\"keccak256\":\"0x3893233c0f5acb71691f6d2c8b758f93b41a90ded632b9d4d919fbc3754b2549\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address recipient, uint amount) external returns (bool);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function balanceOf(address) external view returns (uint);\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x892b167ec5245b43ccdfc68d20e8ca12d05725fb6c11ec5ddf6bf77ed0c93c32\"},\"contracts/interfaces/IGauge.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IGauge {\\n    function notifyRewardAmount(address token, uint amount) external;\\n    function getReward(address account, address[] memory tokens) external;\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n    function left(address token) external view returns (uint);\\n    function isForPair() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xae388a0eeb0318da9a00bd65bcc80dcbf81cd24915959c7852f9fa21f8893865\"},\"contracts/interfaces/IGaugeFactory.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IGaugeFactory {\\n    function createGauge(address, address, address, address, bool, address[] memory) external returns (address);\\n}\\n\",\"keccak256\":\"0xb0b7fb654242fb9709c9d767bbcf2edbbc54bda0b4c1dbf092718c0e5ddac785\"},\"contracts/interfaces/IMinter.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IMinter {\\n    function update_period() external returns (uint);\\n}\\n\",\"keccak256\":\"0x22a493b7559b31b779773d0279189161af0d6c0e741d470fd7a8afdf91558304\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IPair {\\n    function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1);\\n    function claimFees() external returns (uint, uint);\\n    function tokens() external returns (address, address);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x796005a0babe921334bacab4a90a551bc7f2ddfb030350a6ba590a9d8440daee\"},\"contracts/interfaces/IPairCallee.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IPairCallee {\\n    function hook(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3ac2de2c7a08bf59fd1006e4d108b247916369de15fbd048b72ca2b7814023ca\"},\"contracts/interfaces/IPairFactory.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IPairFactory {\\n    function allPairsLength() external view returns (uint);\\n    function isPair(address pair) external view returns (bool);\\n    function pairCodeHash() external pure returns (bytes32);\\n    function getPair(address tokenA, address token, bool stable) external view returns (address);\\n    function createPair(address tokenA, address tokenB, bool stable) external returns (address pair);\\n}\\n\",\"keccak256\":\"0x6a1b9f617020d6a2e0f8cadd51288f5000b0e0dae938a84dc5c977c88c849738\"},\"contracts/interfaces/ITurnstile.sol\":{\"content\":\"interface ITurnstile {\\n    function register(address) external returns(uint256);\\n}\",\"keccak256\":\"0xf19540479e9afad63b889bd1aaf665c5f989635ffc3259b9cfb600c079cf25f2\"},\"contracts/interfaces/IVoter.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IVoter {\\n    function _ve() external view returns (address);\\n    function governor() external view returns (address);\\n    function emergencyCouncil() external view returns (address);\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n    function emitDeposit(uint _tokenId, address account, uint amount) external;\\n    function emitWithdraw(uint _tokenId, address account, uint amount) external;\\n    function isWhitelisted(address token) external view returns (bool);\\n    function notifyRewardAmount(uint amount) external;\\n    function distribute(address _gauge) external;\\n}\\n\",\"keccak256\":\"0x033115b88f156c6db67ca468fc9da8e4197bbd48bc8cf5a1652b9ebd307b2d31\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IVotingEscrow {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    function token() external view returns (address);\\n    function team() external returns (address);\\n    function epoch() external view returns (uint);\\n    function point_history(uint loc) external view returns (Point memory);\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n    function transferFrom(address, address, uint) external;\\n\\n    function voting(uint tokenId) external;\\n    function abstain(uint tokenId) external;\\n    function attach(uint tokenId) external;\\n    function detach(uint tokenId) external;\\n\\n    function checkpoint() external;\\n    function deposit_for(uint tokenId, uint value) external;\\n    function create_lock_for(uint, uint, address) external returns (uint);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x9c51afef11e82c70d08871264602e385a4f7caf36383e1bc5a6c214f93a4c0d1\"},\"contracts/interfaces/IWrappedExternalBribeFactory.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IWrappedExternalBribeFactory {\\n    function createBribe(address) external returns (address);\\n}\\n\",\"keccak256\":\"0xb43ef5430b3f715958003fcf59b8eaaeec5e4fc2a7599a76c340023fb528a360\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3546b156d97633f7f8cad536d5454c81d1d604687c02b2eb105fdc33cb962b41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610140604052600080546001600160a01b0319908116730a178469e3d08beaa0a289e416ab924f10807989179091556001805490911673ecf044c5b4b867cfda001101c617ecd347095b441781556013553480156200005d57600080fd5b5060405162003aa638038062003aa68339810160408190526200008091620001df565b6001600160a01b03808616608081905290851660a05260408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181865afa158015620000d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f891906200024f565b6001600160a01b0390811660c05283811660e052828116610100528181166101205260028054336001600160a01b0319918216811790925560038054821683179055600480549091169091178155600154600054604051632210724360e11b81529084169281019290925290911690634420e486906024016020604051808303816000875af115801562000190573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b6919062000274565b5050505050506200028e565b80516001600160a01b0381168114620001da57600080fd5b919050565b600080600080600060a08688031215620001f857600080fd5b6200020386620001c2565b94506200021360208701620001c2565b93506200022360408701620001c2565b92506200023360608701620001c2565b91506200024360808701620001c2565b90509295509295909350565b6000602082840312156200026257600080fd5b6200026d82620001c2565b9392505050565b6000602082840312156200028757600080fd5b5051919050565b60805160a05160c05160e05161010051610120516137276200037f600039600081816104c80152611e7d01526000818161040201528181611d4d0152611dcb0152600081816105150152611ef0015260008181610c8301528181610cfc01528181610fc20152818161107e01528181611bb201528181611beb01528181611c1d0152611fd101526000818161073e0152611a090152600081816105ce0152818161096d01528181610a1901528181610a9d01528181610d890152818161114e015281816112cf015281816113ff015281816115be01528181611f220152818161292c0152612cef01526137276000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c806379e938241161019d578063ac4afa38116100e9578063d23254b4116100a2578063e586875f1161007c578063e586875f146107b1578063ea94ee44146107c4578063eae40f26146107d7578063f3594be01461080057600080fd5b8063d23254b414610773578063d560b0d71461079e578063e4fc6b6d146104a057600080fd5b8063ac4afa38146106c1578063ae21c4cb146106d4578063b9a09fd5146106fd578063c42cf53514610726578063c45a015514610739578063c527ee1f1461076057600080fd5b80639b6a9d7211610156578063a61c713a11610130578063a61c713a14610658578063a7cac8461461066b578063a86a366d1461068b578063aa79979b1461069e57600080fd5b80639b6a9d721461061f5780639f06247b14610632578063a5f4301e1461064557600080fd5b806379e93824146105965780637ac09bf7146105b65780638dd598fb146105c957806396c82e57146105f0578063992a7933146105f95780639b19251a1461060c57600080fd5b8063462d0b2e1161025c578063666256aa116102155780636ecbe38a116101ef5780636ecbe38a1461054a5780637625391a1461055d5780637715ee75146105705780637778960e1461058357600080fd5b8063666256aa146104fd57806368c3acb314610510578063698473e31461053757600080fd5b8063462d0b2e1461048d57806347b3c6ba146104a057806353d78693146104a85780636138889b146104b057806361aacd47146104c357806363453ae1146104ea57600080fd5b8063310bd74b116102c95780633af32abf116102a35780633af32abf146104245780633c6b16ab14610447578063402914f51461045a578063411b1f771461047a57600080fd5b8063310bd74b146103d757806332145f90146103ea57806338752a9d146103fd57600080fd5b806306d6a1b21461031157806307546172146103575780630c340a241461036a5780631703e5f91461037d5780631f7b6d32146103b057806320b1cb6f146103c2575b600080fd5b61033a61031f366004613031565b6008602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60025461033a906001600160a01b031681565b60035461033a906001600160a01b031681565b6103a061038b366004613031565b60126020526000908152604090205460ff1681565b604051901515815260200161034e565b6006545b60405190815260200161034e565b6103d56103d03660046131b4565b610820565b005b6103d56103e5366004613218565b6108d6565b6103d56103f8366004613218565b610a81565b61033a7f000000000000000000000000000000000000000000000000000000000000000081565b6103a0610432366004613031565b60116020526000908152604090205460ff1681565b6103d5610455366004613218565b610c7e565b6103b4610468366004613031565b60166020526000908152604090205481565b6103d5610488366004613231565b610d51565b6103d561049b366004613261565b610e2b565b6103d5610ea6565b6103d5610eb7565b6103d56104be3660046132a8565b610ec6565b61033a7f000000000000000000000000000000000000000000000000000000000000000081565b6103d56104f8366004613031565b610f0a565b6103d561050b3660046132e5565b611132565b61033a7f000000000000000000000000000000000000000000000000000000000000000081565b6103d5610545366004613231565b61127b565b6103d5610558366004613031565b611371565b6103d561056b366004613352565b61137d565b6103d561057e3660046132e5565b6113e3565b60045461033a906001600160a01b031681565b6103b46105a4366004613218565b600e6020526000908152604090205481565b6103d56105c43660046133c0565b61152c565b61033a7f000000000000000000000000000000000000000000000000000000000000000081565b6103b460055481565b6103d5610607366004613031565b6116c4565b6103d561061a366004613031565b6117c9565b6103d561062d366004613352565b6117e9565b6103d5610640366004613031565b61184f565b61033a610653366004613031565b61194c565b6103d561066636600461343a565b61234d565b6103b4610679366004613031565b600b6020526000908152604090205481565b61033a610699366004613352565b6123d1565b6103a06106ac366004613031565b60106020526000908152604090205460ff1681565b61033a6106cf366004613218565b612409565b61033a6106e2366004613031565b600a602052600090815260409020546001600160a01b031681565b61033a61070b366004613031565b6007602052600090815260409020546001600160a01b031681565b6103d5610734366004613031565b612433565b61033a7f000000000000000000000000000000000000000000000000000000000000000081565b6103d561076e3660046132a8565b61246c565b6103b4610781366004613231565b600c60209081526000928352604080842090915290825290205481565b6103d56107ac3660046132a8565b612589565b6103d56107bf366004613031565b6125c9565b6103d56107d236600461343a565b612602565b61033a6107e5366004613031565b6009602052600090815260409020546001600160a01b031681565b6103b461080e366004613218565b600f6020526000908152604090205481565b60005b82518110156108d15782818151811061083e5761083e613472565b60200260200101516001600160a01b03166331279d3d3384848151811061086757610867613472565b60200260200101516040518363ffffffff1660e01b815260040161088c9291906134cc565b600060405180830381600087803b1580156108a657600080fd5b505af11580156108ba573d6000803e3d6000fd5b5050505080806108c990613506565b915050610823565b505050565b6000818152600f6020526040902054819062093a806108f5814261351f565b6108ff9190613541565b116109515760405162461bcd60e51b815260206004820152601e60248201527f544f4b454e5f414c52454144595f564f5445445f544849535f45504f4348000060448201526064015b60405180910390fd5b60405163430c208160e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190613560565b6109e957600080fd5b6000828152600f60205260409020429055610a0382612661565b60405163c1f0fb9f60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c1f0fb9f90602401600060405180830381600087803b158015610a6557600080fd5b505af1158015610a79573d6000803e3d6000fd5b505050505050565b60405163430c208160e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa158015610aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b109190613560565b80610b2557506003546001600160a01b031633145b610b2e57600080fd5b6000818152600d6020908152604080832080548251818502810185019093528083529192909190830182828015610b8e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b70575b5050505050905060008151905060008167ffffffffffffffff811115610bb657610bb6613055565b604051908082528060200260200182016040528015610bdf578160200160208202803683370190505b50905060005b82811015610c6c57600c60008681526020019081526020016000206000858381518110610c1457610c14613472565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610c4f57610c4f613472565b602090810291909101015280610c6481613506565b915050610be5565b50610c78848483612908565b50505050565b610caa7f0000000000000000000000000000000000000000000000000000000000000000333084612d86565b600554600090610cc283670de0b6b3a7640000613541565b610ccc919061351f565b90508015610cec578060146000828254610ce69190613582565b90915550505b6040518281526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf50826906020015b60405180910390a35050565b3360009081526010602052604090205460ff16610d6d57600080fd5b8115610dee57604051634c35bec560e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063986b7d8a90602401600060405180830381600087803b158015610dd557600080fd5b505af1158015610de9573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907fae268d9aab12f3605f58efd74fd3801fa812b03fdb44317eb70f46dff0e19e2290602001610d45565b6002546001600160a01b03163314610e4257600080fd5b60005b8251811015610e8257610e70838281518110610e6357610e63613472565b6020026020010151612e76565b80610e7a81613506565b915050610e45565b50600280546001600160a01b0319166001600160a01b039290921691909117905550565b600654610eb59060009061137d565b565b600654610eb5906000906117e9565b60005b8151811015610f0657610ef4828281518110610ee757610ee7613472565b6020026020010151610f0a565b80610efe81613506565b915050610ec9565b5050565b601354600114610f1957600080fd5b60026013819055546040805163ed29fc1160e01b815290516001600160a01b039092169163ed29fc119160048082019260209290919082900301816000875af1158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e919061359a565b50610f9881612ee9565b6001600160a01b0381811660008181526016602052604090819020549051634cde602960e11b81527f00000000000000000000000000000000000000000000000000000000000000009093166004840152916399bcc05290602401602060405180830381865afa158015611010573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611034919061359a565b8111801561104e5750600061104c62093a808361351f565b115b15611129576001600160a01b03828116600081815260166020526040808220919091555163b66503cf60e01b81527f00000000000000000000000000000000000000000000000000000000000000009092166004830152602482018390529063b66503cf90604401600060405180830381600087803b1580156110d057600080fd5b505af11580156110e4573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507f4fa9693cae526341d334e2862ca2413b2e503f1266255f9e0869fb36e6d89b179060200160405180910390a35b50506001601355565b60405163430c208160e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa15801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c19190613560565b6111ca57600080fd5b60005b8351811015610c78578381815181106111e8576111e8613472565b60200260200101516001600160a01b031663a7852afa8385848151811061121157611211613472565b60200260200101516040518363ffffffff1660e01b81526004016112369291906135b3565b600060405180830381600087803b15801561125057600080fd5b505af1158015611264573d6000803e3d6000fd5b50505050808061127390613506565b9150506111cd565b3360009081526010602052604090205460ff1661129757600080fd5b3360009081526012602052604090205460ff166112b357600080fd5b81156113345760405163fbd3a29d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fbd3a29d90602401600060405180830381600087803b15801561131b57600080fd5b505af115801561132f573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907f60940192810a6fb3bce3fd3e2e3a13fd6ccc7605e963fb87ee971aba829989bd90602001610d45565b61137a81612ee9565b50565b815b818110156108d1576113d160076000600684815481106113a1576113a1613472565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416610f0a565b806113db81613506565b91505061137f565b60405163430c208160e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa15801561144e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114729190613560565b61147b57600080fd5b60005b8351811015610c785783818151811061149957611499613472565b60200260200101516001600160a01b031663a7852afa838584815181106114c2576114c2613472565b60200260200101516040518363ffffffff1660e01b81526004016114e79291906135b3565b600060405180830381600087803b15801561150157600080fd5b505af1158015611515573d6000803e3d6000fd5b50505050808061152490613506565b91505061147e565b6000858152600f6020526040902054859062093a8061154b814261351f565b6115559190613541565b116115a25760405162461bcd60e51b815260206004820152601e60248201527f544f4b454e5f414c52454144595f564f5445445f544849535f45504f434800006044820152606401610948565b60405163430c208160e01b8152336004820152602481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa15801561160d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116319190613560565b61163a57600080fd5b83821461164657600080fd5b6000868152600f602090815260409182902042905581518682028181018301909352868152610a799289928991899182919085019084908082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525061290892505050565b6004546001600160a01b031633146117165760405162461bcd60e51b81526020600482015260156024820152741b9bdd08195b595c99d95b98de4818dbdd5b98da5b605a1b6044820152606401610948565b6001600160a01b03811660009081526012602052604090205460ff166117735760405162461bcd60e51b815260206004820152601260248201527119d85d59d948185b1c9958591e481919585960721b6044820152606401610948565b6001600160a01b0381166000818152601260209081526040808320805460ff191690556016909152808220829055517f04a5d3f5d80d22d9345acc80618f4a4e7e663cf9e1aed23b57d975acec002ba79190a250565b6003546001600160a01b031633146117e057600080fd5b61137a81612e76565b815b818110156108d15761183d600760006006848154811061180d5761180d613472565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416612ee9565b8061184781613506565b9150506117eb565b6004546001600160a01b031633146118a15760405162461bcd60e51b81526020600482015260156024820152741b9bdd08195b595c99d95b98de4818dbdd5b98da5b605a1b6044820152606401610948565b6001600160a01b03811660009081526012602052604090205460ff16156119005760405162461bcd60e51b8152602060048201526013602482015272676175676520616c726561647920616c69766560681b6044820152606401610948565b6001600160a01b038116600081815260126020526040808220805460ff19166001179055517fed18e9faa3dccfd8aa45f69c4de40546b2ca9cccc4538a2323531656516db1aa9190a250565b6001600160a01b038181166000908152600760205260408120549091161561199f5760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b6044820152606401610948565b60408051600380825260808201909252600091602082016060803683375050604080516002808252606082018352939450600093909250906020830190803683370190505060405163e5e31b1360e01b81526001600160a01b0386811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063e5e31b1390602401602060405180830381865afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a749190613560565b90506000808215611c7057866001600160a01b0316639d63848a6040518163ffffffff1660e01b815260040160408051808303816000875af1158015611abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae291906135cc565b80925081935050508185600081518110611afe57611afe613472565b60200260200101906001600160a01b031690816001600160a01b0316815250508085600181518110611b3257611b32613472565b60200260200101906001600160a01b031690816001600160a01b0316815250508184600081518110611b6657611b66613472565b60200260200101906001600160a01b031690816001600160a01b0316815250508084600181518110611b9a57611b9a613472565b6001600160a01b0392831660209182029290920101527f0000000000000000000000000000000000000000000000000000000000000000811690831614801590611c165750806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614155b15611c70577f000000000000000000000000000000000000000000000000000000000000000085600281518110611c4f57611c4f613472565b60200260200101906001600160a01b031690816001600160a01b0316815250505b6003546001600160a01b03163314611d335782611cb85760405162461bcd60e51b81526020600482015260066024820152650857dc1bdbdb60d21b6044820152606401610948565b6001600160a01b03821660009081526011602052604090205460ff168015611cf857506001600160a01b03811660009081526011602052604090205460ff165b611d335760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b6044820152606401610948565b604051632a26b9eb60e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632a26b9eb90611d829088906004016135fb565b6020604051808303816000875af1158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc5919061360e565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636485f0c4886040518263ffffffff1660e01b8152600401611e1591906135fb565b6020604051808303816000875af1158015611e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e58919061360e565b604051631af469cb60e21b81526001600160a01b0380831660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690636bd1a72c906024016020604051808303816000875af1158015611ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eea919061360e565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630bc25f4f8c86867f00000000000000000000000000000000000000000000000000000000000000008c8f6040518763ffffffff1660e01b8152600401611f649695949392919061362b565b6020604051808303816000875af1158015611f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa7919061360e565b60405163095ea7b360e01b81526001600160a01b03808316600483015260001960248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561201c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120409190613560565b508360096000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600a6000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600760008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a60086000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160106000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160126000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506121ee81612ee9565b60068054600180820183556000929092527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b038e169081179091556040516305916c7f60e51b815260048101929092529063b22d8fe090602401600060405180830381600087803b15801561227657600080fd5b505af115801561228a573d6000803e3d6000fd5b5050604051630ccccab360e11b81526001600160a01b0385811660048301528e16925063199995669150602401600060405180830381600087803b1580156122d157600080fd5b505af11580156122e5573d6000803e3d6000fd5b5050604080513381526001600160a01b0388811660208301528681168284015291518f831694508783169350918516917f63b97929cae47d2d1c9d5b568dcc31ecc6b6be5a51168abafc3d5d07e29add919181900360600190a49a9950505050505050505050565b3360009081526010602052604090205460ff1661236957600080fd5b3360009081526012602052604090205460ff1661238557600080fd5b604080518481526020810183905233916001600160a01b038516917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791015b60405180910390a3505050565b600d60205281600052604060002081815481106123ed57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6006818154811061241957600080fd5b6000918252602090912001546001600160a01b0316905081565b6003546001600160a01b0316331461244a57600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60005b8151811015610f065781818151811061248a5761248a613472565b60200260200101516001600160a01b031663e57482136040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f39190613560565b156125775781818151811061250a5761250a613472565b60200260200101516001600160a01b031663d294f0936040518163ffffffff1660e01b815260040160408051808303816000875af1158015612550573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612574919061367b565b50505b8061258181613506565b91505061246f565b60005b8151811015610f06576125b78282815181106125aa576125aa613472565b6020026020010151612ee9565b806125c181613506565b91505061258c565b6004546001600160a01b031633146125e057600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526010602052604090205460ff1661261e57600080fd5b604080518481526020810183905233916001600160a01b038516917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb56791016123c4565b6000818152600d6020526040812080549091805b828110156128cc57600084828154811061269157612691613472565b6000918252602080832090910154888352600c825260408084206001600160a01b039092168085529190925291205490915080156128b7576001600160a01b038083166000908152600760205260409020546126ed9116612ee9565b6001600160a01b0382166000908152600b60205260408120805483929061271590849061369f565b90915550506000878152600c602090815260408083206001600160a01b03861684529091528120805483929061274c90849061369f565b90915550508015612870576001600160a01b038281166000908152600760209081526040808320548416835260099091529081902054905163278afc8b60e21b815260048101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b1580156127c257600080fd5b505af11580156127d6573d6000803e3d6000fd5b505050506001600160a01b0382811660009081526007602090815260408083205484168352600a9091529081902054905163278afc8b60e21b815260048101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b15801561284557600080fd5b505af1158015612859573d6000803e3d6000fd5b5050505080846128699190613582565b935061287d565b61287a818561369f565b93505b60408051888152602081018390527fa9f3ca5f8a9e1580edb2741e0ba560084ec72e0067ba3423f9e9327a176882db910160405180910390a15b505080806128c490613506565b915050612675565b5080600560008282546128df919061369f565b90915550506000848152600e60209081526040808320839055600d9091528120610c7891612fea565b61291183612661565b81516040516339f890b560e21b8152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa15801561297b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299f919061359a565b90506000806000805b858110156129e9578681815181106129c2576129c2613472565b6020026020010151846129d59190613582565b9350806129e181613506565b9150506129a8565b5060005b85811015612cd2576000888281518110612a0957612a09613472565b6020908102919091018101516001600160a01b038082166000908152600784526040808220549092168082526010909452205490925060ff1615612cbd57600086888b8681518110612a5d57612a5d613472565b6020026020010151612a6f9190613541565b612a79919061351f565b60008d8152600c602090815260408083206001600160a01b038816845290915290205490915015612aa957600080fd5b80600003612ab657600080fd5b612abf82612ee9565b60008c8152600d6020908152604080832080546001810182559084528284200180546001600160a01b0319166001600160a01b0388169081179091558352600b90915281208054839290612b14908490613582565b909155505060008c8152600c602090815260408083206001600160a01b038716845290915281208054839290612b4b908490613582565b90915550506001600160a01b038083166000908152600960205260409081902054905163f320772360e01b815260048101849052602481018f905291169063f320772390604401600060405180830381600087803b158015612bac57600080fd5b505af1158015612bc0573d6000803e3d6000fd5b50505050600a6000836001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031663f3207723828e6040518363ffffffff1660e01b8152600401612c33929190918252602082015260400190565b600060405180830381600087803b158015612c4d57600080fd5b505af1158015612c61573d6000803e3d6000fd5b505050508085612c719190613582565b9450612c7d8187613582565b604080518e81526020810184905291975033917fea66f58e474bc09f580000e81f31b334d171db387d0c6098ba47bd897741679b910160405180910390a2505b50508080612cca90613506565b9150506129ed565b508015612d545760405163fd4a77f160e01b8152600481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fd4a77f190602401600060405180830381600087803b158015612d3b57600080fd5b505af1158015612d4f573d6000803e3d6000fd5b505050505b8160056000828254612d669190613582565b90915550506000978852600e602052604090972096909655505050505050565b6000846001600160a01b03163b11612d9d57600080fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691612e0191906136b6565b6000604051808303816000865af19150503d8060008114612e3e576040519150601f19603f3d011682016040523d82523d6000602084013e612e43565b606091505b5091509150818015612e6d575080511580612e6d575080806020019051810190612e6d9190613560565b610a7957600080fd5b6001600160a01b03811660009081526011602052604090205460ff1615612e9c57600080fd5b6001600160a01b038116600081815260116020526040808220805460ff191660011790555133917f6661a7108aecd07864384529117d96c319c1163e3010c01390f6b704726e07de91a350565b6001600160a01b03808216600090815260086020908152604080832054909316808352600b909152919020548015612fc9576001600160a01b038316600090815260156020526040812080546014549182905591612f47838361369f565b90508015610a79576000670de0b6b3a7640000612f648387613541565b612f6e919061351f565b6001600160a01b03881660009081526012602052604090205490915060ff1615612fc0576001600160a01b03871660009081526016602052604081208054839290612fba908490613582565b90915550505b50505050505050565b6014546001600160a01b038416600090815260156020526040902055505050565b508054600082559060005260206000209081019061137a91905b808211156130185760008155600101613004565b5090565b6001600160a01b038116811461137a57600080fd5b60006020828403121561304357600080fd5b813561304e8161301c565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561309457613094613055565b604052919050565b600067ffffffffffffffff8211156130b6576130b6613055565b5060051b60200190565b600082601f8301126130d157600080fd5b813560206130e66130e18361309c565b61306b565b82815260059290921b8401810191818101908684111561310557600080fd5b8286015b8481101561312957803561311c8161301c565b8352918301918301613109565b509695505050505050565b600082601f83011261314557600080fd5b813560206131556130e18361309c565b82815260059290921b8401810191818101908684111561317457600080fd5b8286015b8481101561312957803567ffffffffffffffff8111156131985760008081fd5b6131a68986838b01016130c0565b845250918301918301613178565b600080604083850312156131c757600080fd5b823567ffffffffffffffff808211156131df57600080fd5b6131eb868387016130c0565b9350602085013591508082111561320157600080fd5b5061320e85828601613134565b9150509250929050565b60006020828403121561322a57600080fd5b5035919050565b6000806040838503121561324457600080fd5b8235915060208301356132568161301c565b809150509250929050565b6000806040838503121561327457600080fd5b823567ffffffffffffffff81111561328b57600080fd5b613297858286016130c0565b92505060208301356132568161301c565b6000602082840312156132ba57600080fd5b813567ffffffffffffffff8111156132d157600080fd5b6132dd848285016130c0565b949350505050565b6000806000606084860312156132fa57600080fd5b833567ffffffffffffffff8082111561331257600080fd5b61331e878388016130c0565b9450602086013591508082111561333457600080fd5b5061334186828701613134565b925050604084013590509250925092565b6000806040838503121561336557600080fd5b50508035926020909101359150565b60008083601f84011261338657600080fd5b50813567ffffffffffffffff81111561339e57600080fd5b6020830191508360208260051b85010111156133b957600080fd5b9250929050565b6000806000806000606086880312156133d857600080fd5b85359450602086013567ffffffffffffffff808211156133f757600080fd5b61340389838a01613374565b9096509450604088013591508082111561341c57600080fd5b5061342988828901613374565b969995985093965092949392505050565b60008060006060848603121561344f57600080fd5b8335925060208401356134618161301c565b929592945050506040919091013590565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156134c15781516001600160a01b03168752958201959082019060010161349c565b509495945050505050565b6001600160a01b03831681526040602082018190526000906132dd90830184613488565b634e487b7160e01b600052601160045260246000fd5b600060018201613518576135186134f0565b5060010190565b60008261353c57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561355b5761355b6134f0565b500290565b60006020828403121561357257600080fd5b8151801515811461304e57600080fd5b60008219821115613595576135956134f0565b500190565b6000602082840312156135ac57600080fd5b5051919050565b8281526040602082015260006132dd6040830184613488565b600080604083850312156135df57600080fd5b82516135ea8161301c565b60208401519092506132568161301c565b60208152600061304e6020830184613488565b60006020828403121561362057600080fd5b815161304e8161301c565b6001600160a01b0387811682528681166020830152858116604083015284166060820152821515608082015260c060a0820181905260009061366f90830184613488565b98975050505050505050565b6000806040838503121561368e57600080fd5b505080516020909101519092909150565b6000828210156136b1576136b16134f0565b500390565b6000825160005b818110156136d757602081860181015185830152016136bd565b818111156136e6576000828501525b50919091019291505056fea2646970667358221220a3ca9e8d225c9064a70396b32eb8b5bea9e45f9f1f0d915fc22a0d1062fe588164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c806379e938241161019d578063ac4afa38116100e9578063d23254b4116100a2578063e586875f1161007c578063e586875f146107b1578063ea94ee44146107c4578063eae40f26146107d7578063f3594be01461080057600080fd5b8063d23254b414610773578063d560b0d71461079e578063e4fc6b6d146104a057600080fd5b8063ac4afa38146106c1578063ae21c4cb146106d4578063b9a09fd5146106fd578063c42cf53514610726578063c45a015514610739578063c527ee1f1461076057600080fd5b80639b6a9d7211610156578063a61c713a11610130578063a61c713a14610658578063a7cac8461461066b578063a86a366d1461068b578063aa79979b1461069e57600080fd5b80639b6a9d721461061f5780639f06247b14610632578063a5f4301e1461064557600080fd5b806379e93824146105965780637ac09bf7146105b65780638dd598fb146105c957806396c82e57146105f0578063992a7933146105f95780639b19251a1461060c57600080fd5b8063462d0b2e1161025c578063666256aa116102155780636ecbe38a116101ef5780636ecbe38a1461054a5780637625391a1461055d5780637715ee75146105705780637778960e1461058357600080fd5b8063666256aa146104fd57806368c3acb314610510578063698473e31461053757600080fd5b8063462d0b2e1461048d57806347b3c6ba146104a057806353d78693146104a85780636138889b146104b057806361aacd47146104c357806363453ae1146104ea57600080fd5b8063310bd74b116102c95780633af32abf116102a35780633af32abf146104245780633c6b16ab14610447578063402914f51461045a578063411b1f771461047a57600080fd5b8063310bd74b146103d757806332145f90146103ea57806338752a9d146103fd57600080fd5b806306d6a1b21461031157806307546172146103575780630c340a241461036a5780631703e5f91461037d5780631f7b6d32146103b057806320b1cb6f146103c2575b600080fd5b61033a61031f366004613031565b6008602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60025461033a906001600160a01b031681565b60035461033a906001600160a01b031681565b6103a061038b366004613031565b60126020526000908152604090205460ff1681565b604051901515815260200161034e565b6006545b60405190815260200161034e565b6103d56103d03660046131b4565b610820565b005b6103d56103e5366004613218565b6108d6565b6103d56103f8366004613218565b610a81565b61033a7f000000000000000000000000000000000000000000000000000000000000000081565b6103a0610432366004613031565b60116020526000908152604090205460ff1681565b6103d5610455366004613218565b610c7e565b6103b4610468366004613031565b60166020526000908152604090205481565b6103d5610488366004613231565b610d51565b6103d561049b366004613261565b610e2b565b6103d5610ea6565b6103d5610eb7565b6103d56104be3660046132a8565b610ec6565b61033a7f000000000000000000000000000000000000000000000000000000000000000081565b6103d56104f8366004613031565b610f0a565b6103d561050b3660046132e5565b611132565b61033a7f000000000000000000000000000000000000000000000000000000000000000081565b6103d5610545366004613231565b61127b565b6103d5610558366004613031565b611371565b6103d561056b366004613352565b61137d565b6103d561057e3660046132e5565b6113e3565b60045461033a906001600160a01b031681565b6103b46105a4366004613218565b600e6020526000908152604090205481565b6103d56105c43660046133c0565b61152c565b61033a7f000000000000000000000000000000000000000000000000000000000000000081565b6103b460055481565b6103d5610607366004613031565b6116c4565b6103d561061a366004613031565b6117c9565b6103d561062d366004613352565b6117e9565b6103d5610640366004613031565b61184f565b61033a610653366004613031565b61194c565b6103d561066636600461343a565b61234d565b6103b4610679366004613031565b600b6020526000908152604090205481565b61033a610699366004613352565b6123d1565b6103a06106ac366004613031565b60106020526000908152604090205460ff1681565b61033a6106cf366004613218565b612409565b61033a6106e2366004613031565b600a602052600090815260409020546001600160a01b031681565b61033a61070b366004613031565b6007602052600090815260409020546001600160a01b031681565b6103d5610734366004613031565b612433565b61033a7f000000000000000000000000000000000000000000000000000000000000000081565b6103d561076e3660046132a8565b61246c565b6103b4610781366004613231565b600c60209081526000928352604080842090915290825290205481565b6103d56107ac3660046132a8565b612589565b6103d56107bf366004613031565b6125c9565b6103d56107d236600461343a565b612602565b61033a6107e5366004613031565b6009602052600090815260409020546001600160a01b031681565b6103b461080e366004613218565b600f6020526000908152604090205481565b60005b82518110156108d15782818151811061083e5761083e613472565b60200260200101516001600160a01b03166331279d3d3384848151811061086757610867613472565b60200260200101516040518363ffffffff1660e01b815260040161088c9291906134cc565b600060405180830381600087803b1580156108a657600080fd5b505af11580156108ba573d6000803e3d6000fd5b5050505080806108c990613506565b915050610823565b505050565b6000818152600f6020526040902054819062093a806108f5814261351f565b6108ff9190613541565b116109515760405162461bcd60e51b815260206004820152601e60248201527f544f4b454e5f414c52454144595f564f5445445f544849535f45504f4348000060448201526064015b60405180910390fd5b60405163430c208160e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190613560565b6109e957600080fd5b6000828152600f60205260409020429055610a0382612661565b60405163c1f0fb9f60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c1f0fb9f90602401600060405180830381600087803b158015610a6557600080fd5b505af1158015610a79573d6000803e3d6000fd5b505050505050565b60405163430c208160e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa158015610aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b109190613560565b80610b2557506003546001600160a01b031633145b610b2e57600080fd5b6000818152600d6020908152604080832080548251818502810185019093528083529192909190830182828015610b8e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b70575b5050505050905060008151905060008167ffffffffffffffff811115610bb657610bb6613055565b604051908082528060200260200182016040528015610bdf578160200160208202803683370190505b50905060005b82811015610c6c57600c60008681526020019081526020016000206000858381518110610c1457610c14613472565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610c4f57610c4f613472565b602090810291909101015280610c6481613506565b915050610be5565b50610c78848483612908565b50505050565b610caa7f0000000000000000000000000000000000000000000000000000000000000000333084612d86565b600554600090610cc283670de0b6b3a7640000613541565b610ccc919061351f565b90508015610cec578060146000828254610ce69190613582565b90915550505b6040518281526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf50826906020015b60405180910390a35050565b3360009081526010602052604090205460ff16610d6d57600080fd5b8115610dee57604051634c35bec560e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063986b7d8a90602401600060405180830381600087803b158015610dd557600080fd5b505af1158015610de9573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907fae268d9aab12f3605f58efd74fd3801fa812b03fdb44317eb70f46dff0e19e2290602001610d45565b6002546001600160a01b03163314610e4257600080fd5b60005b8251811015610e8257610e70838281518110610e6357610e63613472565b6020026020010151612e76565b80610e7a81613506565b915050610e45565b50600280546001600160a01b0319166001600160a01b039290921691909117905550565b600654610eb59060009061137d565b565b600654610eb5906000906117e9565b60005b8151811015610f0657610ef4828281518110610ee757610ee7613472565b6020026020010151610f0a565b80610efe81613506565b915050610ec9565b5050565b601354600114610f1957600080fd5b60026013819055546040805163ed29fc1160e01b815290516001600160a01b039092169163ed29fc119160048082019260209290919082900301816000875af1158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e919061359a565b50610f9881612ee9565b6001600160a01b0381811660008181526016602052604090819020549051634cde602960e11b81527f00000000000000000000000000000000000000000000000000000000000000009093166004840152916399bcc05290602401602060405180830381865afa158015611010573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611034919061359a565b8111801561104e5750600061104c62093a808361351f565b115b15611129576001600160a01b03828116600081815260166020526040808220919091555163b66503cf60e01b81527f00000000000000000000000000000000000000000000000000000000000000009092166004830152602482018390529063b66503cf90604401600060405180830381600087803b1580156110d057600080fd5b505af11580156110e4573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507f4fa9693cae526341d334e2862ca2413b2e503f1266255f9e0869fb36e6d89b179060200160405180910390a35b50506001601355565b60405163430c208160e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa15801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c19190613560565b6111ca57600080fd5b60005b8351811015610c78578381815181106111e8576111e8613472565b60200260200101516001600160a01b031663a7852afa8385848151811061121157611211613472565b60200260200101516040518363ffffffff1660e01b81526004016112369291906135b3565b600060405180830381600087803b15801561125057600080fd5b505af1158015611264573d6000803e3d6000fd5b50505050808061127390613506565b9150506111cd565b3360009081526010602052604090205460ff1661129757600080fd5b3360009081526012602052604090205460ff166112b357600080fd5b81156113345760405163fbd3a29d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fbd3a29d90602401600060405180830381600087803b15801561131b57600080fd5b505af115801561132f573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907f60940192810a6fb3bce3fd3e2e3a13fd6ccc7605e963fb87ee971aba829989bd90602001610d45565b61137a81612ee9565b50565b815b818110156108d1576113d160076000600684815481106113a1576113a1613472565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416610f0a565b806113db81613506565b91505061137f565b60405163430c208160e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa15801561144e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114729190613560565b61147b57600080fd5b60005b8351811015610c785783818151811061149957611499613472565b60200260200101516001600160a01b031663a7852afa838584815181106114c2576114c2613472565b60200260200101516040518363ffffffff1660e01b81526004016114e79291906135b3565b600060405180830381600087803b15801561150157600080fd5b505af1158015611515573d6000803e3d6000fd5b50505050808061152490613506565b91505061147e565b6000858152600f6020526040902054859062093a8061154b814261351f565b6115559190613541565b116115a25760405162461bcd60e51b815260206004820152601e60248201527f544f4b454e5f414c52454144595f564f5445445f544849535f45504f434800006044820152606401610948565b60405163430c208160e01b8152336004820152602481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa15801561160d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116319190613560565b61163a57600080fd5b83821461164657600080fd5b6000868152600f602090815260409182902042905581518682028181018301909352868152610a799289928991899182919085019084908082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525061290892505050565b6004546001600160a01b031633146117165760405162461bcd60e51b81526020600482015260156024820152741b9bdd08195b595c99d95b98de4818dbdd5b98da5b605a1b6044820152606401610948565b6001600160a01b03811660009081526012602052604090205460ff166117735760405162461bcd60e51b815260206004820152601260248201527119d85d59d948185b1c9958591e481919585960721b6044820152606401610948565b6001600160a01b0381166000818152601260209081526040808320805460ff191690556016909152808220829055517f04a5d3f5d80d22d9345acc80618f4a4e7e663cf9e1aed23b57d975acec002ba79190a250565b6003546001600160a01b031633146117e057600080fd5b61137a81612e76565b815b818110156108d15761183d600760006006848154811061180d5761180d613472565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416612ee9565b8061184781613506565b9150506117eb565b6004546001600160a01b031633146118a15760405162461bcd60e51b81526020600482015260156024820152741b9bdd08195b595c99d95b98de4818dbdd5b98da5b605a1b6044820152606401610948565b6001600160a01b03811660009081526012602052604090205460ff16156119005760405162461bcd60e51b8152602060048201526013602482015272676175676520616c726561647920616c69766560681b6044820152606401610948565b6001600160a01b038116600081815260126020526040808220805460ff19166001179055517fed18e9faa3dccfd8aa45f69c4de40546b2ca9cccc4538a2323531656516db1aa9190a250565b6001600160a01b038181166000908152600760205260408120549091161561199f5760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b6044820152606401610948565b60408051600380825260808201909252600091602082016060803683375050604080516002808252606082018352939450600093909250906020830190803683370190505060405163e5e31b1360e01b81526001600160a01b0386811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063e5e31b1390602401602060405180830381865afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a749190613560565b90506000808215611c7057866001600160a01b0316639d63848a6040518163ffffffff1660e01b815260040160408051808303816000875af1158015611abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae291906135cc565b80925081935050508185600081518110611afe57611afe613472565b60200260200101906001600160a01b031690816001600160a01b0316815250508085600181518110611b3257611b32613472565b60200260200101906001600160a01b031690816001600160a01b0316815250508184600081518110611b6657611b66613472565b60200260200101906001600160a01b031690816001600160a01b0316815250508084600181518110611b9a57611b9a613472565b6001600160a01b0392831660209182029290920101527f0000000000000000000000000000000000000000000000000000000000000000811690831614801590611c165750806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614155b15611c70577f000000000000000000000000000000000000000000000000000000000000000085600281518110611c4f57611c4f613472565b60200260200101906001600160a01b031690816001600160a01b0316815250505b6003546001600160a01b03163314611d335782611cb85760405162461bcd60e51b81526020600482015260066024820152650857dc1bdbdb60d21b6044820152606401610948565b6001600160a01b03821660009081526011602052604090205460ff168015611cf857506001600160a01b03811660009081526011602052604090205460ff165b611d335760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b6044820152606401610948565b604051632a26b9eb60e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632a26b9eb90611d829088906004016135fb565b6020604051808303816000875af1158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc5919061360e565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636485f0c4886040518263ffffffff1660e01b8152600401611e1591906135fb565b6020604051808303816000875af1158015611e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e58919061360e565b604051631af469cb60e21b81526001600160a01b0380831660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690636bd1a72c906024016020604051808303816000875af1158015611ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eea919061360e565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630bc25f4f8c86867f00000000000000000000000000000000000000000000000000000000000000008c8f6040518763ffffffff1660e01b8152600401611f649695949392919061362b565b6020604051808303816000875af1158015611f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa7919061360e565b60405163095ea7b360e01b81526001600160a01b03808316600483015260001960248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561201c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120409190613560565b508360096000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600a6000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600760008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a60086000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160106000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160126000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506121ee81612ee9565b60068054600180820183556000929092527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b038e169081179091556040516305916c7f60e51b815260048101929092529063b22d8fe090602401600060405180830381600087803b15801561227657600080fd5b505af115801561228a573d6000803e3d6000fd5b5050604051630ccccab360e11b81526001600160a01b0385811660048301528e16925063199995669150602401600060405180830381600087803b1580156122d157600080fd5b505af11580156122e5573d6000803e3d6000fd5b5050604080513381526001600160a01b0388811660208301528681168284015291518f831694508783169350918516917f63b97929cae47d2d1c9d5b568dcc31ecc6b6be5a51168abafc3d5d07e29add919181900360600190a49a9950505050505050505050565b3360009081526010602052604090205460ff1661236957600080fd5b3360009081526012602052604090205460ff1661238557600080fd5b604080518481526020810183905233916001600160a01b038516917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791015b60405180910390a3505050565b600d60205281600052604060002081815481106123ed57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6006818154811061241957600080fd5b6000918252602090912001546001600160a01b0316905081565b6003546001600160a01b0316331461244a57600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60005b8151811015610f065781818151811061248a5761248a613472565b60200260200101516001600160a01b031663e57482136040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f39190613560565b156125775781818151811061250a5761250a613472565b60200260200101516001600160a01b031663d294f0936040518163ffffffff1660e01b815260040160408051808303816000875af1158015612550573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612574919061367b565b50505b8061258181613506565b91505061246f565b60005b8151811015610f06576125b78282815181106125aa576125aa613472565b6020026020010151612ee9565b806125c181613506565b91505061258c565b6004546001600160a01b031633146125e057600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526010602052604090205460ff1661261e57600080fd5b604080518481526020810183905233916001600160a01b038516917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb56791016123c4565b6000818152600d6020526040812080549091805b828110156128cc57600084828154811061269157612691613472565b6000918252602080832090910154888352600c825260408084206001600160a01b039092168085529190925291205490915080156128b7576001600160a01b038083166000908152600760205260409020546126ed9116612ee9565b6001600160a01b0382166000908152600b60205260408120805483929061271590849061369f565b90915550506000878152600c602090815260408083206001600160a01b03861684529091528120805483929061274c90849061369f565b90915550508015612870576001600160a01b038281166000908152600760209081526040808320548416835260099091529081902054905163278afc8b60e21b815260048101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b1580156127c257600080fd5b505af11580156127d6573d6000803e3d6000fd5b505050506001600160a01b0382811660009081526007602090815260408083205484168352600a9091529081902054905163278afc8b60e21b815260048101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b15801561284557600080fd5b505af1158015612859573d6000803e3d6000fd5b5050505080846128699190613582565b935061287d565b61287a818561369f565b93505b60408051888152602081018390527fa9f3ca5f8a9e1580edb2741e0ba560084ec72e0067ba3423f9e9327a176882db910160405180910390a15b505080806128c490613506565b915050612675565b5080600560008282546128df919061369f565b90915550506000848152600e60209081526040808320839055600d9091528120610c7891612fea565b61291183612661565b81516040516339f890b560e21b8152600481018590526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa15801561297b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299f919061359a565b90506000806000805b858110156129e9578681815181106129c2576129c2613472565b6020026020010151846129d59190613582565b9350806129e181613506565b9150506129a8565b5060005b85811015612cd2576000888281518110612a0957612a09613472565b6020908102919091018101516001600160a01b038082166000908152600784526040808220549092168082526010909452205490925060ff1615612cbd57600086888b8681518110612a5d57612a5d613472565b6020026020010151612a6f9190613541565b612a79919061351f565b60008d8152600c602090815260408083206001600160a01b038816845290915290205490915015612aa957600080fd5b80600003612ab657600080fd5b612abf82612ee9565b60008c8152600d6020908152604080832080546001810182559084528284200180546001600160a01b0319166001600160a01b0388169081179091558352600b90915281208054839290612b14908490613582565b909155505060008c8152600c602090815260408083206001600160a01b038716845290915281208054839290612b4b908490613582565b90915550506001600160a01b038083166000908152600960205260409081902054905163f320772360e01b815260048101849052602481018f905291169063f320772390604401600060405180830381600087803b158015612bac57600080fd5b505af1158015612bc0573d6000803e3d6000fd5b50505050600a6000836001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031663f3207723828e6040518363ffffffff1660e01b8152600401612c33929190918252602082015260400190565b600060405180830381600087803b158015612c4d57600080fd5b505af1158015612c61573d6000803e3d6000fd5b505050508085612c719190613582565b9450612c7d8187613582565b604080518e81526020810184905291975033917fea66f58e474bc09f580000e81f31b334d171db387d0c6098ba47bd897741679b910160405180910390a2505b50508080612cca90613506565b9150506129ed565b508015612d545760405163fd4a77f160e01b8152600481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fd4a77f190602401600060405180830381600087803b158015612d3b57600080fd5b505af1158015612d4f573d6000803e3d6000fd5b505050505b8160056000828254612d669190613582565b90915550506000978852600e602052604090972096909655505050505050565b6000846001600160a01b03163b11612d9d57600080fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691612e0191906136b6565b6000604051808303816000865af19150503d8060008114612e3e576040519150601f19603f3d011682016040523d82523d6000602084013e612e43565b606091505b5091509150818015612e6d575080511580612e6d575080806020019051810190612e6d9190613560565b610a7957600080fd5b6001600160a01b03811660009081526011602052604090205460ff1615612e9c57600080fd5b6001600160a01b038116600081815260116020526040808220805460ff191660011790555133917f6661a7108aecd07864384529117d96c319c1163e3010c01390f6b704726e07de91a350565b6001600160a01b03808216600090815260086020908152604080832054909316808352600b909152919020548015612fc9576001600160a01b038316600090815260156020526040812080546014549182905591612f47838361369f565b90508015610a79576000670de0b6b3a7640000612f648387613541565b612f6e919061351f565b6001600160a01b03881660009081526012602052604090205490915060ff1615612fc0576001600160a01b03871660009081526016602052604081208054839290612fba908490613582565b90915550505b50505050505050565b6014546001600160a01b038416600090815260156020526040902055505050565b508054600082559060005260206000209081019061137a91905b808211156130185760008155600101613004565b5090565b6001600160a01b038116811461137a57600080fd5b60006020828403121561304357600080fd5b813561304e8161301c565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561309457613094613055565b604052919050565b600067ffffffffffffffff8211156130b6576130b6613055565b5060051b60200190565b600082601f8301126130d157600080fd5b813560206130e66130e18361309c565b61306b565b82815260059290921b8401810191818101908684111561310557600080fd5b8286015b8481101561312957803561311c8161301c565b8352918301918301613109565b509695505050505050565b600082601f83011261314557600080fd5b813560206131556130e18361309c565b82815260059290921b8401810191818101908684111561317457600080fd5b8286015b8481101561312957803567ffffffffffffffff8111156131985760008081fd5b6131a68986838b01016130c0565b845250918301918301613178565b600080604083850312156131c757600080fd5b823567ffffffffffffffff808211156131df57600080fd5b6131eb868387016130c0565b9350602085013591508082111561320157600080fd5b5061320e85828601613134565b9150509250929050565b60006020828403121561322a57600080fd5b5035919050565b6000806040838503121561324457600080fd5b8235915060208301356132568161301c565b809150509250929050565b6000806040838503121561327457600080fd5b823567ffffffffffffffff81111561328b57600080fd5b613297858286016130c0565b92505060208301356132568161301c565b6000602082840312156132ba57600080fd5b813567ffffffffffffffff8111156132d157600080fd5b6132dd848285016130c0565b949350505050565b6000806000606084860312156132fa57600080fd5b833567ffffffffffffffff8082111561331257600080fd5b61331e878388016130c0565b9450602086013591508082111561333457600080fd5b5061334186828701613134565b925050604084013590509250925092565b6000806040838503121561336557600080fd5b50508035926020909101359150565b60008083601f84011261338657600080fd5b50813567ffffffffffffffff81111561339e57600080fd5b6020830191508360208260051b85010111156133b957600080fd5b9250929050565b6000806000806000606086880312156133d857600080fd5b85359450602086013567ffffffffffffffff808211156133f757600080fd5b61340389838a01613374565b9096509450604088013591508082111561341c57600080fd5b5061342988828901613374565b969995985093965092949392505050565b60008060006060848603121561344f57600080fd5b8335925060208401356134618161301c565b929592945050506040919091013590565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156134c15781516001600160a01b03168752958201959082019060010161349c565b509495945050505050565b6001600160a01b03831681526040602082018190526000906132dd90830184613488565b634e487b7160e01b600052601160045260246000fd5b600060018201613518576135186134f0565b5060010190565b60008261353c57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561355b5761355b6134f0565b500290565b60006020828403121561357257600080fd5b8151801515811461304e57600080fd5b60008219821115613595576135956134f0565b500190565b6000602082840312156135ac57600080fd5b5051919050565b8281526040602082015260006132dd6040830184613488565b600080604083850312156135df57600080fd5b82516135ea8161301c565b60208401519092506132568161301c565b60208152600061304e6020830184613488565b60006020828403121561362057600080fd5b815161304e8161301c565b6001600160a01b0387811682528681166020830152858116604083015284166060820152821515608082015260c060a0820181905260009061366f90830184613488565b98975050505050505050565b6000806040838503121561368e57600080fd5b505080516020909101519092909150565b6000828210156136b1576136b16134f0565b500390565b6000825160005b818110156136d757602081860181015185830152016136bd565b818111156136e6576000828501525b50919091019291505056fea2646970667358221220a3ca9e8d225c9064a70396b32eb8b5bea9e45f9f1f0d915fc22a0d1062fe588164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14722,
        "contract": "contracts/Voter.sol:Voter",
        "label": "multisig",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14725,
        "contract": "contracts/Voter.sol:Voter",
        "label": "turnstile",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14742,
        "contract": "contracts/Voter.sol:Voter",
        "label": "minter",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 14744,
        "contract": "contracts/Voter.sol:Voter",
        "label": "governor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 14746,
        "contract": "contracts/Voter.sol:Voter",
        "label": "emergencyCouncil",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 14748,
        "contract": "contracts/Voter.sol:Voter",
        "label": "totalWeight",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14751,
        "contract": "contracts/Voter.sol:Voter",
        "label": "pools",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14755,
        "contract": "contracts/Voter.sol:Voter",
        "label": "gauges",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 14759,
        "contract": "contracts/Voter.sol:Voter",
        "label": "poolForGauge",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 14763,
        "contract": "contracts/Voter.sol:Voter",
        "label": "internal_bribes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 14767,
        "contract": "contracts/Voter.sol:Voter",
        "label": "external_bribes",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 14771,
        "contract": "contracts/Voter.sol:Voter",
        "label": "weights",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14777,
        "contract": "contracts/Voter.sol:Voter",
        "label": "votes",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14782,
        "contract": "contracts/Voter.sol:Voter",
        "label": "poolVote",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 14786,
        "contract": "contracts/Voter.sol:Voter",
        "label": "usedWeights",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14790,
        "contract": "contracts/Voter.sol:Voter",
        "label": "lastVoted",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14794,
        "contract": "contracts/Voter.sol:Voter",
        "label": "isGauge",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14798,
        "contract": "contracts/Voter.sol:Voter",
        "label": "isWhitelisted",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14802,
        "contract": "contracts/Voter.sol:Voter",
        "label": "isAlive",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14963,
        "contract": "contracts/Voter.sol:Voter",
        "label": "_unlocked",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 16096,
        "contract": "contracts/Voter.sol:Voter",
        "label": "index",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 16100,
        "contract": "contracts/Voter.sol:Voter",
        "label": "supplyIndex",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16104,
        "contract": "contracts/Voter.sol:Voter",
        "label": "claimable",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}