{
  "address": "0xa9fa811Cc3BDdF9ba8dAC435f26B77525Eb3B546",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "allowedRewards",
          "type": "address[]"
        }
      ],
      "name": "createExternalBribe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "allowedRewards",
          "type": "address[]"
        }
      ],
      "name": "createInternalBribe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "last_external_bribe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "last_internal_bribe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6fe6b6936f29fc6af9c491f2619e0239172a6a2760b98e10045f4ca3f10e19f",
  "receipt": {
    "to": null,
    "from": "0x53f3B51FD7F327E1Ec4E6eAa3A049149cB2acaD2",
    "contractAddress": "0xa9fa811Cc3BDdF9ba8dAC435f26B77525Eb3B546",
    "transactionIndex": 0,
    "gasUsed": "4750021",
    "logsBloom": "0x
    "blockHash": "0x85ad05bf98ee1e0cd5eddd6354d64cdf439b9d22df9da5dc3641b0cea2e1ad90",
    "transactionHash": "0xc6fe6b6936f29fc6af9c491f2619e0239172a6a2760b98e10045f4ca3f10e19f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2975076,
        "transactionHash": "0xc6fe6b6936f29fc6af9c491f2619e0239172a6a2760b98e10045f4ca3f10e19f",
        "address": "0xEcf044C5B4b867CFda001101c617eCd347095B44",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000a178469e3d08beaa0a289e416ab924f10807989",
          "0x00000000000000000000000000000000000000000000000000000000000000c9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x85ad05bf98ee1e0cd5eddd6354d64cdf439b9d22df9da5dc3641b0cea2e1ad90"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2975076,
        "transactionHash": "0xc6fe6b6936f29fc6af9c491f2619e0239172a6a2760b98e10045f4ca3f10e19f",
        "address": "0xEcf044C5B4b867CFda001101c617eCd347095B44",
        "topics": [
          "0xcc0bec1447060c88cdc5a739cf29cfa26c453574dd3f5b9e4dcc317d6401cb1c"
        ],
        "data": "0x000000000000000000000000a9fa811cc3bddf9ba8dac435f26b77525eb3b5460000000000000000000000000a178469e3d08beaa0a289e416ab924f1080798900000000000000000000000000000000000000000000000000000000000000c9",
        "logIndex": 1,
        "blockHash": "0x85ad05bf98ee1e0cd5eddd6354d64cdf439b9d22df9da5dc3641b0cea2e1ad90"
      }
    ],
    "blockNumber": 2975076,
    "cumulativeGasUsed": "4750021",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "35e0ac8ae47caef0caca6801c152e6fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedRewards\",\"type\":\"address[]\"}],\"name\":\"createExternalBribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedRewards\",\"type\":\"address[]\"}],\"name\":\"createInternalBribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_external_bribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_internal_bribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/BribeFactory.sol\":\"BribeFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363736353439383830373835\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ExternalBribe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"contracts/interfaces/IBribe.sol\\\";\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\nimport \\\"contracts/interfaces/IGauge.sol\\\";\\nimport \\\"contracts/interfaces/IVoter.sol\\\";\\nimport \\\"contracts/interfaces/IVotingEscrow.sol\\\";\\nimport \\\"contracts/interfaces/ITurnstile.sol\\\";\\n\\n// Bribes pay out rewards for a given pool based on the votes that were received from the user (goes hand in hand with Voter.vote())\\ncontract ExternalBribe is IBribe {\\n    address internal multisig = 0x0a178469E3d08BEAA0a289E416Ab924F10807989;\\n    address internal turnstile = 0xEcf044C5B4b867CFda001101c617eCd347095B44;\\n    address public immutable voter; // only voter can modify balances (since it only happens on vote())\\n    address public immutable _ve; // \\u5929\\u4f7f\\u306e\\u305f\\u307e\\u3054\\n\\n    uint256 internal constant DURATION = 7 days; // rewards are released over the voting period\\n    uint256 internal constant MAX_REWARD_TOKENS = 16;\\n\\n    uint256 internal constant PRECISION = 10**18;\\n\\n    uint256 public totalSupply;\\n    mapping(uint256 => uint256) public balanceOf;\\n    mapping(address => mapping(uint256 => uint256)) public tokenRewardsPerEpoch;\\n    mapping(address => uint256) public periodFinish;\\n    mapping(address => mapping(uint256 => uint256)) public lastEarn;\\n\\n    address[] public rewards;\\n    mapping(address => bool) public isReward;\\n\\n    /// @notice A checkpoint for marking balance\\n    struct Checkpoint {\\n        uint256 timestamp;\\n        uint256 balanceOf;\\n    }\\n\\n    /// @notice A checkpoint for marking supply\\n    struct SupplyCheckpoint {\\n        uint256 timestamp;\\n        uint256 supply;\\n    }\\n\\n    /// @notice A record of balance checkpoints for each account, by index\\n    mapping(uint256 => mapping(uint256 => Checkpoint)) public checkpoints;\\n    /// @notice The number of checkpoints for each account\\n    mapping(uint256 => uint256) public numCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\\n    /// @notice The number of checkpoints\\n    uint256 public supplyNumCheckpoints;\\n\\n    event Deposit(address indexed from, uint256 tokenId, uint256 amount);\\n    event Withdraw(address indexed from, uint256 tokenId, uint256 amount);\\n    event NotifyReward(\\n        address indexed from,\\n        address indexed reward,\\n        uint256 epoch,\\n        uint256 amount\\n    );\\n    event ClaimRewards(\\n        address indexed from,\\n        address indexed reward,\\n        uint256 amount\\n    );\\n\\n    constructor(address _voter, address[] memory _allowedRewardTokens) {\\n        voter = _voter;\\n        _ve = IVoter(_voter)._ve();\\n\\n        for (uint256 i; i < _allowedRewardTokens.length; i++) {\\n            if (_allowedRewardTokens[i] != address(0)) {\\n                isReward[_allowedRewardTokens[i]] = true;\\n                rewards.push(_allowedRewardTokens[i]);\\n            }\\n        }\\n\\n        ITurnstile(turnstile).register(multisig);\\n    }\\n\\n    // simple re-entrancy check\\n    uint256 internal _unlocked = 1;\\n    modifier lock() {\\n        require(_unlocked == 1);\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n\\n    function _bribeStart(uint256 timestamp) internal pure returns (uint256) {\\n        return timestamp - (timestamp % (7 days));\\n    }\\n\\n    function getEpochStart(uint256 timestamp) public pure returns (uint256) {\\n        uint256 bribeStart = _bribeStart(timestamp);\\n        uint256 bribeEnd = bribeStart + DURATION;\\n        return timestamp < bribeEnd ? bribeStart : bribeStart + 7 days;\\n    }\\n\\n    /**\\n     * @notice Determine the prior balance for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param tokenId The token of the NFT to check\\n     * @param timestamp The timestamp to get the balance at\\n     * @return The balance the account had as of the given block\\n     */\\n    function getPriorBalanceIndex(uint256 tokenId, uint256 timestamp)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 nCheckpoints = numCheckpoints[tokenId];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n        // First check most recent balance\\n        if (checkpoints[tokenId][nCheckpoints - 1].timestamp <= timestamp) {\\n            return (nCheckpoints - 1);\\n        }\\n        // Next check implicit zero balance\\n        if (checkpoints[tokenId][0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 lower = 0;\\n        uint256 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[tokenId][center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    function getPriorSupplyIndex(uint256 timestamp)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 nCheckpoints = supplyNumCheckpoints;\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\\n            return (nCheckpoints - 1);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (supplyCheckpoints[0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 lower = 0;\\n        uint256 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    function _writeCheckpoint(uint256 tokenId, uint256 balance) internal {\\n        uint256 _timestamp = block.timestamp;\\n        uint256 _nCheckPoints = numCheckpoints[tokenId];\\n        if (\\n            _nCheckPoints > 0 &&\\n            checkpoints[tokenId][_nCheckPoints - 1].timestamp == _timestamp\\n        ) {\\n            checkpoints[tokenId][_nCheckPoints - 1].balanceOf = balance;\\n        } else {\\n            checkpoints[tokenId][_nCheckPoints] = Checkpoint(\\n                _timestamp,\\n                balance\\n            );\\n            numCheckpoints[tokenId] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeSupplyCheckpoint() internal {\\n        uint256 _nCheckPoints = supplyNumCheckpoints;\\n        uint256 _timestamp = block.timestamp;\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\\n        ) {\\n            supplyCheckpoints[_nCheckPoints - 1].supply = totalSupply;\\n        } else {\\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\\n                _timestamp,\\n                totalSupply\\n            );\\n            supplyNumCheckpoints = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function rewardsListLength() external view returns (uint256) {\\n        return rewards.length;\\n    }\\n\\n    // returns the last time the reward was modified or periodFinish if the reward has ended\\n    function lastTimeRewardApplicable(address token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return Math.min(block.timestamp, periodFinish[token]);\\n    }\\n\\n    // allows a user to claim rewards for a given token\\n    function getReward(uint256 tokenId, address[] memory tokens) external lock {\\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, tokenId));\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 _reward = earned(tokens[i], tokenId);\\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\\n            if (_reward > 0) _safeTransfer(tokens[i], msg.sender, _reward);\\n\\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\\n        }\\n    }\\n\\n    // used by Voter to allow batched reward claims\\n    function getRewardForOwner(uint256 tokenId, address[] memory tokens)\\n        external\\n        lock\\n    {\\n        require(msg.sender == voter);\\n        address _owner = IVotingEscrow(_ve).ownerOf(tokenId);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 _reward = earned(tokens[i], tokenId);\\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\\n            if (_reward > 0) _safeTransfer(tokens[i], _owner, _reward);\\n\\n            emit ClaimRewards(_owner, tokens[i], _reward);\\n        }\\n    }\\n\\n    function earned(address token, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _startTimestamp = lastEarn[token][tokenId];\\n        if (numCheckpoints[tokenId] == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _startIndex = getPriorBalanceIndex(tokenId, _startTimestamp);\\n        uint256 _endIndex = numCheckpoints[tokenId] - 1;\\n\\n        uint256 reward = 0;\\n        // you only earn once per epoch (after it's over)\\n        Checkpoint memory prevRewards; // reuse struct to avoid stack too deep\\n        prevRewards.timestamp = _bribeStart(_startTimestamp);\\n        uint256 _prevSupply = 1;\\n\\n        if (_endIndex > 0) {\\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\\n                Checkpoint memory cp0 = checkpoints[tokenId][i];\\n                uint256 _nextEpochStart = _bribeStart(cp0.timestamp);\\n                // check that you've earned it\\n                // this won't happen until a week has passed\\n                if (_nextEpochStart > prevRewards.timestamp) {\\n                    reward += prevRewards.balanceOf;\\n                }\\n\\n                prevRewards.timestamp = _nextEpochStart;\\n                _prevSupply = supplyCheckpoints[\\n                    getPriorSupplyIndex(_nextEpochStart + DURATION)\\n                ].supply;\\n                prevRewards.balanceOf =\\n                    (cp0.balanceOf *\\n                        tokenRewardsPerEpoch[token][_nextEpochStart]) /\\n                    _prevSupply;\\n            }\\n        }\\n\\n        Checkpoint memory cp = checkpoints[tokenId][_endIndex];\\n        uint256 _lastEpochStart = _bribeStart(cp.timestamp);\\n        uint256 _lastEpochEnd = _lastEpochStart + DURATION;\\n\\n        if (block.timestamp > _lastEpochEnd) {\\n            reward +=\\n                (cp.balanceOf * tokenRewardsPerEpoch[token][_lastEpochStart]) /\\n                supplyCheckpoints[getPriorSupplyIndex(_lastEpochEnd)].supply;\\n        }\\n\\n        return reward;\\n    }\\n\\n    // This is an external function, but internal notation is used since it can only be called \\\"internally\\\" from Gauges\\n    function _deposit(uint256 amount, uint256 tokenId) external {\\n        require(msg.sender == voter);\\n\\n        totalSupply += amount;\\n        balanceOf[tokenId] += amount;\\n\\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\\n        _writeSupplyCheckpoint();\\n\\n        emit Deposit(msg.sender, tokenId, amount);\\n    }\\n\\n    function _withdraw(uint256 amount, uint256 tokenId) external {\\n        require(msg.sender == voter);\\n\\n        totalSupply -= amount;\\n        balanceOf[tokenId] -= amount;\\n\\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\\n        _writeSupplyCheckpoint();\\n\\n        emit Withdraw(msg.sender, tokenId, amount);\\n    }\\n\\n    function left(address token) external view returns (uint256) {\\n        uint256 adjustedTstamp = getEpochStart(block.timestamp);\\n        return tokenRewardsPerEpoch[token][adjustedTstamp];\\n    }\\n\\n    function notifyRewardAmount(address token, uint256 amount) external lock {\\n        require(amount > 0);\\n        if (!isReward[token]) {\\n            require(\\n                IVoter(voter).isWhitelisted(token),\\n                \\\"bribe tokens must be whitelisted\\\"\\n            );\\n            require(\\n                rewards.length < MAX_REWARD_TOKENS,\\n                \\\"too many rewards tokens\\\"\\n            );\\n        }\\n        // bribes kick in at the start of next bribe period\\n        uint256 adjustedTstamp = getEpochStart(block.timestamp);\\n        uint256 epochRewards = tokenRewardsPerEpoch[token][adjustedTstamp];\\n\\n        _safeTransferFrom(token, msg.sender, address(this), amount);\\n        tokenRewardsPerEpoch[token][adjustedTstamp] = epochRewards + amount;\\n\\n        periodFinish[token] = adjustedTstamp + DURATION;\\n\\n        if (!isReward[token]) {\\n            isReward[token] = true;\\n            rewards.push(token);\\n        }\\n\\n        emit NotifyReward(msg.sender, token, adjustedTstamp, amount);\\n    }\\n\\n    function swapOutRewardToken(\\n        uint256 i,\\n        address oldToken,\\n        address newToken\\n    ) external {\\n        require(msg.sender == IVotingEscrow(_ve).team(), \\\"only team\\\");\\n        require(rewards[i] == oldToken);\\n        isReward[oldToken] = false;\\n        isReward[newToken] = true;\\n        rewards[i] = newToken;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(\\n                IERC20.transferFrom.selector,\\n                from,\\n                to,\\n                value\\n            )\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n}\\n\",\"keccak256\":\"0xca2f77876c2b9b0745bd54ac91716a02640bbafa181b2a9811aab3d5c2893503\",\"license\":\"MIT\"},\"contracts/InternalBribe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\nimport \\\"contracts/interfaces/IBribe.sol\\\";\\nimport \\\"contracts/interfaces/IERC20.sol\\\";\\nimport \\\"contracts/interfaces/IVoter.sol\\\";\\nimport \\\"contracts/interfaces/IVotingEscrow.sol\\\";\\nimport \\\"contracts/interfaces/ITurnstile.sol\\\";\\n\\n// Bribes pay out rewards for a given pool based on the votes that were received from the user (goes hand in hand with Voter.vote())\\ncontract InternalBribe is IBribe {\\n    address internal multisig = 0x0a178469E3d08BEAA0a289E416Ab924F10807989;\\n    address internal turnstile = 0xEcf044C5B4b867CFda001101c617eCd347095B44;\\n    address public immutable voter; // only voter can modify balances (since it only happens on vote())\\n    address public immutable _ve;\\n\\n    uint256 public constant DURATION = 7 days; // rewards are released over 7 days\\n\\n    uint256 internal constant MAX_REWARD_TOKENS = 16;\\n\\n    // default snx staking contract implementation\\n    mapping(address => uint256) public rewardRate;\\n    mapping(address => uint256) public periodFinish;\\n    mapping(address => uint256) public lastUpdateTime;\\n    mapping(address => uint256) public rewardPerTokenStored;\\n\\n    mapping(address => mapping(uint256 => uint256)) public lastEarn;\\n    mapping(address => mapping(uint256 => uint256))\\n        public userRewardPerTokenStored;\\n\\n    address[] public rewards;\\n    mapping(address => bool) public isReward;\\n\\n    uint256 public totalSupply;\\n    mapping(uint256 => uint256) public balanceOf;\\n\\n    /// @notice A checkpoint for marking balance\\n    struct Checkpoint {\\n        uint256 timestamp;\\n        uint256 balanceOf;\\n    }\\n\\n    /// @notice A checkpoint for marking reward rate\\n    struct RewardPerTokenCheckpoint {\\n        uint256 timestamp;\\n        uint256 rewardPerToken;\\n    }\\n\\n    /// @notice A checkpoint for marking supply\\n    struct SupplyCheckpoint {\\n        uint256 timestamp;\\n        uint256 supply;\\n    }\\n\\n    /// @notice A record of balance checkpoints for each account, by index\\n    mapping(uint256 => mapping(uint256 => Checkpoint)) public checkpoints;\\n    /// @notice The number of checkpoints for each account\\n    mapping(uint256 => uint256) public numCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\\n    /// @notice The number of checkpoints\\n    uint256 public supplyNumCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping(address => mapping(uint256 => RewardPerTokenCheckpoint))\\n        public rewardPerTokenCheckpoints;\\n    /// @notice The number of checkpoints for each token\\n    mapping(address => uint256) public rewardPerTokenNumCheckpoints;\\n\\n    event Deposit(address indexed from, uint256 tokenId, uint256 amount);\\n    event Withdraw(address indexed from, uint256 tokenId, uint256 amount);\\n    event NotifyReward(\\n        address indexed from,\\n        address indexed reward,\\n        uint256 amount\\n    );\\n    event ClaimRewards(\\n        address indexed from,\\n        address indexed reward,\\n        uint256 amount\\n    );\\n\\n    constructor(address _voter, address[] memory _allowedRewardTokens) {\\n        voter = _voter;\\n        _ve = IVoter(_voter)._ve();\\n\\n        for (uint256 i; i < _allowedRewardTokens.length; i++) {\\n            if (_allowedRewardTokens[i] != address(0)) {\\n                isReward[_allowedRewardTokens[i]] = true;\\n                rewards.push(_allowedRewardTokens[i]);\\n            }\\n        }\\n\\n        ITurnstile(turnstile).register(multisig);\\n    }\\n\\n    // simple re-entrancy check\\n    uint256 internal _unlocked = 1;\\n    modifier lock() {\\n        require(_unlocked == 1);\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n\\n    /**\\n     * @notice Determine the prior balance for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param tokenId The token of the NFT to check\\n     * @param timestamp The timestamp to get the balance at\\n     * @return The balance the account had as of the given block\\n     */\\n    function getPriorBalanceIndex(uint256 tokenId, uint256 timestamp)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 nCheckpoints = numCheckpoints[tokenId];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[tokenId][nCheckpoints - 1].timestamp <= timestamp) {\\n            return (nCheckpoints - 1);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[tokenId][0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 lower = 0;\\n        uint256 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[tokenId][center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    function getPriorSupplyIndex(uint256 timestamp)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 nCheckpoints = supplyNumCheckpoints;\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\\n            return (nCheckpoints - 1);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (supplyCheckpoints[0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 lower = 0;\\n        uint256 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    function getPriorRewardPerToken(address token, uint256 timestamp)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 nCheckpoints = rewardPerTokenNumCheckpoints[token];\\n        if (nCheckpoints == 0) {\\n            return (0, 0);\\n        }\\n\\n        // First check most recent balance\\n        if (\\n            rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp <=\\n            timestamp\\n        ) {\\n            return (\\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1]\\n                    .rewardPerToken,\\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp\\n            );\\n        }\\n\\n        // Next check implicit zero balance\\n        if (rewardPerTokenCheckpoints[token][0].timestamp > timestamp) {\\n            return (0, 0);\\n        }\\n\\n        uint256 lower = 0;\\n        uint256 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            RewardPerTokenCheckpoint memory cp = rewardPerTokenCheckpoints[\\n                token\\n            ][center];\\n            if (cp.timestamp == timestamp) {\\n                return (cp.rewardPerToken, cp.timestamp);\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return (\\n            rewardPerTokenCheckpoints[token][lower].rewardPerToken,\\n            rewardPerTokenCheckpoints[token][lower].timestamp\\n        );\\n    }\\n\\n    function _writeCheckpoint(uint256 tokenId, uint256 balance) internal {\\n        uint256 _timestamp = block.timestamp;\\n        uint256 _nCheckPoints = numCheckpoints[tokenId];\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            checkpoints[tokenId][_nCheckPoints - 1].timestamp == _timestamp\\n        ) {\\n            checkpoints[tokenId][_nCheckPoints - 1].balanceOf = balance;\\n        } else {\\n            checkpoints[tokenId][_nCheckPoints] = Checkpoint(\\n                _timestamp,\\n                balance\\n            );\\n            numCheckpoints[tokenId] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeRewardPerTokenCheckpoint(\\n        address token,\\n        uint256 reward,\\n        uint256 timestamp\\n    ) internal {\\n        uint256 _nCheckPoints = rewardPerTokenNumCheckpoints[token];\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp ==\\n            timestamp\\n        ) {\\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1]\\n                .rewardPerToken = reward;\\n        } else {\\n            rewardPerTokenCheckpoints[token][\\n                _nCheckPoints\\n            ] = RewardPerTokenCheckpoint(timestamp, reward);\\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeSupplyCheckpoint() internal {\\n        uint256 _nCheckPoints = supplyNumCheckpoints;\\n        uint256 _timestamp = block.timestamp;\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\\n        ) {\\n            supplyCheckpoints[_nCheckPoints - 1].supply = totalSupply;\\n        } else {\\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\\n                _timestamp,\\n                totalSupply\\n            );\\n            supplyNumCheckpoints = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function rewardsListLength() external view returns (uint256) {\\n        return rewards.length;\\n    }\\n\\n    // returns the last time the reward was modified or periodFinish if the reward has ended\\n    function lastTimeRewardApplicable(address token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return Math.min(block.timestamp, periodFinish[token]);\\n    }\\n\\n    // allows a user to claim rewards for a given token\\n    function getReward(uint256 tokenId, address[] memory tokens) external lock {\\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, tokenId));\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            (\\n                rewardPerTokenStored[tokens[i]],\\n                lastUpdateTime[tokens[i]]\\n            ) = _updateRewardPerToken(tokens[i], type(uint256).max, true);\\n\\n            uint256 _reward = earned(tokens[i], tokenId);\\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\\n            userRewardPerTokenStored[tokens[i]][tokenId] = rewardPerTokenStored[\\n                tokens[i]\\n            ];\\n            if (_reward > 0) _safeTransfer(tokens[i], msg.sender, _reward);\\n\\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\\n        }\\n    }\\n\\n    // used by Voter to allow batched reward claims\\n    function getRewardForOwner(uint256 tokenId, address[] memory tokens)\\n        external\\n        lock\\n    {\\n        require(msg.sender == voter);\\n        address _owner = IVotingEscrow(_ve).ownerOf(tokenId);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            (\\n                rewardPerTokenStored[tokens[i]],\\n                lastUpdateTime[tokens[i]]\\n            ) = _updateRewardPerToken(tokens[i], type(uint256).max, true);\\n\\n            uint256 _reward = earned(tokens[i], tokenId);\\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\\n            userRewardPerTokenStored[tokens[i]][tokenId] = rewardPerTokenStored[\\n                tokens[i]\\n            ];\\n            if (_reward > 0) _safeTransfer(tokens[i], _owner, _reward);\\n\\n            emit ClaimRewards(_owner, tokens[i], _reward);\\n        }\\n    }\\n\\n    function rewardPerToken(address token) public view returns (uint256) {\\n        if (totalSupply == 0) {\\n            return rewardPerTokenStored[token];\\n        }\\n        return\\n            rewardPerTokenStored[token] +\\n            (((lastTimeRewardApplicable(token) -\\n                Math.min(lastUpdateTime[token], periodFinish[token])) *\\n                rewardRate[token] *\\n                10**IERC20(token).decimals()) / totalSupply);\\n    }\\n\\n    function batchRewardPerToken(address token, uint256 maxRuns) external {\\n        (\\n            rewardPerTokenStored[token],\\n            lastUpdateTime[token]\\n        ) = _batchRewardPerToken(token, maxRuns);\\n    }\\n\\n    function _batchRewardPerToken(address token, uint256 maxRuns)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        uint256 _startTimestamp = lastUpdateTime[token];\\n        uint256 reward = rewardPerTokenStored[token];\\n\\n        if (supplyNumCheckpoints == 0) {\\n            return (reward, _startTimestamp);\\n        }\\n\\n        if (rewardRate[token] == 0) {\\n            return (reward, block.timestamp);\\n        }\\n\\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\\n\\n        for (uint256 i = _startIndex; i < _endIndex; i++) {\\n            SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\\n            if (sp0.supply > 0) {\\n                SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\\n                (uint256 _reward, uint256 endTime) = _calcRewardPerToken(\\n                    token,\\n                    sp1.timestamp,\\n                    sp0.timestamp,\\n                    sp0.supply,\\n                    _startTimestamp\\n                );\\n                reward += _reward;\\n                _writeRewardPerTokenCheckpoint(token, reward, endTime);\\n                _startTimestamp = endTime;\\n            }\\n        }\\n\\n        return (reward, _startTimestamp);\\n    }\\n\\n    function _calcRewardPerToken(\\n        address token,\\n        uint256 timestamp1,\\n        uint256 timestamp0,\\n        uint256 supply,\\n        uint256 startTimestamp\\n    ) internal view returns (uint256, uint256) {\\n        uint256 endTime = Math.max(timestamp1, startTimestamp);\\n        return (\\n            (((Math.min(endTime, periodFinish[token]) -\\n                Math.min(\\n                    Math.max(timestamp0, startTimestamp),\\n                    periodFinish[token]\\n                )) *\\n                rewardRate[token] *\\n                10**IERC20(token).decimals()) / supply),\\n            endTime\\n        );\\n    }\\n\\n    /// @dev Update stored rewardPerToken values without the last one snapshot\\n    ///      If the contract will get \\\"out of gas\\\" error on users actions this will be helpful\\n    function batchUpdateRewardPerToken(address token, uint256 maxRuns)\\n        external\\n    {\\n        (\\n            rewardPerTokenStored[token],\\n            lastUpdateTime[token]\\n        ) = _updateRewardPerToken(token, maxRuns, false);\\n    }\\n\\n    function _updateRewardForAllTokens() internal {\\n        uint256 length = rewards.length;\\n        for (uint256 i; i < length; i++) {\\n            address token = rewards[i];\\n            (\\n                rewardPerTokenStored[token],\\n                lastUpdateTime[token]\\n            ) = _updateRewardPerToken(token, type(uint256).max, true);\\n        }\\n    }\\n\\n    function _updateRewardPerToken(\\n        address token,\\n        uint256 maxRuns,\\n        bool actualLast\\n    ) internal returns (uint256, uint256) {\\n        uint256 _startTimestamp = lastUpdateTime[token];\\n        uint256 reward = rewardPerTokenStored[token];\\n\\n        if (supplyNumCheckpoints == 0) {\\n            return (reward, _startTimestamp);\\n        }\\n\\n        if (rewardRate[token] == 0) {\\n            return (reward, block.timestamp);\\n        }\\n\\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\\n\\n        if (_endIndex > 0) {\\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\\n                SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\\n                if (sp0.supply > 0) {\\n                    SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\\n                    (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\\n                        token,\\n                        sp1.timestamp,\\n                        sp0.timestamp,\\n                        sp0.supply,\\n                        _startTimestamp\\n                    );\\n                    reward += _reward;\\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\\n                    _startTimestamp = _endTime;\\n                }\\n            }\\n        }\\n\\n        if (actualLast) {\\n            SupplyCheckpoint memory sp = supplyCheckpoints[_endIndex];\\n            if (sp.supply > 0) {\\n                (uint256 _reward, ) = _calcRewardPerToken(\\n                    token,\\n                    lastTimeRewardApplicable(token),\\n                    Math.max(sp.timestamp, _startTimestamp),\\n                    sp.supply,\\n                    _startTimestamp\\n                );\\n                reward += _reward;\\n                _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\\n                _startTimestamp = block.timestamp;\\n            }\\n        }\\n\\n        return (reward, _startTimestamp);\\n    }\\n\\n    function earned(address token, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _startTimestamp = Math.max(\\n            lastEarn[token][tokenId],\\n            rewardPerTokenCheckpoints[token][0].timestamp\\n        );\\n        if (numCheckpoints[tokenId] == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _startIndex = getPriorBalanceIndex(tokenId, _startTimestamp);\\n        uint256 _endIndex = numCheckpoints[tokenId] - 1;\\n\\n        uint256 reward = 0;\\n\\n        if (_endIndex > 0) {\\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\\n                Checkpoint memory cp0 = checkpoints[tokenId][i];\\n                Checkpoint memory cp1 = checkpoints[tokenId][i + 1];\\n                (uint256 _rewardPerTokenStored0, ) = getPriorRewardPerToken(\\n                    token,\\n                    cp0.timestamp\\n                );\\n                (uint256 _rewardPerTokenStored1, ) = getPriorRewardPerToken(\\n                    token,\\n                    cp1.timestamp\\n                );\\n                reward +=\\n                    (cp0.balanceOf *\\n                        (_rewardPerTokenStored1 - _rewardPerTokenStored0)) /\\n                    10**IERC20(token).decimals();\\n            }\\n        }\\n\\n        Checkpoint memory cp = checkpoints[tokenId][_endIndex];\\n        (uint256 _rewardPerTokenStored, ) = getPriorRewardPerToken(\\n            token,\\n            cp.timestamp\\n        );\\n        reward +=\\n            (cp.balanceOf *\\n                (rewardPerToken(token) -\\n                    Math.max(\\n                        _rewardPerTokenStored,\\n                        userRewardPerTokenStored[token][tokenId]\\n                    ))) /\\n            10**IERC20(token).decimals();\\n\\n        return reward;\\n    }\\n\\n    // This is an external function, but internal notation is used since it can only be called \\\"internally\\\" from Gauges\\n    function _deposit(uint256 amount, uint256 tokenId) external {\\n        require(msg.sender == voter);\\n        _updateRewardForAllTokens();\\n\\n        totalSupply += amount;\\n        balanceOf[tokenId] += amount;\\n\\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\\n        _writeSupplyCheckpoint();\\n\\n        emit Deposit(msg.sender, tokenId, amount);\\n    }\\n\\n    function _withdraw(uint256 amount, uint256 tokenId) external {\\n        require(msg.sender == voter);\\n        _updateRewardForAllTokens();\\n\\n        totalSupply -= amount;\\n        balanceOf[tokenId] -= amount;\\n\\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\\n        _writeSupplyCheckpoint();\\n\\n        emit Withdraw(msg.sender, tokenId, amount);\\n    }\\n\\n    function left(address token) external view returns (uint256) {\\n        if (block.timestamp >= periodFinish[token]) return 0;\\n        uint256 _remaining = periodFinish[token] - block.timestamp;\\n        return _remaining * rewardRate[token];\\n    }\\n\\n    // used to notify a gauge/bribe of a given reward, this can create griefing attacks by extending rewards\\n    function notifyRewardAmount(address token, uint256 amount) external lock {\\n        require(amount > 0);\\n        require(isReward[token]);\\n\\n        if (rewardRate[token] == 0)\\n            _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\\n        (\\n            rewardPerTokenStored[token],\\n            lastUpdateTime[token]\\n        ) = _updateRewardPerToken(token, type(uint256).max, true);\\n\\n        if (block.timestamp >= periodFinish[token]) {\\n            _safeTransferFrom(token, msg.sender, address(this), amount);\\n            rewardRate[token] = amount / DURATION;\\n        } else {\\n            uint256 _remaining = periodFinish[token] - block.timestamp;\\n            uint256 _left = _remaining * rewardRate[token];\\n            require(amount > _left);\\n            _safeTransferFrom(token, msg.sender, address(this), amount);\\n            rewardRate[token] = (amount + _left) / DURATION;\\n        }\\n        require(rewardRate[token] > 0);\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        require(\\n            rewardRate[token] <= balance / DURATION,\\n            \\\"Provided reward too high\\\"\\n        );\\n        periodFinish[token] = block.timestamp + DURATION;\\n\\n        emit NotifyReward(msg.sender, token, amount);\\n    }\\n\\n    function swapOutRewardToken(\\n        uint256 i,\\n        address oldToken,\\n        address newToken\\n    ) external {\\n        require(msg.sender == IVotingEscrow(_ve).team(), \\\"only team\\\");\\n        require(rewards[i] == oldToken);\\n        isReward[oldToken] = false;\\n        isReward[newToken] = true;\\n        rewards[i] = newToken;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(\\n                IERC20.transferFrom.selector,\\n                from,\\n                to,\\n                value\\n            )\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n}\\n\",\"keccak256\":\"0x7802fd16f1e518a6fe43ddd30a1bcd20d32b46c11682106d5bf0d4ee71621822\",\"license\":\"MIT\"},\"contracts/factories/BribeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"contracts/interfaces/IBribeFactory.sol\\\";\\nimport \\\"contracts/InternalBribe.sol\\\";\\nimport \\\"contracts/ExternalBribe.sol\\\";\\nimport \\\"contracts/interfaces/ITurnstile.sol\\\";\\n\\ncontract BribeFactory is IBribeFactory {\\n    address internal multisig = 0x0a178469E3d08BEAA0a289E416Ab924F10807989;\\n    address internal turnstile = 0xEcf044C5B4b867CFda001101c617eCd347095B44;\\n    address public last_internal_bribe;\\n    address public last_external_bribe;\\n\\n    constructor() {\\n        ITurnstile(turnstile).register(multisig);\\n    }\\n\\n    function createInternalBribe(address[] memory allowedRewards) external returns (address) {\\n        last_internal_bribe = address(new InternalBribe(msg.sender, allowedRewards));\\n        return last_internal_bribe;\\n    }\\n\\n    function createExternalBribe(address[] memory allowedRewards) external returns (address) {\\n        last_external_bribe = address(new ExternalBribe(msg.sender, allowedRewards));\\n        return last_external_bribe;\\n    }\\n}\\n\",\"keccak256\":\"0xebb5d43a4713eaad6818caa14d3f34d19f443238a0874de812e1061649d53f63\",\"license\":\"MIT\"},\"contracts/interfaces/IBribe.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IBribe {\\n    function _deposit(uint256 amount, uint256 tokenId) external;\\n    function _withdraw(uint256 amount, uint256 tokenId) external;\\n    function getRewardForOwner(uint256 tokenId, address[] memory tokens) external;\\n    function notifyRewardAmount(address token, uint256 amount) external; //keep same as external bribe\\n    function left(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x05d9a4d56b9e7ef3e876873b0ef701474a7b5cca9494d61f083bd3207d531f74\"},\"contracts/interfaces/IBribeFactory.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IBribeFactory {\\n    function createInternalBribe(address[] memory) external returns (address);\\n    function createExternalBribe(address[] memory) external returns (address);\\n}\\n\",\"keccak256\":\"0x3893233c0f5acb71691f6d2c8b758f93b41a90ded632b9d4d919fbc3754b2549\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address recipient, uint amount) external returns (bool);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function balanceOf(address) external view returns (uint);\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x892b167ec5245b43ccdfc68d20e8ca12d05725fb6c11ec5ddf6bf77ed0c93c32\"},\"contracts/interfaces/IGauge.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IGauge {\\n    function notifyRewardAmount(address token, uint amount) external;\\n    function getReward(address account, address[] memory tokens) external;\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n    function left(address token) external view returns (uint);\\n    function isForPair() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xae388a0eeb0318da9a00bd65bcc80dcbf81cd24915959c7852f9fa21f8893865\"},\"contracts/interfaces/ITurnstile.sol\":{\"content\":\"interface ITurnstile {\\n    function register(address) external returns(uint256);\\n}\",\"keccak256\":\"0xf19540479e9afad63b889bd1aaf665c5f989635ffc3259b9cfb600c079cf25f2\"},\"contracts/interfaces/IVoter.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IVoter {\\n    function _ve() external view returns (address);\\n    function governor() external view returns (address);\\n    function emergencyCouncil() external view returns (address);\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n    function emitDeposit(uint _tokenId, address account, uint amount) external;\\n    function emitWithdraw(uint _tokenId, address account, uint amount) external;\\n    function isWhitelisted(address token) external view returns (bool);\\n    function notifyRewardAmount(uint amount) external;\\n    function distribute(address _gauge) external;\\n}\\n\",\"keccak256\":\"0x033115b88f156c6db67ca468fc9da8e4197bbd48bc8cf5a1652b9ebd307b2d31\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IVotingEscrow {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    function token() external view returns (address);\\n    function team() external returns (address);\\n    function epoch() external view returns (uint);\\n    function point_history(uint loc) external view returns (Point memory);\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n    function transferFrom(address, address, uint) external;\\n\\n    function voting(uint tokenId) external;\\n    function abstain(uint tokenId) external;\\n    function attach(uint tokenId) external;\\n    function detach(uint tokenId) external;\\n\\n    function checkpoint() external;\\n    function deposit_for(uint tokenId, uint value) external;\\n    function create_lock_for(uint, uint, address) external returns (uint);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x9c51afef11e82c70d08871264602e385a4f7caf36383e1bc5a6c214f93a4c0d1\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3546b156d97633f7f8cad536d5454c81d1d604687c02b2eb105fdc33cb962b41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600080546001600160a01b0319908116730a178469e3d08beaa0a289e416ab924f10807989179091556001805490911673ecf044c5b4b867cfda001101c617ecd347095b4417905534801561005857600080fd5b50600154600054604051632210724360e11b81526001600160a01b039182166004820152911690634420e486906024016020604051808303816000875af11580156100a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cb91906100d1565b506100ea565b6000602082840312156100e357600080fd5b5051919050565b615102806100f96000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632a26b9eb146100515780636485f0c414610080578063b0ad856f14610093578063eb57738c146100a6575b600080fd5b61006461005f3660046101c1565b6100b9565b6040516001600160a01b03909116815260200160405180910390f35b61006461008e3660046101c1565b610116565b600354610064906001600160a01b031681565b600254610064906001600160a01b031681565b600033826040516100c990610173565b6100d4929190610286565b604051809103906000f0801580156100f0573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b0392909216918217905592915050565b6000338260405161012690610181565b610131929190610286565b604051809103906000f08015801561014d573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b0392909216918217905592915050565b612e8e80620002e383390190565b611f5c806200317183390190565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146101bc57600080fd5b919050565b600060208083850312156101d457600080fd5b823567ffffffffffffffff808211156101ec57600080fd5b818501915085601f83011261020057600080fd5b8135818111156102125761021261018f565b8060051b604051601f19603f830116810181811085821117156102375761023761018f565b60405291825284820192508381018501918883111561025557600080fd5b938501935b8285101561027a5761026b856101a5565b8452938501939285019261025a565b98975050505050505050565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b818110156102d45785518516835294830194918301916001016102b6565b50909897505050505050505056fe60c0604052600080546001600160a01b0319908116730a178469e3d08beaa0a289e416ab924f10807989179091556001805490911673ecf044c5b4b867cfda001101c617ecd347095b441781556012553480156200005c57600080fd5b5060405162002e8e38038062002e8e8339810160408190526200007f91620002b4565b6001600160a01b038216608081905260408051638dd598fb60e01b81529051638dd598fb916004808201926020929091908290030181865afa158015620000ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f091906200039d565b6001600160a01b031660a05260005b8151811015620002025760006001600160a01b0316828281518110620001295762000129620003c2565b60200260200101516001600160a01b031614620001ed576001600960008484815181106200015b576200015b620003c2565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506008828281518110620001b157620001b1620003c2565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b80620001f981620003d8565b915050620000ff565b50600154600054604051632210724360e11b81526001600160a01b039182166004820152911690634420e486906024016020604051808303816000875af115801562000252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000278919062000400565b5050506200041a565b80516001600160a01b03811681146200029957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620002c857600080fd5b620002d38362000281565b602084810151919350906001600160401b0380821115620002f357600080fd5b818601915086601f8301126200030857600080fd5b8151818111156200031d576200031d6200029e565b8060051b604051601f19603f830116810181811085821117156200034557620003456200029e565b6040529182528482019250838101850191898311156200036457600080fd5b938501935b828510156200038d576200037d8562000281565b8452938501939285019262000369565b8096505050505050509250929050565b600060208284031215620003b057600080fd5b620003bb8262000281565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620003f957634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156200041357600080fd5b5051919050565b60805160a051612a246200046a6000396000818161041801528181610aae01528181610f2e015261175401526000818161030601528181610cb901528181610eeb015261165e0152612a246000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c806399bcc05211610125578063e6886396116100ad578063f301af421161007c578063f301af421461057b578063f32077231461058e578063f5f8d365146105a1578063f7412baf146105b4578063fd314098146105db57600080fd5b8063e68863961461052c578063e8111a1214610534578063f12297771461053d578063f25e55a51461055057600080fd5b8063a28d4c9c116100f4578063a28d4c9c146104b3578063a7852afa146104c6578063aa479652146104d9578063b66503cf146104f9578063da09d19d1461050c57600080fd5b806399bcc0521461044d5780639cc7f708146104605780639ce43f90146104805780639e2bf22c146104a057600080fd5b806349dcc204116101a8578063638634ee11610177578063638634ee146103da57806368fcee1a146103ed57806376f4be36146104005780638dd598fb146104135780639418f9391461043a57600080fd5b806349dcc204146103405780634d5ce0381461037257806350589793146103a55780635a45d052146103c557600080fd5b80632ce9aead116101e45780632ce9aead146102a35780633b881999146102c35780633e491d47146102ee57806346c96aac1461030157600080fd5b806301316ddf1461021657806318160ddd146102625780631be0528914610279578063221ca18c14610283575b600080fd5b6102486102243660046125e3565b60106020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152015b60405180910390f35b61026b600a5481565b604051908152602001610259565b61026b62093a8081565b61026b61029136600461260f565b60026020526000908152604090205481565b61026b6102b136600461260f565b60046020526000908152604090205481565b61026b6102d13660046125e3565b600760209081526000928352604080842090915290825290205481565b61026b6102fc3660046125e3565b6105ee565b6103287f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610259565b61024861034e36600461262c565b600c6020908152600092835260408084209091529082529020805460019091015482565b61039561038036600461260f565b60096020526000908152604090205460ff1681565b6040519015158152602001610259565b61026b6103b336600461264e565b600d6020526000908152604090205481565b6103d86103d33660046125e3565b610910565b005b61026b6103e836600461260f565b610948565b6103d86103fb3660046125e3565b61096c565b61026b61040e36600461264e565b610978565b6103287f000000000000000000000000000000000000000000000000000000000000000081565b6103d8610448366004612667565b610aac565b61026b61045b36600461260f565b610c3d565b61026b61046e36600461264e565b600b6020526000908152604090205481565b61026b61048e36600461260f565b60056020526000908152604090205481565b6103d86104ae36600461262c565b610cae565b61026b6104c136600461262c565b610d87565b6103d86104d43660046126bf565b610ecc565b61026b6104e736600461260f565b60116020526000908152604090205481565b6103d86105073660046125e3565b611211565b61026b61051a36600461260f565b60036020526000908152604090205481565b60085461026b565b61026b600f5481565b61026b61054b36600461260f565b611507565b61026b61055e3660046125e3565b600660209081526000928352604080842090915290825290205481565b61032861058936600461264e565b611629565b6103d861059c36600461262c565b611653565b6103d86105af3660046126bf565b611724565b6102486105c236600461264e565b600e602052600090815260409020805460019091015482565b6102486105e93660046125e3565b611a2b565b6001600160a01b038216600081815260066020908152604080832085845282528083205493835260108252808320838052909152812054909182916106339190611c4c565b6000848152600d60205260408120549192500361065457600091505061090a565b60006106608483610d87565b6000858152600d60205260408120549192509061067f906001906127a6565b9050600081156107ec57825b6106966001846127a6565b81116107ea576000878152600c60208181526040808420858552808352818520825180840190935280548352600190810154838501528c865293909252929182906106e29086906127bd565b815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060006107218b8460000151611a2b565b50905060006107348c8460000151611a2b565b5090508b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079991906127d5565b6107a490600a6128dc565b6107ae83836127a6565b85602001516107bd91906128eb565b6107c7919061290a565b6107d190876127bd565b95505050505080806107e29061292c565b91505061068b565b505b6000868152600c6020908152604080832085845282528083208151808301909252805480835260019091015492820192909252919061082c908a90611a2b565b509050886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561086d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089191906127d5565b61089c90600a6128dc565b6001600160a01b038a1660009081526007602090815260408083208c84529091529020546108cb908390611c4c565b6108d48b611507565b6108de91906127a6565b83602001516108ed91906128eb565b6108f7919061290a565b61090190846127bd565b96505050505050505b92915050565b61091a8282611c62565b6001600160a01b03909316600090815260056020908152604080832060049092529091209390935590915550565b6001600160a01b03811660009081526003602052604081205461090a904290611dc5565b61091a82826000611dd4565b600f5460009080820361098e5750600092915050565b82600e600061099e6001856127a6565b815260200190815260200160002060000154116109c7576109c06001826127a6565b9392505050565b60008052600e6020527fe710864318d4a32f37d6ce54cb3fadbef648dd12d8dbdf53973564d56b7f881c54831015610a025750600092915050565b600080610a106001846127a6565b90505b81811115610aa45760006002610a2984846127a6565b610a33919061290a565b610a3d90836127a6565b6000818152600e6020908152604091829020825180840190935280548084526001909101549183019190915291925090879003610a7e575095945050505050565b8051871115610a8f57819350610a9d565b610a9a6001836127a6565b92505b5050610a13565b509392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166385f2aef26040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190612945565b6001600160a01b0316336001600160a01b031614610b815760405162461bcd60e51b81526020600482015260096024820152686f6e6c79207465616d60b81b60448201526064015b60405180910390fd5b816001600160a01b031660088481548110610b9e57610b9e612962565b6000918252602090912001546001600160a01b031614610bbd57600080fd5b6001600160a01b03808316600090815260096020526040808220805460ff1990811690915592841682529020805490911660011790556008805482919085908110610c0a57610c0a612962565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b6001600160a01b0381166000908152600360205260408120544210610c6457506000919050565b6001600160a01b038216600090815260036020526040812054610c889042906127a6565b6001600160a01b0384166000908152600260205260409020549091506109c090826128eb565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ce357600080fd5b610ceb611fc4565b81600a6000828254610cfd91906127a6565b90915550506000818152600b602052604081208054849290610d209084906127a6565b90915550506000818152600b6020526040902054610d3f90829061204c565b610d47612125565b604080518281526020810184905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56891015b60405180910390a25050565b6000828152600d6020526040812054808203610da757600091505061090a565b6000848152600c602052604081208491610dc26001856127a6565b81526020019081526020016000206000015411610dec57610de46001826127a6565b91505061090a565b6000848152600c60209081526040808320838052909152902054831015610e1757600091505061090a565b600080610e256001846127a6565b90505b81811115610ec35760006002610e3e84846127a6565b610e48919061290a565b610e5290836127a6565b6000888152600c60209081526040808320848452825291829020825180840190935280548084526001909101549183019190915291925090879003610e9d5750935061090a92505050565b8051871115610eae57819350610ebc565b610eb96001836127a6565b92505b5050610e28565b50949350505050565b601254600114610edb57600080fd5b6002601255336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f1557600080fd5b6040516331a9108f60e11b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa19190612945565b905060005b825181101561120657610fd6838281518110610fc457610fc4612962565b60200260200101516000196001611dd4565b60056000868581518110610fec57610fec612962565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006004600088878151811061102c5761102c612962565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000849190505583919050555050600061108784838151811061107957611079612962565b6020026020010151866105ee565b905042600660008685815181106110a0576110a0612962565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600087815260200190815260200160002081905550600560008584815181106110f3576110f3612962565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020546007600086858151811061113257611132612962565b6020908102919091018101516001600160a01b031682528181019290925260409081016000908120898252909252902055801561118d5761118d84838151811061117e5761117e612962565b602002602001015184836121c9565b83828151811061119f5761119f612962565b60200260200101516001600160a01b0316836001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc9836040516111eb91815260200190565b60405180910390a350806111fe8161292c565b915050610fa6565b505060016012555050565b60125460011461122057600080fd5b60026012558061122f57600080fd5b6001600160a01b03821660009081526009602052604090205460ff1661125457600080fd5b6001600160a01b038216600090815260026020526040812054900361127f5761127f826000426122b8565b61128d826000196001611dd4565b6001600160a01b03841660009081526005602090815260408083206004835281842094909455939092556003909152205442106112fb576112d0823330846123a7565b6112dd62093a808261290a565b6001600160a01b038316600090815260026020526040902055611394565b6001600160a01b03821660009081526003602052604081205461131f9042906127a6565b6001600160a01b0384166000908152600260205260408120549192509061134690836128eb565b905080831161135457600080fd5b611360843330866123a7565b62093a8061136e82856127bd565b611378919061290a565b6001600160a01b03851660009081526002602052604090205550505b6001600160a01b0382166000908152600260205260409020546113b657600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156113fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114219190612978565b905061143062093a808261290a565b6001600160a01b03841660009081526002602052604090205411156114975760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610b78565b6114a462093a80426127bd565b6001600160a01b0384166000818152600360205260409081902092909255905133907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf50826906114f59086815260200190565b60405180910390a35050600160125550565b6000600a5460000361152f57506001600160a01b031660009081526005602052604090205490565b600a54826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611570573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159491906127d5565b61159f90600a6128dc565b6001600160a01b038416600090815260026020908152604080832054600483528184205460039093529220546115d59190611dc5565b6115de86610948565b6115e891906127a6565b6115f291906128eb565b6115fc91906128eb565b611606919061290a565b6001600160a01b03831660009081526005602052604090205461090a91906127bd565b6008818154811061163957600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461168857600080fd5b611690611fc4565b81600a60008282546116a291906127bd565b90915550506000818152600b6020526040812080548492906116c59084906127bd565b90915550506000818152600b60205260409020546116e490829061204c565b6116ec612125565b604080518281526020810184905233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159101610d7b565b60125460011461173357600080fd5b600260125560405163430c208160e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa1580156117a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c79190612991565b6117d057600080fd5b60005b8151811015611a21576117f1828281518110610fc457610fc4612962565b6005600085858151811061180757611807612962565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006004600087878151811061184757611847612962565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600084919050558391905055505060006118a283838151811061189457611894612962565b6020026020010151856105ee565b905042600660008585815181106118bb576118bb612962565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000868152602001908152602001600020819055506005600084848151811061190e5761190e612962565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020546007600085858151811061194d5761194d612962565b6020908102919091018101516001600160a01b03168252818101929092526040908101600090812088825290925290205580156119a8576119a883838151811061199957611999612962565b602002602001015133836121c9565b8282815181106119ba576119ba612962565b60200260200101516001600160a01b0316336001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc983604051611a0691815260200190565b60405180910390a35080611a198161292c565b9150506117d3565b5050600160125550565b6001600160a01b0382166000908152601160205260408120548190808203611a5a576000809250925050611c45565b6001600160a01b03851660009081526010602052604081208591611a7f6001856127a6565b81526020019081526020016000206000015411611b1c576001600160a01b038516600090815260106020526040812090611aba6001846127a6565b81526020019081526020016000206001015460106000876001600160a01b03166001600160a01b031681526020019081526020016000206000600184611b0091906127a6565b8152602001908152602001600020600001549250925050611c45565b6001600160a01b0385166000908152601060209081526040808320838052909152902054841015611b54576000809250925050611c45565b600080611b626001846127a6565b90505b81811115611c145760006002611b7b84846127a6565b611b85919061290a565b611b8f90836127a6565b6001600160a01b0389166000908152601060209081526040808320848452825291829020825180840190935280548084526001909101549183019190915291925090889003611bee57602081015190519096509450611c459350505050565b8051881115611bff57819350611c0d565b611c0a6001836127a6565b92505b5050611b65565b506001600160a01b038616600090815260106020908152604080832093835292905220600181015490549093509150505b9250929050565b6000818311611c5b57816109c0565b5090919050565b6001600160a01b0382166000908152600460209081526040808320546005909252822054600f54839291908303611c9c5792509050611c45565b6001600160a01b0386166000908152600260205260408120549003611cc7579250429150611c459050565b6000611cd283610978565b90506000611cee6001600f54611ce891906127a6565b88611dc5565b9050815b81811015611db6576000818152600e60209081526040918290208251808401909352805483526001015490820181905215611da3576000600e81611d378560016127bd565b8152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600080611d828d8460000151866000015187602001518d61249f565b9092509050611d9182896127bd565b9750611d9e8d89836122b8565b975050505b5080611dae8161292c565b915050611cf2565b50919792965091945050505050565b6000818310611c5b57816109c0565b6001600160a01b0383166000908152600460209081526040808320546005909252822054600f54839291908303611e0e5792509050611fbc565b6001600160a01b0387166000908152600260205260408120549003611e39579250429150611fbc9050565b6000611e4483610978565b90506000611e606001600f54611e5a91906127a6565b89611dc5565b90508015611f3957815b611e756001836127a6565b8111611f37576000818152600e60209081526040918290208251808401909352805483526001015490820181905215611f24576000600e81611eb88560016127bd565b8152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600080611f038e8460000151866000015187602001518d61249f565b9092509050611f1282896127bd565b9750611f1f8e89836122b8565b975050505b5080611f2f8161292c565b915050611e6a565b505b8615611fb3576000818152600e60209081526040918290208251808401909352805483526001015490820181905215611fb1576000611f928b611f7b8d610948565b8451611f87908a611c4c565b85602001518a61249f565b509050611f9f81866127bd565b9450611fac8b86426122b8565b429550505b505b50909350909150505b935093915050565b60085460005b8181101561204857600060088281548110611fe757611fe7612962565b6000918252602090912001546001600160a01b0316905061200c816000196001611dd4565b6001600160a01b0390921660009081526005602090815260408083206004909252909120929092559055806120408161292c565b915050611fca565b5050565b6000828152600d60205260409020544290801580159061209657506000848152600c6020526040812083916120826001856127a6565b815260200190815260200160002060000154145b156120cf576000848152600c6020526040812084916120b66001856127a6565b815260208101919091526040016000206001015561211f565b60408051808201825283815260208082018681526000888152600c835284812086825290925292902090518155905160019182015561210f9082906127bd565b6000858152600d60205260409020555b50505050565b600f54428115801590612157575080600e60006121436001866127a6565b815260200190815260200160002060000154145b1561218657600a54600e600061216e6001866127a6565b81526020810191909152604001600020600101555050565b604080518082018252828152600a5460208083019182526000868152600e909152929092209051815590516001918201556121c29083906127bd565b600f555050565b6000836001600160a01b03163b116121e057600080fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161223c91906129b3565b6000604051808303816000865af19150503d8060008114612279576040519150601f19603f3d011682016040523d82523d6000602084013e61227e565b606091505b50915091508180156122a85750805115806122a85750808060200190518101906122a89190612991565b6122b157600080fd5b5050505050565b6001600160a01b038316600090815260116020526040902054801580159061231457506001600160a01b038416600090815260106020526040812083916123006001856127a6565b815260200190815260200160002060000154145b1561233e576001600160a01b038416600090815260106020526040812084916120b66001856127a6565b60408051808201825283815260208082018681526001600160a01b0388166000908152601083528481208682529092529290209051815590516001918201556123889082906127bd565b6001600160a01b03851660009081526011602052604090205550505050565b6000846001600160a01b03163b116123be57600080fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161242291906129b3565b6000604051808303816000865af19150503d806000811461245f576040519150601f19603f3d011682016040523d82523d6000602084013e612464565b606091505b509150915081801561248e57508051158061248e57508080602001905181019061248e9190612991565b61249757600080fd5b505050505050565b60008060006124ae8785611c4c565b905084886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251391906127d5565b61251e90600a6128dc565b6001600160a01b038a166000908152600260205260409020546125626125448a89611c4c565b6001600160a01b038d16600090815260036020526040902054611dc5565b6001600160a01b038c16600090815260036020526040902054612586908690611dc5565b61259091906127a6565b61259a91906128eb565b6125a491906128eb565b6125ae919061290a565b9890975095505050505050565b6001600160a01b03811681146125d057600080fd5b50565b80356125de816125bb565b919050565b600080604083850312156125f657600080fd5b8235612601816125bb565b946020939093013593505050565b60006020828403121561262157600080fd5b81356109c0816125bb565b6000806040838503121561263f57600080fd5b50508035926020909101359150565b60006020828403121561266057600080fd5b5035919050565b60008060006060848603121561267c57600080fd5b83359250602084013561268e816125bb565b9150604084013561269e816125bb565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156126d257600080fd5b8235915060208084013567ffffffffffffffff808211156126f257600080fd5b818601915086601f83011261270657600080fd5b813581811115612718576127186126a9565b8060051b604051601f19603f8301168101818110858211171561273d5761273d6126a9565b60405291825284820192508381018501918983111561275b57600080fd5b938501935b8285101561278057612771856125d3565b84529385019392850192612760565b8096505050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b6000828210156127b8576127b8612790565b500390565b600082198211156127d0576127d0612790565b500190565b6000602082840312156127e757600080fd5b815160ff811681146109c057600080fd5b600181815b8085111561283357816000190482111561281957612819612790565b8085161561282657918102915b93841c93908002906127fd565b509250929050565b60008261284a5750600161090a565b816128575750600061090a565b816001811461286d576002811461287757612893565b600191505061090a565b60ff84111561288857612888612790565b50506001821b61090a565b5060208310610133831016604e8410600b84101617156128b6575081810a61090a565b6128c083836127f8565b80600019048211156128d4576128d4612790565b029392505050565b60006109c060ff84168361283b565b600081600019048311821515161561290557612905612790565b500290565b60008261292757634e487b7160e01b600052601260045260246000fd5b500490565b60006001820161293e5761293e612790565b5060010190565b60006020828403121561295757600080fd5b81516109c0816125bb565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561298a57600080fd5b5051919050565b6000602082840312156129a357600080fd5b815180151581146109c057600080fd5b6000825160005b818110156129d457602081860181015185830152016129ba565b818111156129e3576000828501525b50919091019291505056fea26469706673582212206bd63dcd50d2d0978656869a799a0d2f5a2b01beb86cc5a1d0d9b99276d22d3864736f6c634300080d003360c0604052600080546001600160a01b0319908116730a178469e3d08beaa0a289e416ab924f10807989179091556001805490911673ecf044c5b4b867cfda001101c617ecd347095b44178155600d553480156200005c57600080fd5b5060405162001f5c38038062001f5c8339810160408190526200007f91620002b4565b6001600160a01b038216608081905260408051638dd598fb60e01b81529051638dd598fb916004808201926020929091908290030181865afa158015620000ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f091906200039d565b6001600160a01b031660a05260005b8151811015620002025760006001600160a01b0316828281518110620001295762000129620003c2565b60200260200101516001600160a01b031614620001ed576001600860008484815181106200015b576200015b620003c2565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506007828281518110620001b157620001b1620003c2565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b80620001f981620003d8565b915050620000ff565b50600154600054604051632210724360e11b81526001600160a01b039182166004820152911690634420e486906024016020604051808303816000875af115801562000252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000278919062000400565b5050506200041a565b80516001600160a01b03811681146200029957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620002c857600080fd5b620002d38362000281565b602084810151919350906001600160401b0380821115620002f357600080fd5b818601915086601f8301126200030857600080fd5b8151818111156200031d576200031d6200029e565b8060051b604051601f19603f830116810181811085821117156200034557620003456200029e565b6040529182528482019250838101850191898311156200036457600080fd5b938501935b828510156200038d576200037d8562000281565b8452938501939285019262000369565b8096505050505050509250929050565b600060208284031215620003b057600080fd5b620003bb8262000281565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620003f957634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156200041357600080fd5b5051919050565b60805160a051611aeb62000471600039600081816102d90152818161089b01528181610cdb015261125e0152600081816101da01528181610a6e01528181610c9801528181610ed601526111700152611aeb6000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80639cc7f708116100de578063e688639611610097578063f301af4211610071578063f301af4214610416578063f320772314610429578063f5f8d3651461043c578063f7412baf1461044f57600080fd5b8063e6886396146103da578063e8111a12146103e2578063f25e55a5146103eb57600080fd5b80639cc7f7081461034e5780639e2bf22c1461036e578063a28d4c9c14610381578063a7852afa14610394578063b66503cf146103a7578063da09d19d146103ba57600080fd5b8063505897931161014b5780638dd598fb116101255780638dd598fb146102d457806392777b29146102fb5780639418f9391461032657806399bcc0521461033b57600080fd5b8063505897931461028e578063638634ee146102ae57806376f4be36146102c157600080fd5b80630175e23b1461019357806318160ddd146101b95780633e491d47146101c257806346c96aac146101d557806349dcc204146102145780634d5ce0381461025b575b600080fd5b6101a66101a1366004611795565b610476565b6040519081526020015b60405180910390f35b6101a660025481565b6101a66101d03660046117d6565b6104b8565b6101fc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101b0565b610246610222366004611802565b60096020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101b0565b61027e610269366004611824565b60086020526000908152604090205460ff1681565b60405190151581526020016101b0565b6101a661029c366004611795565b600a6020526000908152604090205481565b6101a66102bc366004611824565b610741565b6101a66102cf366004611795565b610765565b6101fc7f000000000000000000000000000000000000000000000000000000000000000081565b6101a66103093660046117d6565b600460209081526000928352604080842090915290825290205481565b610339610334366004611841565b610899565b005b6101a6610349366004611824565b610a2a565b6101a661035c366004611795565b60036020526000908152604090205481565b61033961037c366004611802565b610a63565b6101a661038f366004611802565b610b34565b6103396103a2366004611899565b610c79565b6103396103b53660046117d6565b610e79565b6101a66103c8366004611824565b60056020526000908152604090205481565b6007546101a6565b6101a6600c5481565b6101a66103f93660046117d6565b600660209081526000928352604080842090915290825290205481565b6101fc610424366004611795565b61113b565b610339610437366004611802565b611165565b61033961044a366004611899565b61122e565b61024661045d366004611795565b600b602052600090815260409020805460019091015482565b60008061048283611402565b9050600061049362093a8083611980565b90508084106104ae576104a98262093a80611980565b6104b0565b815b949350505050565b6001600160a01b0382166000908152600660209081526040808320848452825280832054600a90925282205482036104f457600091505061073b565b60006105008483610b34565b6000858152600a60205260408120549192509061051f90600190611998565b90506000610540604051806040016040528060008152602001600081525090565b61054985611402565b81526001831561065a57845b610560600186611998565b81116106585760008981526009602090815260408083208484528252808320815180830190925280548083526001909101549282019290925291906105a490611402565b85519091508111156105c25760208501516105bf9087611980565b95505b808552600b60006105d96102cf62093a8085611980565b815260200190815260200160002060010154935083600460008e6001600160a01b03166001600160a01b03168152602001908152602001600020600083815260200190815260200160002054836020015161063491906119af565b61063e91906119e4565b602086015250819050610650816119f8565b915050610555565b505b600088815260096020908152604080832087845282528083208151808301909252805480835260019091015492820192909252919061069890611402565b905060006106a962093a8083611980565b90508042111561072f57600b60006106c083610765565b815260200190815260200160002060010154600460008e6001600160a01b03166001600160a01b03168152602001908152602001600020600084815260200190815260200160002054846020015161071891906119af565b61072291906119e4565b61072c9087611980565b95505b50939750505050505050505b92915050565b6001600160a01b03811660009081526005602052604081205461073b90429061141b565b600c5460009080820361077b5750600092915050565b82600b600061078b600185611998565b815260200190815260200160002060000154116107b4576107ad600182611998565b9392505050565b60008052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76548310156107ef5750600092915050565b6000806107fd600184611998565b90505b8181111561089157600060026108168484611998565b61082091906119e4565b61082a9083611998565b6000818152600b602090815260409182902082518084019093528054808452600190910154918301919091529192509087900361086b575095945050505050565b805187111561087c5781935061088a565b610887600183611998565b92505b5050610800565b509392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166385f2aef26040518163ffffffff1660e01b81526004016020604051808303816000875af11580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190611a11565b6001600160a01b0316336001600160a01b03161461096e5760405162461bcd60e51b81526020600482015260096024820152686f6e6c79207465616d60b81b60448201526064015b60405180910390fd5b816001600160a01b03166007848154811061098b5761098b611a2e565b6000918252602090912001546001600160a01b0316146109aa57600080fd5b6001600160a01b03808316600090815260086020526040808220805460ff19908116909155928416825290208054909116600117905560078054829190859081106109f7576109f7611a2e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b600080610a3642610476565b6001600160a01b039093166000908152600460209081526040808320958352949052929092205492915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a9857600080fd5b8160026000828254610aaa9190611998565b909155505060008181526003602052604081208054849290610acd908490611998565b9091555050600081815260036020526040902054610aec908290611431565b610af461150a565b604080518281526020810184905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56891015b60405180910390a25050565b6000828152600a6020526040812054808203610b5457600091505061073b565b60008481526009602052604081208491610b6f600185611998565b81526020019081526020016000206000015411610b9957610b91600182611998565b91505061073b565b6000848152600960209081526040808320838052909152902054831015610bc457600091505061073b565b600080610bd2600184611998565b90505b81811115610c705760006002610beb8484611998565b610bf591906119e4565b610bff9083611998565b6000888152600960209081526040808320848452825291829020825180840190935280548084526001909101549183019190915291925090879003610c4a5750935061073b92505050565b8051871115610c5b57819350610c69565b610c66600183611998565b92505b5050610bd5565b50949350505050565b600d54600114610c8857600080fd5b6002600d55336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cc257600080fd5b6040516331a9108f60e11b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610d2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4e9190611a11565b905060005b8251811015610e6e576000610d81848381518110610d7357610d73611a2e565b6020026020010151866104b8565b90504260066000868581518110610d9a57610d9a611a2e565b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081208982529092529020558015610df557610df5848381518110610de657610de6611a2e565b602002602001015184836115ae565b838281518110610e0757610e07611a2e565b60200260200101516001600160a01b0316836001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc983604051610e5391815260200190565b60405180910390a35080610e66816119f8565b915050610d53565b50506001600d555050565b600d54600114610e8857600080fd5b6002600d5580610e9757600080fd5b6001600160a01b03821660009081526008602052604090205460ff16610fdf57604051633af32abf60e01b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690633af32abf90602401602060405180830381865afa158015610f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f419190611a44565b610f8d5760405162461bcd60e51b815260206004820181905260248201527f627269626520746f6b656e73206d7573742062652077686974656c69737465646044820152606401610965565b600754601011610fdf5760405162461bcd60e51b815260206004820152601760248201527f746f6f206d616e79207265776172647320746f6b656e730000000000000000006044820152606401610965565b6000610fea42610476565b6001600160a01b038416600090815260046020908152604080832084845290915290205490915061101d8433308661169d565b6110278382611980565b6001600160a01b038516600090815260046020908152604080832086845290915290205561105862093a8083611980565b6001600160a01b03851660009081526005602090815260408083209390935560089052205460ff166110ea576001600160a01b0384166000818152600860205260408120805460ff191660019081179091556007805491820181559091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b03191690911790555b60408051838152602081018590526001600160a01b0386169133917f52977ea98a2220a03ee9ba5cb003ada08d394ea10155483c95dc2dc77a7eb24b910160405180910390a350506001600d555050565b6007818154811061114b57600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461119a57600080fd5b81600260008282546111ac9190611980565b9091555050600081815260036020526040812080548492906111cf908490611980565b90915550506000818152600360205260409020546111ee908290611431565b6111f661150a565b604080518281526020810184905233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159101610b28565b600d5460011461123d57600080fd5b6002600d5560405163430c208160e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa1580156112ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d19190611a44565b6112da57600080fd5b60005b81518110156113f857600061130b8383815181106112fd576112fd611a2e565b6020026020010151856104b8565b9050426006600085858151811061132457611324611a2e565b6020908102919091018101516001600160a01b031682528181019290925260409081016000908120888252909252902055801561137f5761137f83838151811061137057611370611a2e565b602002602001015133836115ae565b82828151811061139157611391611a2e565b60200260200101516001600160a01b0316336001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc9836040516113dd91815260200190565b60405180910390a350806113f0816119f8565b9150506112dd565b50506001600d5550565b600061141162093a8083611a66565b61073b9083611998565b600081831061142a57816107ad565b5090919050565b6000828152600a60205260409020544290801580159061147b575060008481526009602052604081208391611467600185611998565b815260200190815260200160002060000154145b156114b4576000848152600960205260408120849161149b600185611998565b8152602081019190915260400160002060010155611504565b60408051808201825283815260208082018681526000888152600983528481208682529092529290209051815590516001918201556114f4908290611980565b6000858152600a60205260409020555b50505050565b600c5442811580159061153c575080600b6000611528600186611998565b815260200190815260200160002060000154145b1561156b57600254600b6000611553600186611998565b81526020810191909152604001600020600101555050565b60408051808201825282815260025460208083019182526000868152600b909152929092209051815590516001918201556115a7908390611980565b600c555050565b6000836001600160a01b03163b116115c557600080fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916116219190611a7a565b6000604051808303816000865af19150503d806000811461165e576040519150601f19603f3d011682016040523d82523d6000602084013e611663565b606091505b509150915081801561168d57508051158061168d57508080602001905181019061168d9190611a44565b61169657600080fd5b5050505050565b6000846001600160a01b03163b116116b457600080fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916117189190611a7a565b6000604051808303816000865af19150503d8060008114611755576040519150601f19603f3d011682016040523d82523d6000602084013e61175a565b606091505b50915091508180156117845750805115806117845750808060200190518101906117849190611a44565b61178d57600080fd5b505050505050565b6000602082840312156117a757600080fd5b5035919050565b6001600160a01b03811681146117c357600080fd5b50565b80356117d1816117ae565b919050565b600080604083850312156117e957600080fd5b82356117f4816117ae565b946020939093013593505050565b6000806040838503121561181557600080fd5b50508035926020909101359150565b60006020828403121561183657600080fd5b81356107ad816117ae565b60008060006060848603121561185657600080fd5b833592506020840135611868816117ae565b91506040840135611878816117ae565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156118ac57600080fd5b8235915060208084013567ffffffffffffffff808211156118cc57600080fd5b818601915086601f8301126118e057600080fd5b8135818111156118f2576118f2611883565b8060051b604051601f19603f8301168101818110858211171561191757611917611883565b60405291825284820192508381018501918983111561193557600080fd5b938501935b8285101561195a5761194b856117c6565b8452938501939285019261193a565b8096505050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b600082198211156119935761199361196a565b500190565b6000828210156119aa576119aa61196a565b500390565b60008160001904831182151516156119c9576119c961196a565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826119f3576119f36119ce565b500490565b600060018201611a0a57611a0a61196a565b5060010190565b600060208284031215611a2357600080fd5b81516107ad816117ae565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611a5657600080fd5b815180151581146107ad57600080fd5b600082611a7557611a756119ce565b500690565b6000825160005b81811015611a9b5760208186018101518583015201611a81565b81811115611aaa576000828501525b50919091019291505056fea2646970667358221220c3d6dec0373dd416c8a10379ef6e4c4616108a18e0898444b722d83b8a372a1964736f6c634300080d0033a264697066735822122053ee0d13352b8552171656fb73fbd51a75159e22e89bd53bcbde1cb112b61e3c64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632a26b9eb146100515780636485f0c414610080578063b0ad856f14610093578063eb57738c146100a6575b600080fd5b61006461005f3660046101c1565b6100b9565b6040516001600160a01b03909116815260200160405180910390f35b61006461008e3660046101c1565b610116565b600354610064906001600160a01b031681565b600254610064906001600160a01b031681565b600033826040516100c990610173565b6100d4929190610286565b604051809103906000f0801580156100f0573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b0392909216918217905592915050565b6000338260405161012690610181565b610131929190610286565b604051809103906000f08015801561014d573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b0392909216918217905592915050565b612e8e80620002e383390190565b611f5c806200317183390190565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b03811681146101bc57600080fd5b919050565b600060208083850312156101d457600080fd5b823567ffffffffffffffff808211156101ec57600080fd5b818501915085601f83011261020057600080fd5b8135818111156102125761021261018f565b8060051b604051601f19603f830116810181811085821117156102375761023761018f565b60405291825284820192508381018501918883111561025557600080fd5b938501935b8285101561027a5761026b856101a5565b8452938501939285019261025a565b98975050505050505050565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b818110156102d45785518516835294830194918301916001016102b6565b50909897505050505050505056fe60c0604052600080546001600160a01b0319908116730a178469e3d08beaa0a289e416ab924f10807989179091556001805490911673ecf044c5b4b867cfda001101c617ecd347095b441781556012553480156200005c57600080fd5b5060405162002e8e38038062002e8e8339810160408190526200007f91620002b4565b6001600160a01b038216608081905260408051638dd598fb60e01b81529051638dd598fb916004808201926020929091908290030181865afa158015620000ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f091906200039d565b6001600160a01b031660a05260005b8151811015620002025760006001600160a01b0316828281518110620001295762000129620003c2565b60200260200101516001600160a01b031614620001ed576001600960008484815181106200015b576200015b620003c2565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506008828281518110620001b157620001b1620003c2565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b80620001f981620003d8565b915050620000ff565b50600154600054604051632210724360e11b81526001600160a01b039182166004820152911690634420e486906024016020604051808303816000875af115801562000252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000278919062000400565b5050506200041a565b80516001600160a01b03811681146200029957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620002c857600080fd5b620002d38362000281565b602084810151919350906001600160401b0380821115620002f357600080fd5b818601915086601f8301126200030857600080fd5b8151818111156200031d576200031d6200029e565b8060051b604051601f19603f830116810181811085821117156200034557620003456200029e565b6040529182528482019250838101850191898311156200036457600080fd5b938501935b828510156200038d576200037d8562000281565b8452938501939285019262000369565b8096505050505050509250929050565b600060208284031215620003b057600080fd5b620003bb8262000281565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620003f957634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156200041357600080fd5b5051919050565b60805160a051612a246200046a6000396000818161041801528181610aae01528181610f2e015261175401526000818161030601528181610cb901528181610eeb015261165e0152612a246000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c806399bcc05211610125578063e6886396116100ad578063f301af421161007c578063f301af421461057b578063f32077231461058e578063f5f8d365146105a1578063f7412baf146105b4578063fd314098146105db57600080fd5b8063e68863961461052c578063e8111a1214610534578063f12297771461053d578063f25e55a51461055057600080fd5b8063a28d4c9c116100f4578063a28d4c9c146104b3578063a7852afa146104c6578063aa479652146104d9578063b66503cf146104f9578063da09d19d1461050c57600080fd5b806399bcc0521461044d5780639cc7f708146104605780639ce43f90146104805780639e2bf22c146104a057600080fd5b806349dcc204116101a8578063638634ee11610177578063638634ee146103da57806368fcee1a146103ed57806376f4be36146104005780638dd598fb146104135780639418f9391461043a57600080fd5b806349dcc204146103405780634d5ce0381461037257806350589793146103a55780635a45d052146103c557600080fd5b80632ce9aead116101e45780632ce9aead146102a35780633b881999146102c35780633e491d47146102ee57806346c96aac1461030157600080fd5b806301316ddf1461021657806318160ddd146102625780631be0528914610279578063221ca18c14610283575b600080fd5b6102486102243660046125e3565b60106020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152015b60405180910390f35b61026b600a5481565b604051908152602001610259565b61026b62093a8081565b61026b61029136600461260f565b60026020526000908152604090205481565b61026b6102b136600461260f565b60046020526000908152604090205481565b61026b6102d13660046125e3565b600760209081526000928352604080842090915290825290205481565b61026b6102fc3660046125e3565b6105ee565b6103287f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610259565b61024861034e36600461262c565b600c6020908152600092835260408084209091529082529020805460019091015482565b61039561038036600461260f565b60096020526000908152604090205460ff1681565b6040519015158152602001610259565b61026b6103b336600461264e565b600d6020526000908152604090205481565b6103d86103d33660046125e3565b610910565b005b61026b6103e836600461260f565b610948565b6103d86103fb3660046125e3565b61096c565b61026b61040e36600461264e565b610978565b6103287f000000000000000000000000000000000000000000000000000000000000000081565b6103d8610448366004612667565b610aac565b61026b61045b36600461260f565b610c3d565b61026b61046e36600461264e565b600b6020526000908152604090205481565b61026b61048e36600461260f565b60056020526000908152604090205481565b6103d86104ae36600461262c565b610cae565b61026b6104c136600461262c565b610d87565b6103d86104d43660046126bf565b610ecc565b61026b6104e736600461260f565b60116020526000908152604090205481565b6103d86105073660046125e3565b611211565b61026b61051a36600461260f565b60036020526000908152604090205481565b60085461026b565b61026b600f5481565b61026b61054b36600461260f565b611507565b61026b61055e3660046125e3565b600660209081526000928352604080842090915290825290205481565b61032861058936600461264e565b611629565b6103d861059c36600461262c565b611653565b6103d86105af3660046126bf565b611724565b6102486105c236600461264e565b600e602052600090815260409020805460019091015482565b6102486105e93660046125e3565b611a2b565b6001600160a01b038216600081815260066020908152604080832085845282528083205493835260108252808320838052909152812054909182916106339190611c4c565b6000848152600d60205260408120549192500361065457600091505061090a565b60006106608483610d87565b6000858152600d60205260408120549192509061067f906001906127a6565b9050600081156107ec57825b6106966001846127a6565b81116107ea576000878152600c60208181526040808420858552808352818520825180840190935280548352600190810154838501528c865293909252929182906106e29086906127bd565b815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060006107218b8460000151611a2b565b50905060006107348c8460000151611a2b565b5090508b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079991906127d5565b6107a490600a6128dc565b6107ae83836127a6565b85602001516107bd91906128eb565b6107c7919061290a565b6107d190876127bd565b95505050505080806107e29061292c565b91505061068b565b505b6000868152600c6020908152604080832085845282528083208151808301909252805480835260019091015492820192909252919061082c908a90611a2b565b509050886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561086d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089191906127d5565b61089c90600a6128dc565b6001600160a01b038a1660009081526007602090815260408083208c84529091529020546108cb908390611c4c565b6108d48b611507565b6108de91906127a6565b83602001516108ed91906128eb565b6108f7919061290a565b61090190846127bd565b96505050505050505b92915050565b61091a8282611c62565b6001600160a01b03909316600090815260056020908152604080832060049092529091209390935590915550565b6001600160a01b03811660009081526003602052604081205461090a904290611dc5565b61091a82826000611dd4565b600f5460009080820361098e5750600092915050565b82600e600061099e6001856127a6565b815260200190815260200160002060000154116109c7576109c06001826127a6565b9392505050565b60008052600e6020527fe710864318d4a32f37d6ce54cb3fadbef648dd12d8dbdf53973564d56b7f881c54831015610a025750600092915050565b600080610a106001846127a6565b90505b81811115610aa45760006002610a2984846127a6565b610a33919061290a565b610a3d90836127a6565b6000818152600e6020908152604091829020825180840190935280548084526001909101549183019190915291925090879003610a7e575095945050505050565b8051871115610a8f57819350610a9d565b610a9a6001836127a6565b92505b5050610a13565b509392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166385f2aef26040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190612945565b6001600160a01b0316336001600160a01b031614610b815760405162461bcd60e51b81526020600482015260096024820152686f6e6c79207465616d60b81b60448201526064015b60405180910390fd5b816001600160a01b031660088481548110610b9e57610b9e612962565b6000918252602090912001546001600160a01b031614610bbd57600080fd5b6001600160a01b03808316600090815260096020526040808220805460ff1990811690915592841682529020805490911660011790556008805482919085908110610c0a57610c0a612962565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b6001600160a01b0381166000908152600360205260408120544210610c6457506000919050565b6001600160a01b038216600090815260036020526040812054610c889042906127a6565b6001600160a01b0384166000908152600260205260409020549091506109c090826128eb565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ce357600080fd5b610ceb611fc4565b81600a6000828254610cfd91906127a6565b90915550506000818152600b602052604081208054849290610d209084906127a6565b90915550506000818152600b6020526040902054610d3f90829061204c565b610d47612125565b604080518281526020810184905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56891015b60405180910390a25050565b6000828152600d6020526040812054808203610da757600091505061090a565b6000848152600c602052604081208491610dc26001856127a6565b81526020019081526020016000206000015411610dec57610de46001826127a6565b91505061090a565b6000848152600c60209081526040808320838052909152902054831015610e1757600091505061090a565b600080610e256001846127a6565b90505b81811115610ec35760006002610e3e84846127a6565b610e48919061290a565b610e5290836127a6565b6000888152600c60209081526040808320848452825291829020825180840190935280548084526001909101549183019190915291925090879003610e9d5750935061090a92505050565b8051871115610eae57819350610ebc565b610eb96001836127a6565b92505b5050610e28565b50949350505050565b601254600114610edb57600080fd5b6002601255336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f1557600080fd5b6040516331a9108f60e11b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa19190612945565b905060005b825181101561120657610fd6838281518110610fc457610fc4612962565b60200260200101516000196001611dd4565b60056000868581518110610fec57610fec612962565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006004600088878151811061102c5761102c612962565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000849190505583919050555050600061108784838151811061107957611079612962565b6020026020010151866105ee565b905042600660008685815181106110a0576110a0612962565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600087815260200190815260200160002081905550600560008584815181106110f3576110f3612962565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020546007600086858151811061113257611132612962565b6020908102919091018101516001600160a01b031682528181019290925260409081016000908120898252909252902055801561118d5761118d84838151811061117e5761117e612962565b602002602001015184836121c9565b83828151811061119f5761119f612962565b60200260200101516001600160a01b0316836001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc9836040516111eb91815260200190565b60405180910390a350806111fe8161292c565b915050610fa6565b505060016012555050565b60125460011461122057600080fd5b60026012558061122f57600080fd5b6001600160a01b03821660009081526009602052604090205460ff1661125457600080fd5b6001600160a01b038216600090815260026020526040812054900361127f5761127f826000426122b8565b61128d826000196001611dd4565b6001600160a01b03841660009081526005602090815260408083206004835281842094909455939092556003909152205442106112fb576112d0823330846123a7565b6112dd62093a808261290a565b6001600160a01b038316600090815260026020526040902055611394565b6001600160a01b03821660009081526003602052604081205461131f9042906127a6565b6001600160a01b0384166000908152600260205260408120549192509061134690836128eb565b905080831161135457600080fd5b611360843330866123a7565b62093a8061136e82856127bd565b611378919061290a565b6001600160a01b03851660009081526002602052604090205550505b6001600160a01b0382166000908152600260205260409020546113b657600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156113fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114219190612978565b905061143062093a808261290a565b6001600160a01b03841660009081526002602052604090205411156114975760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610b78565b6114a462093a80426127bd565b6001600160a01b0384166000818152600360205260409081902092909255905133907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf50826906114f59086815260200190565b60405180910390a35050600160125550565b6000600a5460000361152f57506001600160a01b031660009081526005602052604090205490565b600a54826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611570573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159491906127d5565b61159f90600a6128dc565b6001600160a01b038416600090815260026020908152604080832054600483528184205460039093529220546115d59190611dc5565b6115de86610948565b6115e891906127a6565b6115f291906128eb565b6115fc91906128eb565b611606919061290a565b6001600160a01b03831660009081526005602052604090205461090a91906127bd565b6008818154811061163957600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461168857600080fd5b611690611fc4565b81600a60008282546116a291906127bd565b90915550506000818152600b6020526040812080548492906116c59084906127bd565b90915550506000818152600b60205260409020546116e490829061204c565b6116ec612125565b604080518281526020810184905233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159101610d7b565b60125460011461173357600080fd5b600260125560405163430c208160e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa1580156117a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c79190612991565b6117d057600080fd5b60005b8151811015611a21576117f1828281518110610fc457610fc4612962565b6005600085858151811061180757611807612962565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006004600087878151811061184757611847612962565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600084919050558391905055505060006118a283838151811061189457611894612962565b6020026020010151856105ee565b905042600660008585815181106118bb576118bb612962565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000868152602001908152602001600020819055506005600084848151811061190e5761190e612962565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020546007600085858151811061194d5761194d612962565b6020908102919091018101516001600160a01b03168252818101929092526040908101600090812088825290925290205580156119a8576119a883838151811061199957611999612962565b602002602001015133836121c9565b8282815181106119ba576119ba612962565b60200260200101516001600160a01b0316336001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc983604051611a0691815260200190565b60405180910390a35080611a198161292c565b9150506117d3565b5050600160125550565b6001600160a01b0382166000908152601160205260408120548190808203611a5a576000809250925050611c45565b6001600160a01b03851660009081526010602052604081208591611a7f6001856127a6565b81526020019081526020016000206000015411611b1c576001600160a01b038516600090815260106020526040812090611aba6001846127a6565b81526020019081526020016000206001015460106000876001600160a01b03166001600160a01b031681526020019081526020016000206000600184611b0091906127a6565b8152602001908152602001600020600001549250925050611c45565b6001600160a01b0385166000908152601060209081526040808320838052909152902054841015611b54576000809250925050611c45565b600080611b626001846127a6565b90505b81811115611c145760006002611b7b84846127a6565b611b85919061290a565b611b8f90836127a6565b6001600160a01b0389166000908152601060209081526040808320848452825291829020825180840190935280548084526001909101549183019190915291925090889003611bee57602081015190519096509450611c459350505050565b8051881115611bff57819350611c0d565b611c0a6001836127a6565b92505b5050611b65565b506001600160a01b038616600090815260106020908152604080832093835292905220600181015490549093509150505b9250929050565b6000818311611c5b57816109c0565b5090919050565b6001600160a01b0382166000908152600460209081526040808320546005909252822054600f54839291908303611c9c5792509050611c45565b6001600160a01b0386166000908152600260205260408120549003611cc7579250429150611c459050565b6000611cd283610978565b90506000611cee6001600f54611ce891906127a6565b88611dc5565b9050815b81811015611db6576000818152600e60209081526040918290208251808401909352805483526001015490820181905215611da3576000600e81611d378560016127bd565b8152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600080611d828d8460000151866000015187602001518d61249f565b9092509050611d9182896127bd565b9750611d9e8d89836122b8565b975050505b5080611dae8161292c565b915050611cf2565b50919792965091945050505050565b6000818310611c5b57816109c0565b6001600160a01b0383166000908152600460209081526040808320546005909252822054600f54839291908303611e0e5792509050611fbc565b6001600160a01b0387166000908152600260205260408120549003611e39579250429150611fbc9050565b6000611e4483610978565b90506000611e606001600f54611e5a91906127a6565b89611dc5565b90508015611f3957815b611e756001836127a6565b8111611f37576000818152600e60209081526040918290208251808401909352805483526001015490820181905215611f24576000600e81611eb88560016127bd565b8152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600080611f038e8460000151866000015187602001518d61249f565b9092509050611f1282896127bd565b9750611f1f8e89836122b8565b975050505b5080611f2f8161292c565b915050611e6a565b505b8615611fb3576000818152600e60209081526040918290208251808401909352805483526001015490820181905215611fb1576000611f928b611f7b8d610948565b8451611f87908a611c4c565b85602001518a61249f565b509050611f9f81866127bd565b9450611fac8b86426122b8565b429550505b505b50909350909150505b935093915050565b60085460005b8181101561204857600060088281548110611fe757611fe7612962565b6000918252602090912001546001600160a01b0316905061200c816000196001611dd4565b6001600160a01b0390921660009081526005602090815260408083206004909252909120929092559055806120408161292c565b915050611fca565b5050565b6000828152600d60205260409020544290801580159061209657506000848152600c6020526040812083916120826001856127a6565b815260200190815260200160002060000154145b156120cf576000848152600c6020526040812084916120b66001856127a6565b815260208101919091526040016000206001015561211f565b60408051808201825283815260208082018681526000888152600c835284812086825290925292902090518155905160019182015561210f9082906127bd565b6000858152600d60205260409020555b50505050565b600f54428115801590612157575080600e60006121436001866127a6565b815260200190815260200160002060000154145b1561218657600a54600e600061216e6001866127a6565b81526020810191909152604001600020600101555050565b604080518082018252828152600a5460208083019182526000868152600e909152929092209051815590516001918201556121c29083906127bd565b600f555050565b6000836001600160a01b03163b116121e057600080fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161223c91906129b3565b6000604051808303816000865af19150503d8060008114612279576040519150601f19603f3d011682016040523d82523d6000602084013e61227e565b606091505b50915091508180156122a85750805115806122a85750808060200190518101906122a89190612991565b6122b157600080fd5b5050505050565b6001600160a01b038316600090815260116020526040902054801580159061231457506001600160a01b038416600090815260106020526040812083916123006001856127a6565b815260200190815260200160002060000154145b1561233e576001600160a01b038416600090815260106020526040812084916120b66001856127a6565b60408051808201825283815260208082018681526001600160a01b0388166000908152601083528481208682529092529290209051815590516001918201556123889082906127bd565b6001600160a01b03851660009081526011602052604090205550505050565b6000846001600160a01b03163b116123be57600080fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161242291906129b3565b6000604051808303816000865af19150503d806000811461245f576040519150601f19603f3d011682016040523d82523d6000602084013e612464565b606091505b509150915081801561248e57508051158061248e57508080602001905181019061248e9190612991565b61249757600080fd5b505050505050565b60008060006124ae8785611c4c565b905084886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251391906127d5565b61251e90600a6128dc565b6001600160a01b038a166000908152600260205260409020546125626125448a89611c4c565b6001600160a01b038d16600090815260036020526040902054611dc5565b6001600160a01b038c16600090815260036020526040902054612586908690611dc5565b61259091906127a6565b61259a91906128eb565b6125a491906128eb565b6125ae919061290a565b9890975095505050505050565b6001600160a01b03811681146125d057600080fd5b50565b80356125de816125bb565b919050565b600080604083850312156125f657600080fd5b8235612601816125bb565b946020939093013593505050565b60006020828403121561262157600080fd5b81356109c0816125bb565b6000806040838503121561263f57600080fd5b50508035926020909101359150565b60006020828403121561266057600080fd5b5035919050565b60008060006060848603121561267c57600080fd5b83359250602084013561268e816125bb565b9150604084013561269e816125bb565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156126d257600080fd5b8235915060208084013567ffffffffffffffff808211156126f257600080fd5b818601915086601f83011261270657600080fd5b813581811115612718576127186126a9565b8060051b604051601f19603f8301168101818110858211171561273d5761273d6126a9565b60405291825284820192508381018501918983111561275b57600080fd5b938501935b8285101561278057612771856125d3565b84529385019392850192612760565b8096505050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b6000828210156127b8576127b8612790565b500390565b600082198211156127d0576127d0612790565b500190565b6000602082840312156127e757600080fd5b815160ff811681146109c057600080fd5b600181815b8085111561283357816000190482111561281957612819612790565b8085161561282657918102915b93841c93908002906127fd565b509250929050565b60008261284a5750600161090a565b816128575750600061090a565b816001811461286d576002811461287757612893565b600191505061090a565b60ff84111561288857612888612790565b50506001821b61090a565b5060208310610133831016604e8410600b84101617156128b6575081810a61090a565b6128c083836127f8565b80600019048211156128d4576128d4612790565b029392505050565b60006109c060ff84168361283b565b600081600019048311821515161561290557612905612790565b500290565b60008261292757634e487b7160e01b600052601260045260246000fd5b500490565b60006001820161293e5761293e612790565b5060010190565b60006020828403121561295757600080fd5b81516109c0816125bb565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561298a57600080fd5b5051919050565b6000602082840312156129a357600080fd5b815180151581146109c057600080fd5b6000825160005b818110156129d457602081860181015185830152016129ba565b818111156129e3576000828501525b50919091019291505056fea26469706673582212206bd63dcd50d2d0978656869a799a0d2f5a2b01beb86cc5a1d0d9b99276d22d3864736f6c634300080d003360c0604052600080546001600160a01b0319908116730a178469e3d08beaa0a289e416ab924f10807989179091556001805490911673ecf044c5b4b867cfda001101c617ecd347095b44178155600d553480156200005c57600080fd5b5060405162001f5c38038062001f5c8339810160408190526200007f91620002b4565b6001600160a01b038216608081905260408051638dd598fb60e01b81529051638dd598fb916004808201926020929091908290030181865afa158015620000ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f091906200039d565b6001600160a01b031660a05260005b8151811015620002025760006001600160a01b0316828281518110620001295762000129620003c2565b60200260200101516001600160a01b031614620001ed576001600860008484815181106200015b576200015b620003c2565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506007828281518110620001b157620001b1620003c2565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b80620001f981620003d8565b915050620000ff565b50600154600054604051632210724360e11b81526001600160a01b039182166004820152911690634420e486906024016020604051808303816000875af115801562000252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000278919062000400565b5050506200041a565b80516001600160a01b03811681146200029957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620002c857600080fd5b620002d38362000281565b602084810151919350906001600160401b0380821115620002f357600080fd5b818601915086601f8301126200030857600080fd5b8151818111156200031d576200031d6200029e565b8060051b604051601f19603f830116810181811085821117156200034557620003456200029e565b6040529182528482019250838101850191898311156200036457600080fd5b938501935b828510156200038d576200037d8562000281565b8452938501939285019262000369565b8096505050505050509250929050565b600060208284031215620003b057600080fd5b620003bb8262000281565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620003f957634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156200041357600080fd5b5051919050565b60805160a051611aeb62000471600039600081816102d90152818161089b01528181610cdb015261125e0152600081816101da01528181610a6e01528181610c9801528181610ed601526111700152611aeb6000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80639cc7f708116100de578063e688639611610097578063f301af4211610071578063f301af4214610416578063f320772314610429578063f5f8d3651461043c578063f7412baf1461044f57600080fd5b8063e6886396146103da578063e8111a12146103e2578063f25e55a5146103eb57600080fd5b80639cc7f7081461034e5780639e2bf22c1461036e578063a28d4c9c14610381578063a7852afa14610394578063b66503cf146103a7578063da09d19d146103ba57600080fd5b8063505897931161014b5780638dd598fb116101255780638dd598fb146102d457806392777b29146102fb5780639418f9391461032657806399bcc0521461033b57600080fd5b8063505897931461028e578063638634ee146102ae57806376f4be36146102c157600080fd5b80630175e23b1461019357806318160ddd146101b95780633e491d47146101c257806346c96aac146101d557806349dcc204146102145780634d5ce0381461025b575b600080fd5b6101a66101a1366004611795565b610476565b6040519081526020015b60405180910390f35b6101a660025481565b6101a66101d03660046117d6565b6104b8565b6101fc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101b0565b610246610222366004611802565b60096020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101b0565b61027e610269366004611824565b60086020526000908152604090205460ff1681565b60405190151581526020016101b0565b6101a661029c366004611795565b600a6020526000908152604090205481565b6101a66102bc366004611824565b610741565b6101a66102cf366004611795565b610765565b6101fc7f000000000000000000000000000000000000000000000000000000000000000081565b6101a66103093660046117d6565b600460209081526000928352604080842090915290825290205481565b610339610334366004611841565b610899565b005b6101a6610349366004611824565b610a2a565b6101a661035c366004611795565b60036020526000908152604090205481565b61033961037c366004611802565b610a63565b6101a661038f366004611802565b610b34565b6103396103a2366004611899565b610c79565b6103396103b53660046117d6565b610e79565b6101a66103c8366004611824565b60056020526000908152604090205481565b6007546101a6565b6101a6600c5481565b6101a66103f93660046117d6565b600660209081526000928352604080842090915290825290205481565b6101fc610424366004611795565b61113b565b610339610437366004611802565b611165565b61033961044a366004611899565b61122e565b61024661045d366004611795565b600b602052600090815260409020805460019091015482565b60008061048283611402565b9050600061049362093a8083611980565b90508084106104ae576104a98262093a80611980565b6104b0565b815b949350505050565b6001600160a01b0382166000908152600660209081526040808320848452825280832054600a90925282205482036104f457600091505061073b565b60006105008483610b34565b6000858152600a60205260408120549192509061051f90600190611998565b90506000610540604051806040016040528060008152602001600081525090565b61054985611402565b81526001831561065a57845b610560600186611998565b81116106585760008981526009602090815260408083208484528252808320815180830190925280548083526001909101549282019290925291906105a490611402565b85519091508111156105c25760208501516105bf9087611980565b95505b808552600b60006105d96102cf62093a8085611980565b815260200190815260200160002060010154935083600460008e6001600160a01b03166001600160a01b03168152602001908152602001600020600083815260200190815260200160002054836020015161063491906119af565b61063e91906119e4565b602086015250819050610650816119f8565b915050610555565b505b600088815260096020908152604080832087845282528083208151808301909252805480835260019091015492820192909252919061069890611402565b905060006106a962093a8083611980565b90508042111561072f57600b60006106c083610765565b815260200190815260200160002060010154600460008e6001600160a01b03166001600160a01b03168152602001908152602001600020600084815260200190815260200160002054846020015161071891906119af565b61072291906119e4565b61072c9087611980565b95505b50939750505050505050505b92915050565b6001600160a01b03811660009081526005602052604081205461073b90429061141b565b600c5460009080820361077b5750600092915050565b82600b600061078b600185611998565b815260200190815260200160002060000154116107b4576107ad600182611998565b9392505050565b60008052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76548310156107ef5750600092915050565b6000806107fd600184611998565b90505b8181111561089157600060026108168484611998565b61082091906119e4565b61082a9083611998565b6000818152600b602090815260409182902082518084019093528054808452600190910154918301919091529192509087900361086b575095945050505050565b805187111561087c5781935061088a565b610887600183611998565b92505b5050610800565b509392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166385f2aef26040518163ffffffff1660e01b81526004016020604051808303816000875af11580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190611a11565b6001600160a01b0316336001600160a01b03161461096e5760405162461bcd60e51b81526020600482015260096024820152686f6e6c79207465616d60b81b60448201526064015b60405180910390fd5b816001600160a01b03166007848154811061098b5761098b611a2e565b6000918252602090912001546001600160a01b0316146109aa57600080fd5b6001600160a01b03808316600090815260086020526040808220805460ff19908116909155928416825290208054909116600117905560078054829190859081106109f7576109f7611a2e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b600080610a3642610476565b6001600160a01b039093166000908152600460209081526040808320958352949052929092205492915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a9857600080fd5b8160026000828254610aaa9190611998565b909155505060008181526003602052604081208054849290610acd908490611998565b9091555050600081815260036020526040902054610aec908290611431565b610af461150a565b604080518281526020810184905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56891015b60405180910390a25050565b6000828152600a6020526040812054808203610b5457600091505061073b565b60008481526009602052604081208491610b6f600185611998565b81526020019081526020016000206000015411610b9957610b91600182611998565b91505061073b565b6000848152600960209081526040808320838052909152902054831015610bc457600091505061073b565b600080610bd2600184611998565b90505b81811115610c705760006002610beb8484611998565b610bf591906119e4565b610bff9083611998565b6000888152600960209081526040808320848452825291829020825180840190935280548084526001909101549183019190915291925090879003610c4a5750935061073b92505050565b8051871115610c5b57819350610c69565b610c66600183611998565b92505b5050610bd5565b50949350505050565b600d54600114610c8857600080fd5b6002600d55336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cc257600080fd5b6040516331a9108f60e11b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610d2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4e9190611a11565b905060005b8251811015610e6e576000610d81848381518110610d7357610d73611a2e565b6020026020010151866104b8565b90504260066000868581518110610d9a57610d9a611a2e565b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081208982529092529020558015610df557610df5848381518110610de657610de6611a2e565b602002602001015184836115ae565b838281518110610e0757610e07611a2e565b60200260200101516001600160a01b0316836001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc983604051610e5391815260200190565b60405180910390a35080610e66816119f8565b915050610d53565b50506001600d555050565b600d54600114610e8857600080fd5b6002600d5580610e9757600080fd5b6001600160a01b03821660009081526008602052604090205460ff16610fdf57604051633af32abf60e01b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690633af32abf90602401602060405180830381865afa158015610f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f419190611a44565b610f8d5760405162461bcd60e51b815260206004820181905260248201527f627269626520746f6b656e73206d7573742062652077686974656c69737465646044820152606401610965565b600754601011610fdf5760405162461bcd60e51b815260206004820152601760248201527f746f6f206d616e79207265776172647320746f6b656e730000000000000000006044820152606401610965565b6000610fea42610476565b6001600160a01b038416600090815260046020908152604080832084845290915290205490915061101d8433308661169d565b6110278382611980565b6001600160a01b038516600090815260046020908152604080832086845290915290205561105862093a8083611980565b6001600160a01b03851660009081526005602090815260408083209390935560089052205460ff166110ea576001600160a01b0384166000818152600860205260408120805460ff191660019081179091556007805491820181559091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b03191690911790555b60408051838152602081018590526001600160a01b0386169133917f52977ea98a2220a03ee9ba5cb003ada08d394ea10155483c95dc2dc77a7eb24b910160405180910390a350506001600d555050565b6007818154811061114b57600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461119a57600080fd5b81600260008282546111ac9190611980565b9091555050600081815260036020526040812080548492906111cf908490611980565b90915550506000818152600360205260409020546111ee908290611431565b6111f661150a565b604080518281526020810184905233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159101610b28565b600d5460011461123d57600080fd5b6002600d5560405163430c208160e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063430c208190604401602060405180830381865afa1580156112ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d19190611a44565b6112da57600080fd5b60005b81518110156113f857600061130b8383815181106112fd576112fd611a2e565b6020026020010151856104b8565b9050426006600085858151811061132457611324611a2e565b6020908102919091018101516001600160a01b031682528181019290925260409081016000908120888252909252902055801561137f5761137f83838151811061137057611370611a2e565b602002602001015133836115ae565b82828151811061139157611391611a2e565b60200260200101516001600160a01b0316336001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc9836040516113dd91815260200190565b60405180910390a350806113f0816119f8565b9150506112dd565b50506001600d5550565b600061141162093a8083611a66565b61073b9083611998565b600081831061142a57816107ad565b5090919050565b6000828152600a60205260409020544290801580159061147b575060008481526009602052604081208391611467600185611998565b815260200190815260200160002060000154145b156114b4576000848152600960205260408120849161149b600185611998565b8152602081019190915260400160002060010155611504565b60408051808201825283815260208082018681526000888152600983528481208682529092529290209051815590516001918201556114f4908290611980565b6000858152600a60205260409020555b50505050565b600c5442811580159061153c575080600b6000611528600186611998565b815260200190815260200160002060000154145b1561156b57600254600b6000611553600186611998565b81526020810191909152604001600020600101555050565b60408051808201825282815260025460208083019182526000868152600b909152929092209051815590516001918201556115a7908390611980565b600c555050565b6000836001600160a01b03163b116115c557600080fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916116219190611a7a565b6000604051808303816000865af19150503d806000811461165e576040519150601f19603f3d011682016040523d82523d6000602084013e611663565b606091505b509150915081801561168d57508051158061168d57508080602001905181019061168d9190611a44565b61169657600080fd5b5050505050565b6000846001600160a01b03163b116116b457600080fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916117189190611a7a565b6000604051808303816000865af19150503d8060008114611755576040519150601f19603f3d011682016040523d82523d6000602084013e61175a565b606091505b50915091508180156117845750805115806117845750808060200190518101906117849190611a44565b61178d57600080fd5b505050505050565b6000602082840312156117a757600080fd5b5035919050565b6001600160a01b03811681146117c357600080fd5b50565b80356117d1816117ae565b919050565b600080604083850312156117e957600080fd5b82356117f4816117ae565b946020939093013593505050565b6000806040838503121561181557600080fd5b50508035926020909101359150565b60006020828403121561183657600080fd5b81356107ad816117ae565b60008060006060848603121561185657600080fd5b833592506020840135611868816117ae565b91506040840135611878816117ae565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156118ac57600080fd5b8235915060208084013567ffffffffffffffff808211156118cc57600080fd5b818601915086601f8301126118e057600080fd5b8135818111156118f2576118f2611883565b8060051b604051601f19603f8301168101818110858211171561191757611917611883565b60405291825284820192508381018501918983111561193557600080fd5b938501935b8285101561195a5761194b856117c6565b8452938501939285019261193a565b8096505050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b600082198211156119935761199361196a565b500190565b6000828210156119aa576119aa61196a565b500390565b60008160001904831182151516156119c9576119c961196a565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826119f3576119f36119ce565b500490565b600060018201611a0a57611a0a61196a565b5060010190565b600060208284031215611a2357600080fd5b81516107ad816117ae565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611a5657600080fd5b815180151581146107ad57600080fd5b600082611a7557611a756119ce565b500690565b6000825160005b81811015611a9b5760208186018101518583015201611a81565b81811115611aaa576000828501525b50919091019291505056fea2646970667358221220c3d6dec0373dd416c8a10379ef6e4c4616108a18e0898444b722d83b8a372a1964736f6c634300080d0033a264697066735822122053ee0d13352b8552171656fb73fbd51a75159e22e89bd53bcbde1cb112b61e3c64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21829,
        "contract": "contracts/factories/BribeFactory.sol:BribeFactory",
        "label": "multisig",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21832,
        "contract": "contracts/factories/BribeFactory.sol:BribeFactory",
        "label": "turnstile",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 21834,
        "contract": "contracts/factories/BribeFactory.sol:BribeFactory",
        "label": "last_internal_bribe",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 21836,
        "contract": "contracts/factories/BribeFactory.sol:BribeFactory",
        "label": "last_external_bribe",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}