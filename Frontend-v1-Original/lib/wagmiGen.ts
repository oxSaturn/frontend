// Generated by @wagmi/cli@1.2.0 on 6/18/2023 at 9:05:02 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from "wagmi";
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: "event",
    inputs: [
      { name: "owner", type: "address", indexed: true },
      { name: "spender", type: "address", indexed: true },
      { name: "value", type: "uint256", indexed: false },
    ],
    name: "Approval",
  },
  {
    type: "event",
    inputs: [
      { name: "from", type: "address", indexed: true },
      { name: "to", type: "address", indexed: true },
      { name: "value", type: "uint256", indexed: false },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", type: "address" },
      { name: "spender", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", type: "address" },
      { name: "amount", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "recipient", type: "address" },
      { name: "amount", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "sender", type: "address" },
      { name: "recipient", type: "address" },
      { name: "amount", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// oAGG
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const oAggABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" },
      { name: "_admin", internalType: "address", type: "address" },
      { name: "_paymentToken", internalType: "address", type: "address" },
      { name: "_underlyingToken", internalType: "address", type: "address" },
      { name: "_pair", internalType: "contract IPair", type: "address" },
      { name: "_gaugeFactory", internalType: "address", type: "address" },
      { name: "_treasury", internalType: "address", type: "address" },
      { name: "_voter", internalType: "address", type: "address" },
      { name: "_votingEscrow", internalType: "address", type: "address" },
      { name: "_router", internalType: "address", type: "address" },
    ],
  },
  { type: "error", inputs: [], name: "OptionToken_IncorrectPairToken" },
  { type: "error", inputs: [], name: "OptionToken_InvalidDiscount" },
  { type: "error", inputs: [], name: "OptionToken_InvalidLockDuration" },
  { type: "error", inputs: [], name: "OptionToken_InvalidTeamFee" },
  { type: "error", inputs: [], name: "OptionToken_InvalidTwapPoints" },
  { type: "error", inputs: [], name: "OptionToken_NoAdminRole" },
  { type: "error", inputs: [], name: "OptionToken_NoMinterRole" },
  { type: "error", inputs: [], name: "OptionToken_NoPauserRole" },
  { type: "error", inputs: [], name: "OptionToken_PastDeadline" },
  { type: "error", inputs: [], name: "OptionToken_Paused" },
  { type: "error", inputs: [], name: "OptionToken_SlippageTooHigh" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "paymentAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Exercise",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "paymentAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "lpAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ExerciseLp",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "paymentAmount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "nftId",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ExerciseVe",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "isPaused", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "PauseStateChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "discount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "SetDiscount",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newGauge",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "SetGauge",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "lockDurationForMaxLpDiscount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "SetLockDurationForMaxLpDiscount",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newPair",
        internalType: "contract IPair",
        type: "address",
        indexed: true,
      },
      {
        name: "newPaymentToken",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "SetPairAndPaymentToken",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newRouter",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "SetRouter",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newFee",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "SetTeamFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newTreasury",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "SetTreasury",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "twapPoints",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "SetTwapPoints",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "veDiscount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "SetVeDiscount",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "FULL_LOCK",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MAX_DISCOUNT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MAX_LP_DISCOUNT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MAX_TEAM_FEE",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MAX_TWAP_POINTS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MINTER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_DISCOUNT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_LOCK",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_LP_DISCOUNT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "PAUSER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "discount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_maxPaymentAmount", internalType: "uint256", type: "uint256" },
      { name: "_recipient", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" },
    ],
    name: "exercise",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_maxPaymentAmount", internalType: "uint256", type: "uint256" },
      { name: "_recipient", internalType: "address", type: "address" },
    ],
    name: "exercise",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_maxPaymentAmount", internalType: "uint256", type: "uint256" },
      { name: "_recipient", internalType: "address", type: "address" },
      { name: "_discount", internalType: "uint256", type: "uint256" },
      { name: "_deadline", internalType: "uint256", type: "uint256" },
    ],
    name: "exerciseLp",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_maxPaymentAmount", internalType: "uint256", type: "uint256" },
      { name: "_recipient", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" },
    ],
    name: "exerciseVe",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "gauge",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_amount", internalType: "uint256", type: "uint256" }],
    name: "getDiscountedPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_discount", internalType: "uint256", type: "uint256" }],
    name: "getLockDurationForLpDiscount",
    outputs: [{ name: "duration", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_discount", internalType: "uint256", type: "uint256" },
    ],
    name: "getLpDiscountedPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getSlopeInterceptForLpDiscount",
    outputs: [
      { name: "slope", internalType: "int256", type: "int256" },
      { name: "intercept", internalType: "int256", type: "int256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_amount", internalType: "uint256", type: "uint256" }],
    name: "getTimeWeightedAveragePrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_amount", internalType: "uint256", type: "uint256" }],
    name: "getVeDiscountedPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isPaused",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "lockDurationForMaxLpDiscount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pair",
    outputs: [{ name: "", internalType: "contract IPair", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "pause",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "paymentToken",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "router",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_discount", internalType: "uint256", type: "uint256" }],
    name: "setDiscount",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_duration", internalType: "uint256", type: "uint256" }],
    name: "setLockDurationForMaxLpDiscount",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_pair", internalType: "contract IPair", type: "address" },
      { name: "_paymentToken", internalType: "address", type: "address" },
    ],
    name: "setPairAndPaymentToken",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_router", internalType: "address", type: "address" }],
    name: "setRouter",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_fee", internalType: "uint256", type: "uint256" }],
    name: "setTeamFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_treasury", internalType: "address", type: "address" }],
    name: "setTreasury",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_twapPoints", internalType: "uint256", type: "uint256" }],
    name: "setTwapPoints",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_veDiscount", internalType: "uint256", type: "uint256" }],
    name: "setVeDiscount",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "teamFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "treasury",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "twapPoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "unPause",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "underlyingToken",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "updateGauge",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "veDiscount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "voter",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "votingEscrow",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
] as const;

export const oAggAddress =
  "0x385B28A706FEd830E89Fe9293f66764C62F92f6c" as const;

export const oAggConfig = { address: oAggAddress, abi: oAggABI } as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AggMaxxing
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const aggMaxxingABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_stake", internalType: "address", type: "address" },
      { name: "_external_bribe", internalType: "address", type: "address" },
      { name: "__ve", internalType: "address", type: "address" },
      { name: "_voter", internalType: "address", type: "address" },
      { name: "_agg", internalType: "address", type: "address" },
      { name: "_oAgg", internalType: "address", type: "address" },
      { name: "_gaugeFactory", internalType: "address", type: "address" },
      { name: "_forPair", internalType: "bool", type: "bool" },
      {
        name: "_allowedRewardTokens",
        internalType: "address[]",
        type: "address[]",
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "reward",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ClaimRewards",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Deposit",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "reward",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "NotifyReward",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "_oFlow",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OFlowSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Withdraw",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "_ve",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "agg",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceWithLock",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "maxRuns", internalType: "uint256", type: "uint256" },
    ],
    name: "batchRewardPerToken",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "maxRuns", internalType: "uint256", type: "uint256" },
    ],
    name: "batchUpdateRewardPerToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "checkpoints",
    outputs: [
      { name: "timestamp", internalType: "uint256", type: "uint256" },
      { name: "balanceOf", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "deposit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "depositAll",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "_lockDuration", internalType: "uint256", type: "uint256" },
    ],
    name: "depositWithLock",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "derivedBalance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "derivedBalances",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "derivedSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "earned",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "external_bribe",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "fees0",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "fees1",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "gaugeFactory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "timestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "getPriorBalanceIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "timestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "getPriorRewardPerToken",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "timestamp", internalType: "uint256", type: "uint256" }],
    name: "getPriorSupplyIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "tokens", internalType: "address[]", type: "address[]" },
    ],
    name: "getReward",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isForPair",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "isReward",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "lastEarn",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "lastTimeRewardApplicable",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "lastUpdateTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "left",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "lockEnd",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "notifyRewardAmount",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "numCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "oAgg",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "periodFinish",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "rewardPerToken",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "rewardPerTokenCheckpoints",
    outputs: [
      { name: "timestamp", internalType: "uint256", type: "uint256" },
      { name: "rewardPerToken", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "rewardPerTokenNumCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "rewardPerTokenStored",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "rewardRate",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "rewards",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "rewardsListLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_oFlow", internalType: "address", type: "address" }],
    name: "setOFlow",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "stake",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "supplyCheckpoints",
    outputs: [
      { name: "timestamp", internalType: "uint256", type: "uint256" },
      { name: "supply", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "supplyNumCheckpoints",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "i", internalType: "uint256", type: "uint256" },
      { name: "oldToken", internalType: "address", type: "address" },
      { name: "newToken", internalType: "address", type: "address" },
    ],
    name: "swapOutRewardToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "tokenIds",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "userRewardPerTokenStored",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "voter",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "withdraw",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "withdrawAll",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "withdrawToken",
    outputs: [],
  },
] as const;

export const aggMaxxingAddress =
  "0x45298B51915fbC1Fa30573B67f25d7Efe072a129" as const;

export const aggMaxxingConfig = {
  address: aggMaxxingAddress,
  abi: aggMaxxingABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof erc20ABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "approve", TMode>({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof erc20ABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "transfer", TMode>({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof erc20ABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "transferFrom", TMode>({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__.
 */
export function useOAggRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"ADMIN_ROLE"`.
 */
export function useOAggAdminRole<
  TFunctionName extends "ADMIN_ROLE",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useOAggDefaultAdminRole<
  TFunctionName extends "DEFAULT_ADMIN_ROLE",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useOAggDomainSeparator<
  TFunctionName extends "DOMAIN_SEPARATOR",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"FULL_LOCK"`.
 */
export function useOAggFullLock<
  TFunctionName extends "FULL_LOCK",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "FULL_LOCK",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"MAX_DISCOUNT"`.
 */
export function useOAggMaxDiscount<
  TFunctionName extends "MAX_DISCOUNT",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "MAX_DISCOUNT",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"MAX_LP_DISCOUNT"`.
 */
export function useOAggMaxLpDiscount<
  TFunctionName extends "MAX_LP_DISCOUNT",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "MAX_LP_DISCOUNT",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"MAX_TEAM_FEE"`.
 */
export function useOAggMaxTeamFee<
  TFunctionName extends "MAX_TEAM_FEE",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "MAX_TEAM_FEE",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"MAX_TWAP_POINTS"`.
 */
export function useOAggMaxTwapPoints<
  TFunctionName extends "MAX_TWAP_POINTS",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "MAX_TWAP_POINTS",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"MINTER_ROLE"`.
 */
export function useOAggMinterRole<
  TFunctionName extends "MINTER_ROLE",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "MINTER_ROLE",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"MIN_DISCOUNT"`.
 */
export function useOAggMinDiscount<
  TFunctionName extends "MIN_DISCOUNT",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "MIN_DISCOUNT",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"MIN_LOCK"`.
 */
export function useOAggMinLock<
  TFunctionName extends "MIN_LOCK",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "MIN_LOCK",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"MIN_LP_DISCOUNT"`.
 */
export function useOAggMinLpDiscount<
  TFunctionName extends "MIN_LP_DISCOUNT",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "MIN_LP_DISCOUNT",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"PAUSER_ROLE"`.
 */
export function useOAggPauserRole<
  TFunctionName extends "PAUSER_ROLE",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "PAUSER_ROLE",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"allowance"`.
 */
export function useOAggAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useOAggBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"decimals"`.
 */
export function useOAggDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"discount"`.
 */
export function useOAggDiscount<
  TFunctionName extends "discount",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "discount",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"gauge"`.
 */
export function useOAggGauge<
  TFunctionName extends "gauge",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "gauge",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"getDiscountedPrice"`.
 */
export function useOAggGetDiscountedPrice<
  TFunctionName extends "getDiscountedPrice",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "getDiscountedPrice",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"getLockDurationForLpDiscount"`.
 */
export function useOAggGetLockDurationForLpDiscount<
  TFunctionName extends "getLockDurationForLpDiscount",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "getLockDurationForLpDiscount",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"getLpDiscountedPrice"`.
 */
export function useOAggGetLpDiscountedPrice<
  TFunctionName extends "getLpDiscountedPrice",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "getLpDiscountedPrice",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useOAggGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"getSlopeInterceptForLpDiscount"`.
 */
export function useOAggGetSlopeInterceptForLpDiscount<
  TFunctionName extends "getSlopeInterceptForLpDiscount",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "getSlopeInterceptForLpDiscount",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"getTimeWeightedAveragePrice"`.
 */
export function useOAggGetTimeWeightedAveragePrice<
  TFunctionName extends "getTimeWeightedAveragePrice",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "getTimeWeightedAveragePrice",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"getVeDiscountedPrice"`.
 */
export function useOAggGetVeDiscountedPrice<
  TFunctionName extends "getVeDiscountedPrice",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "getVeDiscountedPrice",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"hasRole"`.
 */
export function useOAggHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"isPaused"`.
 */
export function useOAggIsPaused<
  TFunctionName extends "isPaused",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "isPaused",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"lockDurationForMaxLpDiscount"`.
 */
export function useOAggLockDurationForMaxLpDiscount<
  TFunctionName extends "lockDurationForMaxLpDiscount",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "lockDurationForMaxLpDiscount",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"name"`.
 */
export function useOAggName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"nonces"`.
 */
export function useOAggNonces<
  TFunctionName extends "nonces",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"pair"`.
 */
export function useOAggPair<
  TFunctionName extends "pair",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "pair",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"paymentToken"`.
 */
export function useOAggPaymentToken<
  TFunctionName extends "paymentToken",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "paymentToken",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"router"`.
 */
export function useOAggRouter<
  TFunctionName extends "router",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "router",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useOAggSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"symbol"`.
 */
export function useOAggSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"teamFee"`.
 */
export function useOAggTeamFee<
  TFunctionName extends "teamFee",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "teamFee",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useOAggTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"treasury"`.
 */
export function useOAggTreasury<
  TFunctionName extends "treasury",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "treasury",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"twapPoints"`.
 */
export function useOAggTwapPoints<
  TFunctionName extends "twapPoints",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "twapPoints",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"underlyingToken"`.
 */
export function useOAggUnderlyingToken<
  TFunctionName extends "underlyingToken",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "underlyingToken",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"veDiscount"`.
 */
export function useOAggVeDiscount<
  TFunctionName extends "veDiscount",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "veDiscount",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"voter"`.
 */
export function useOAggVoter<
  TFunctionName extends "voter",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "voter",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"votingEscrow"`.
 */
export function useOAggVotingEscrow<
  TFunctionName extends "votingEscrow",
  TSelectData = ReadContractResult<typeof oAggABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "votingEscrow",
    ...config,
  } as UseContractReadConfig<typeof oAggABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__.
 */
export function useOAggWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof oAggABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof oAggABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, TFunctionName, TMode>({
    abi: oAggABI,
    address: oAggAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"approve"`.
 */
export function useOAggApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof oAggABI, "approve">["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof oAggABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "approve", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"burn"`.
 */
export function useOAggBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof oAggABI, "burn">["request"]["abi"],
        "burn",
        TMode
      > & { functionName?: "burn" }
    : UseContractWriteConfig<typeof oAggABI, "burn", TMode> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "burn", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"exercise"`.
 */
export function useOAggExercise<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "exercise"
        >["request"]["abi"],
        "exercise",
        TMode
      > & { functionName?: "exercise" }
    : UseContractWriteConfig<typeof oAggABI, "exercise", TMode> & {
        abi?: never;
        functionName?: "exercise";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "exercise", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "exercise",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"exerciseLp"`.
 */
export function useOAggExerciseLp<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "exerciseLp"
        >["request"]["abi"],
        "exerciseLp",
        TMode
      > & { functionName?: "exerciseLp" }
    : UseContractWriteConfig<typeof oAggABI, "exerciseLp", TMode> & {
        abi?: never;
        functionName?: "exerciseLp";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "exerciseLp", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "exerciseLp",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"exerciseVe"`.
 */
export function useOAggExerciseVe<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "exerciseVe"
        >["request"]["abi"],
        "exerciseVe",
        TMode
      > & { functionName?: "exerciseVe" }
    : UseContractWriteConfig<typeof oAggABI, "exerciseVe", TMode> & {
        abi?: never;
        functionName?: "exerciseVe";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "exerciseVe", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "exerciseVe",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"grantRole"`.
 */
export function useOAggGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<typeof oAggABI, "grantRole", TMode> & {
        abi?: never;
        functionName?: "grantRole";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "grantRole", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "grantRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"mint"`.
 */
export function useOAggMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof oAggABI, "mint">["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof oAggABI, "mint", TMode> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "mint", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"pause"`.
 */
export function useOAggPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof oAggABI, "pause">["request"]["abi"],
        "pause",
        TMode
      > & { functionName?: "pause" }
    : UseContractWriteConfig<typeof oAggABI, "pause", TMode> & {
        abi?: never;
        functionName?: "pause";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "pause", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "pause",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"permit"`.
 */
export function useOAggPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof oAggABI, "permit">["request"]["abi"],
        "permit",
        TMode
      > & { functionName?: "permit" }
    : UseContractWriteConfig<typeof oAggABI, "permit", TMode> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "permit", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useOAggRenounceRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<typeof oAggABI, "renounceRole", TMode> & {
        abi?: never;
        functionName?: "renounceRole";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "renounceRole", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "renounceRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useOAggRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<typeof oAggABI, "revokeRole", TMode> & {
        abi?: never;
        functionName?: "revokeRole";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "revokeRole", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "revokeRole",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setDiscount"`.
 */
export function useOAggSetDiscount<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "setDiscount"
        >["request"]["abi"],
        "setDiscount",
        TMode
      > & { functionName?: "setDiscount" }
    : UseContractWriteConfig<typeof oAggABI, "setDiscount", TMode> & {
        abi?: never;
        functionName?: "setDiscount";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "setDiscount", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setDiscount",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setLockDurationForMaxLpDiscount"`.
 */
export function useOAggSetLockDurationForMaxLpDiscount<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "setLockDurationForMaxLpDiscount"
        >["request"]["abi"],
        "setLockDurationForMaxLpDiscount",
        TMode
      > & { functionName?: "setLockDurationForMaxLpDiscount" }
    : UseContractWriteConfig<
        typeof oAggABI,
        "setLockDurationForMaxLpDiscount",
        TMode
      > & {
        abi?: never;
        functionName?: "setLockDurationForMaxLpDiscount";
      } = {} as any
) {
  return useContractWrite<
    typeof oAggABI,
    "setLockDurationForMaxLpDiscount",
    TMode
  >({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setLockDurationForMaxLpDiscount",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setPairAndPaymentToken"`.
 */
export function useOAggSetPairAndPaymentToken<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "setPairAndPaymentToken"
        >["request"]["abi"],
        "setPairAndPaymentToken",
        TMode
      > & { functionName?: "setPairAndPaymentToken" }
    : UseContractWriteConfig<
        typeof oAggABI,
        "setPairAndPaymentToken",
        TMode
      > & {
        abi?: never;
        functionName?: "setPairAndPaymentToken";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "setPairAndPaymentToken", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setPairAndPaymentToken",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setRouter"`.
 */
export function useOAggSetRouter<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "setRouter"
        >["request"]["abi"],
        "setRouter",
        TMode
      > & { functionName?: "setRouter" }
    : UseContractWriteConfig<typeof oAggABI, "setRouter", TMode> & {
        abi?: never;
        functionName?: "setRouter";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "setRouter", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setRouter",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setTeamFee"`.
 */
export function useOAggSetTeamFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "setTeamFee"
        >["request"]["abi"],
        "setTeamFee",
        TMode
      > & { functionName?: "setTeamFee" }
    : UseContractWriteConfig<typeof oAggABI, "setTeamFee", TMode> & {
        abi?: never;
        functionName?: "setTeamFee";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "setTeamFee", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setTeamFee",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setTreasury"`.
 */
export function useOAggSetTreasury<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "setTreasury"
        >["request"]["abi"],
        "setTreasury",
        TMode
      > & { functionName?: "setTreasury" }
    : UseContractWriteConfig<typeof oAggABI, "setTreasury", TMode> & {
        abi?: never;
        functionName?: "setTreasury";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "setTreasury", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setTreasury",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setTwapPoints"`.
 */
export function useOAggSetTwapPoints<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "setTwapPoints"
        >["request"]["abi"],
        "setTwapPoints",
        TMode
      > & { functionName?: "setTwapPoints" }
    : UseContractWriteConfig<typeof oAggABI, "setTwapPoints", TMode> & {
        abi?: never;
        functionName?: "setTwapPoints";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "setTwapPoints", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setTwapPoints",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setVeDiscount"`.
 */
export function useOAggSetVeDiscount<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "setVeDiscount"
        >["request"]["abi"],
        "setVeDiscount",
        TMode
      > & { functionName?: "setVeDiscount" }
    : UseContractWriteConfig<typeof oAggABI, "setVeDiscount", TMode> & {
        abi?: never;
        functionName?: "setVeDiscount";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "setVeDiscount", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setVeDiscount",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"transfer"`.
 */
export function useOAggTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof oAggABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "transfer", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useOAggTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof oAggABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "transferFrom", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"unPause"`.
 */
export function useOAggUnPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof oAggABI, "unPause">["request"]["abi"],
        "unPause",
        TMode
      > & { functionName?: "unPause" }
    : UseContractWriteConfig<typeof oAggABI, "unPause", TMode> & {
        abi?: never;
        functionName?: "unPause";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "unPause", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "unPause",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"updateGauge"`.
 */
export function useOAggUpdateGauge<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof oAggABI,
          "updateGauge"
        >["request"]["abi"],
        "updateGauge",
        TMode
      > & { functionName?: "updateGauge" }
    : UseContractWriteConfig<typeof oAggABI, "updateGauge", TMode> & {
        abi?: never;
        functionName?: "updateGauge";
      } = {} as any
) {
  return useContractWrite<typeof oAggABI, "updateGauge", TMode>({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "updateGauge",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__.
 */
export function usePrepareOAggWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareOAggApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareOAggBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "burn">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"exercise"`.
 */
export function usePrepareOAggExercise(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "exercise">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "exercise",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "exercise">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"exerciseLp"`.
 */
export function usePrepareOAggExerciseLp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "exerciseLp">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "exerciseLp",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "exerciseLp">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"exerciseVe"`.
 */
export function usePrepareOAggExerciseVe(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "exerciseVe">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "exerciseVe",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "exerciseVe">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareOAggGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "grantRole">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "grantRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareOAggMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareOAggPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "pause">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "pause",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "pause">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareOAggPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "permit">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareOAggRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "renounceRole">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "renounceRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareOAggRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "revokeRole">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "revokeRole">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setDiscount"`.
 */
export function usePrepareOAggSetDiscount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "setDiscount">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setDiscount",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "setDiscount">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setLockDurationForMaxLpDiscount"`.
 */
export function usePrepareOAggSetLockDurationForMaxLpDiscount(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof oAggABI,
      "setLockDurationForMaxLpDiscount"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setLockDurationForMaxLpDiscount",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof oAggABI,
    "setLockDurationForMaxLpDiscount"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setPairAndPaymentToken"`.
 */
export function usePrepareOAggSetPairAndPaymentToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "setPairAndPaymentToken">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setPairAndPaymentToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "setPairAndPaymentToken">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setRouter"`.
 */
export function usePrepareOAggSetRouter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "setRouter">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setRouter",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "setRouter">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setTeamFee"`.
 */
export function usePrepareOAggSetTeamFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "setTeamFee">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setTeamFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "setTeamFee">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePrepareOAggSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "setTreasury">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setTreasury",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "setTreasury">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setTwapPoints"`.
 */
export function usePrepareOAggSetTwapPoints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "setTwapPoints">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setTwapPoints",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "setTwapPoints">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"setVeDiscount"`.
 */
export function usePrepareOAggSetVeDiscount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "setVeDiscount">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "setVeDiscount",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "setVeDiscount">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareOAggTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareOAggTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"unPause"`.
 */
export function usePrepareOAggUnPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "unPause">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "unPause",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "unPause">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oAggABI}__ and `functionName` set to `"updateGauge"`.
 */
export function usePrepareOAggUpdateGauge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oAggABI, "updateGauge">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: oAggABI,
    address: oAggAddress,
    functionName: "updateGauge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oAggABI, "updateGauge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__.
 */
export function useOAggEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    ...config,
  } as UseContractEventConfig<typeof oAggABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"Approval"`.
 */
export function useOAggApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"Exercise"`.
 */
export function useOAggExerciseEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "Exercise">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "Exercise",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "Exercise">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"ExerciseLp"`.
 */
export function useOAggExerciseLpEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "ExerciseLp">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "ExerciseLp",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "ExerciseLp">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"ExerciseVe"`.
 */
export function useOAggExerciseVeEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "ExerciseVe">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "ExerciseVe",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "ExerciseVe">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"PauseStateChanged"`.
 */
export function useOAggPauseStateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "PauseStateChanged">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "PauseStateChanged",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "PauseStateChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useOAggRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "RoleAdminChanged">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "RoleAdminChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useOAggRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "RoleGranted">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "RoleGranted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useOAggRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "RoleRevoked">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "RoleRevoked">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"SetDiscount"`.
 */
export function useOAggSetDiscountEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "SetDiscount">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "SetDiscount",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "SetDiscount">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"SetGauge"`.
 */
export function useOAggSetGaugeEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "SetGauge">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "SetGauge",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "SetGauge">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"SetLockDurationForMaxLpDiscount"`.
 */
export function useOAggSetLockDurationForMaxLpDiscountEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "SetLockDurationForMaxLpDiscount">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "SetLockDurationForMaxLpDiscount",
    ...config,
  } as UseContractEventConfig<
    typeof oAggABI,
    "SetLockDurationForMaxLpDiscount"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"SetPairAndPaymentToken"`.
 */
export function useOAggSetPairAndPaymentTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "SetPairAndPaymentToken">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "SetPairAndPaymentToken",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "SetPairAndPaymentToken">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"SetRouter"`.
 */
export function useOAggSetRouterEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "SetRouter">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "SetRouter",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "SetRouter">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"SetTeamFee"`.
 */
export function useOAggSetTeamFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "SetTeamFee">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "SetTeamFee",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "SetTeamFee">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"SetTreasury"`.
 */
export function useOAggSetTreasuryEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "SetTreasury">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "SetTreasury",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "SetTreasury">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"SetTwapPoints"`.
 */
export function useOAggSetTwapPointsEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "SetTwapPoints">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "SetTwapPoints",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "SetTwapPoints">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"SetVeDiscount"`.
 */
export function useOAggSetVeDiscountEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "SetVeDiscount">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "SetVeDiscount",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "SetVeDiscount">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oAggABI}__ and `eventName` set to `"Transfer"`.
 */
export function useOAggTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof oAggABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: oAggABI,
    address: oAggAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof oAggABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__.
 */
export function useAggMaxxingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"_ve"`.
 */
export function useAggMaxxingVe<
  TFunctionName extends "_ve",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "_ve",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"agg"`.
 */
export function useAggMaxxingAgg<
  TFunctionName extends "agg",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "agg",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useAggMaxxingBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"balanceWithLock"`.
 */
export function useAggMaxxingBalanceWithLock<
  TFunctionName extends "balanceWithLock",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "balanceWithLock",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useAggMaxxingCheckpoints<
  TFunctionName extends "checkpoints",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "checkpoints",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"derivedBalance"`.
 */
export function useAggMaxxingDerivedBalance<
  TFunctionName extends "derivedBalance",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "derivedBalance",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"derivedBalances"`.
 */
export function useAggMaxxingDerivedBalances<
  TFunctionName extends "derivedBalances",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "derivedBalances",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"derivedSupply"`.
 */
export function useAggMaxxingDerivedSupply<
  TFunctionName extends "derivedSupply",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "derivedSupply",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"earned"`.
 */
export function useAggMaxxingEarned<
  TFunctionName extends "earned",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "earned",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"external_bribe"`.
 */
export function useAggMaxxingExternalBribe<
  TFunctionName extends "external_bribe",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "external_bribe",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"fees0"`.
 */
export function useAggMaxxingFees0<
  TFunctionName extends "fees0",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "fees0",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"fees1"`.
 */
export function useAggMaxxingFees1<
  TFunctionName extends "fees1",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "fees1",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"gaugeFactory"`.
 */
export function useAggMaxxingGaugeFactory<
  TFunctionName extends "gaugeFactory",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "gaugeFactory",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"getPriorBalanceIndex"`.
 */
export function useAggMaxxingGetPriorBalanceIndex<
  TFunctionName extends "getPriorBalanceIndex",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "getPriorBalanceIndex",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"getPriorRewardPerToken"`.
 */
export function useAggMaxxingGetPriorRewardPerToken<
  TFunctionName extends "getPriorRewardPerToken",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "getPriorRewardPerToken",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"getPriorSupplyIndex"`.
 */
export function useAggMaxxingGetPriorSupplyIndex<
  TFunctionName extends "getPriorSupplyIndex",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "getPriorSupplyIndex",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"isForPair"`.
 */
export function useAggMaxxingIsForPair<
  TFunctionName extends "isForPair",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "isForPair",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"isReward"`.
 */
export function useAggMaxxingIsReward<
  TFunctionName extends "isReward",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "isReward",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"lastEarn"`.
 */
export function useAggMaxxingLastEarn<
  TFunctionName extends "lastEarn",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "lastEarn",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"lastTimeRewardApplicable"`.
 */
export function useAggMaxxingLastTimeRewardApplicable<
  TFunctionName extends "lastTimeRewardApplicable",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "lastTimeRewardApplicable",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"lastUpdateTime"`.
 */
export function useAggMaxxingLastUpdateTime<
  TFunctionName extends "lastUpdateTime",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "lastUpdateTime",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"left"`.
 */
export function useAggMaxxingLeft<
  TFunctionName extends "left",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "left",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"lockEnd"`.
 */
export function useAggMaxxingLockEnd<
  TFunctionName extends "lockEnd",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "lockEnd",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useAggMaxxingNumCheckpoints<
  TFunctionName extends "numCheckpoints",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "numCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"oAgg"`.
 */
export function useAggMaxxingOAgg<
  TFunctionName extends "oAgg",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "oAgg",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"periodFinish"`.
 */
export function useAggMaxxingPeriodFinish<
  TFunctionName extends "periodFinish",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "periodFinish",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"rewardPerToken"`.
 */
export function useAggMaxxingRewardPerToken<
  TFunctionName extends "rewardPerToken",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "rewardPerToken",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"rewardPerTokenCheckpoints"`.
 */
export function useAggMaxxingRewardPerTokenCheckpoints<
  TFunctionName extends "rewardPerTokenCheckpoints",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "rewardPerTokenCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"rewardPerTokenNumCheckpoints"`.
 */
export function useAggMaxxingRewardPerTokenNumCheckpoints<
  TFunctionName extends "rewardPerTokenNumCheckpoints",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "rewardPerTokenNumCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"rewardPerTokenStored"`.
 */
export function useAggMaxxingRewardPerTokenStored<
  TFunctionName extends "rewardPerTokenStored",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "rewardPerTokenStored",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"rewardRate"`.
 */
export function useAggMaxxingRewardRate<
  TFunctionName extends "rewardRate",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "rewardRate",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"rewards"`.
 */
export function useAggMaxxingRewards<
  TFunctionName extends "rewards",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "rewards",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"rewardsListLength"`.
 */
export function useAggMaxxingRewardsListLength<
  TFunctionName extends "rewardsListLength",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "rewardsListLength",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"stake"`.
 */
export function useAggMaxxingStake<
  TFunctionName extends "stake",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "stake",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"supplyCheckpoints"`.
 */
export function useAggMaxxingSupplyCheckpoints<
  TFunctionName extends "supplyCheckpoints",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "supplyCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"supplyNumCheckpoints"`.
 */
export function useAggMaxxingSupplyNumCheckpoints<
  TFunctionName extends "supplyNumCheckpoints",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "supplyNumCheckpoints",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"tokenIds"`.
 */
export function useAggMaxxingTokenIds<
  TFunctionName extends "tokenIds",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "tokenIds",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useAggMaxxingTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"userRewardPerTokenStored"`.
 */
export function useAggMaxxingUserRewardPerTokenStored<
  TFunctionName extends "userRewardPerTokenStored",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "userRewardPerTokenStored",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"voter"`.
 */
export function useAggMaxxingVoter<
  TFunctionName extends "voter",
  TSelectData = ReadContractResult<typeof aggMaxxingABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "voter",
    ...config,
  } as UseContractReadConfig<typeof aggMaxxingABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__.
 */
export function useAggMaxxingWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof aggMaxxingABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof aggMaxxingABI, TFunctionName, TMode>({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"batchRewardPerToken"`.
 */
export function useAggMaxxingBatchRewardPerToken<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          "batchRewardPerToken"
        >["request"]["abi"],
        "batchRewardPerToken",
        TMode
      > & { functionName?: "batchRewardPerToken" }
    : UseContractWriteConfig<
        typeof aggMaxxingABI,
        "batchRewardPerToken",
        TMode
      > & {
        abi?: never;
        functionName?: "batchRewardPerToken";
      } = {} as any
) {
  return useContractWrite<typeof aggMaxxingABI, "batchRewardPerToken", TMode>({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "batchRewardPerToken",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"batchUpdateRewardPerToken"`.
 */
export function useAggMaxxingBatchUpdateRewardPerToken<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          "batchUpdateRewardPerToken"
        >["request"]["abi"],
        "batchUpdateRewardPerToken",
        TMode
      > & { functionName?: "batchUpdateRewardPerToken" }
    : UseContractWriteConfig<
        typeof aggMaxxingABI,
        "batchUpdateRewardPerToken",
        TMode
      > & {
        abi?: never;
        functionName?: "batchUpdateRewardPerToken";
      } = {} as any
) {
  return useContractWrite<
    typeof aggMaxxingABI,
    "batchUpdateRewardPerToken",
    TMode
  >({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "batchUpdateRewardPerToken",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"deposit"`.
 */
export function useAggMaxxingDeposit<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          "deposit"
        >["request"]["abi"],
        "deposit",
        TMode
      > & { functionName?: "deposit" }
    : UseContractWriteConfig<typeof aggMaxxingABI, "deposit", TMode> & {
        abi?: never;
        functionName?: "deposit";
      } = {} as any
) {
  return useContractWrite<typeof aggMaxxingABI, "deposit", TMode>({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "deposit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"depositAll"`.
 */
export function useAggMaxxingDepositAll<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          "depositAll"
        >["request"]["abi"],
        "depositAll",
        TMode
      > & { functionName?: "depositAll" }
    : UseContractWriteConfig<typeof aggMaxxingABI, "depositAll", TMode> & {
        abi?: never;
        functionName?: "depositAll";
      } = {} as any
) {
  return useContractWrite<typeof aggMaxxingABI, "depositAll", TMode>({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "depositAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"depositWithLock"`.
 */
export function useAggMaxxingDepositWithLock<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          "depositWithLock"
        >["request"]["abi"],
        "depositWithLock",
        TMode
      > & { functionName?: "depositWithLock" }
    : UseContractWriteConfig<typeof aggMaxxingABI, "depositWithLock", TMode> & {
        abi?: never;
        functionName?: "depositWithLock";
      } = {} as any
) {
  return useContractWrite<typeof aggMaxxingABI, "depositWithLock", TMode>({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "depositWithLock",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"getReward"`.
 */
export function useAggMaxxingGetReward<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          "getReward"
        >["request"]["abi"],
        "getReward",
        TMode
      > & { functionName?: "getReward" }
    : UseContractWriteConfig<typeof aggMaxxingABI, "getReward", TMode> & {
        abi?: never;
        functionName?: "getReward";
      } = {} as any
) {
  return useContractWrite<typeof aggMaxxingABI, "getReward", TMode>({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "getReward",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"notifyRewardAmount"`.
 */
export function useAggMaxxingNotifyRewardAmount<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          "notifyRewardAmount"
        >["request"]["abi"],
        "notifyRewardAmount",
        TMode
      > & { functionName?: "notifyRewardAmount" }
    : UseContractWriteConfig<
        typeof aggMaxxingABI,
        "notifyRewardAmount",
        TMode
      > & {
        abi?: never;
        functionName?: "notifyRewardAmount";
      } = {} as any
) {
  return useContractWrite<typeof aggMaxxingABI, "notifyRewardAmount", TMode>({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "notifyRewardAmount",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"setOFlow"`.
 */
export function useAggMaxxingSetOFlow<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          "setOFlow"
        >["request"]["abi"],
        "setOFlow",
        TMode
      > & { functionName?: "setOFlow" }
    : UseContractWriteConfig<typeof aggMaxxingABI, "setOFlow", TMode> & {
        abi?: never;
        functionName?: "setOFlow";
      } = {} as any
) {
  return useContractWrite<typeof aggMaxxingABI, "setOFlow", TMode>({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "setOFlow",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"swapOutRewardToken"`.
 */
export function useAggMaxxingSwapOutRewardToken<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          "swapOutRewardToken"
        >["request"]["abi"],
        "swapOutRewardToken",
        TMode
      > & { functionName?: "swapOutRewardToken" }
    : UseContractWriteConfig<
        typeof aggMaxxingABI,
        "swapOutRewardToken",
        TMode
      > & {
        abi?: never;
        functionName?: "swapOutRewardToken";
      } = {} as any
) {
  return useContractWrite<typeof aggMaxxingABI, "swapOutRewardToken", TMode>({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "swapOutRewardToken",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"withdraw"`.
 */
export function useAggMaxxingWithdraw<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          "withdraw"
        >["request"]["abi"],
        "withdraw",
        TMode
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<typeof aggMaxxingABI, "withdraw", TMode> & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any
) {
  return useContractWrite<typeof aggMaxxingABI, "withdraw", TMode>({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"withdrawAll"`.
 */
export function useAggMaxxingWithdrawAll<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          "withdrawAll"
        >["request"]["abi"],
        "withdrawAll",
        TMode
      > & { functionName?: "withdrawAll" }
    : UseContractWriteConfig<typeof aggMaxxingABI, "withdrawAll", TMode> & {
        abi?: never;
        functionName?: "withdrawAll";
      } = {} as any
) {
  return useContractWrite<typeof aggMaxxingABI, "withdrawAll", TMode>({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "withdrawAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"withdrawToken"`.
 */
export function useAggMaxxingWithdrawToken<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aggMaxxingABI,
          "withdrawToken"
        >["request"]["abi"],
        "withdrawToken",
        TMode
      > & { functionName?: "withdrawToken" }
    : UseContractWriteConfig<typeof aggMaxxingABI, "withdrawToken", TMode> & {
        abi?: never;
        functionName?: "withdrawToken";
      } = {} as any
) {
  return useContractWrite<typeof aggMaxxingABI, "withdrawToken", TMode>({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "withdrawToken",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__.
 */
export function usePrepareAggMaxxingWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggMaxxingABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggMaxxingABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"batchRewardPerToken"`.
 */
export function usePrepareAggMaxxingBatchRewardPerToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggMaxxingABI, "batchRewardPerToken">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "batchRewardPerToken",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof aggMaxxingABI,
    "batchRewardPerToken"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"batchUpdateRewardPerToken"`.
 */
export function usePrepareAggMaxxingBatchUpdateRewardPerToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof aggMaxxingABI,
      "batchUpdateRewardPerToken"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "batchUpdateRewardPerToken",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof aggMaxxingABI,
    "batchUpdateRewardPerToken"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareAggMaxxingDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggMaxxingABI, "deposit">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "deposit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggMaxxingABI, "deposit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"depositAll"`.
 */
export function usePrepareAggMaxxingDepositAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggMaxxingABI, "depositAll">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "depositAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggMaxxingABI, "depositAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"depositWithLock"`.
 */
export function usePrepareAggMaxxingDepositWithLock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggMaxxingABI, "depositWithLock">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "depositWithLock",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggMaxxingABI, "depositWithLock">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"getReward"`.
 */
export function usePrepareAggMaxxingGetReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggMaxxingABI, "getReward">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "getReward",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggMaxxingABI, "getReward">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"notifyRewardAmount"`.
 */
export function usePrepareAggMaxxingNotifyRewardAmount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggMaxxingABI, "notifyRewardAmount">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "notifyRewardAmount",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof aggMaxxingABI,
    "notifyRewardAmount"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"setOFlow"`.
 */
export function usePrepareAggMaxxingSetOFlow(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggMaxxingABI, "setOFlow">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "setOFlow",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggMaxxingABI, "setOFlow">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"swapOutRewardToken"`.
 */
export function usePrepareAggMaxxingSwapOutRewardToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggMaxxingABI, "swapOutRewardToken">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "swapOutRewardToken",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof aggMaxxingABI,
    "swapOutRewardToken"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareAggMaxxingWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggMaxxingABI, "withdraw">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggMaxxingABI, "withdraw">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"withdrawAll"`.
 */
export function usePrepareAggMaxxingWithdrawAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggMaxxingABI, "withdrawAll">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "withdrawAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggMaxxingABI, "withdrawAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aggMaxxingABI}__ and `functionName` set to `"withdrawToken"`.
 */
export function usePrepareAggMaxxingWithdrawToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aggMaxxingABI, "withdrawToken">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    functionName: "withdrawToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof aggMaxxingABI, "withdrawToken">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggMaxxingABI}__.
 */
export function useAggMaxxingEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof aggMaxxingABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    ...config,
  } as UseContractEventConfig<typeof aggMaxxingABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggMaxxingABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useAggMaxxingClaimRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof aggMaxxingABI, "ClaimRewards">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    eventName: "ClaimRewards",
    ...config,
  } as UseContractEventConfig<typeof aggMaxxingABI, "ClaimRewards">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggMaxxingABI}__ and `eventName` set to `"Deposit"`.
 */
export function useAggMaxxingDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof aggMaxxingABI, "Deposit">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    eventName: "Deposit",
    ...config,
  } as UseContractEventConfig<typeof aggMaxxingABI, "Deposit">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggMaxxingABI}__ and `eventName` set to `"NotifyReward"`.
 */
export function useAggMaxxingNotifyRewardEvent(
  config: Omit<
    UseContractEventConfig<typeof aggMaxxingABI, "NotifyReward">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    eventName: "NotifyReward",
    ...config,
  } as UseContractEventConfig<typeof aggMaxxingABI, "NotifyReward">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggMaxxingABI}__ and `eventName` set to `"OFlowSet"`.
 */
export function useAggMaxxingOFlowSetEvent(
  config: Omit<
    UseContractEventConfig<typeof aggMaxxingABI, "OFlowSet">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    eventName: "OFlowSet",
    ...config,
  } as UseContractEventConfig<typeof aggMaxxingABI, "OFlowSet">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aggMaxxingABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useAggMaxxingWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof aggMaxxingABI, "Withdraw">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: aggMaxxingABI,
    address: aggMaxxingAddress,
    eventName: "Withdraw",
    ...config,
  } as UseContractEventConfig<typeof aggMaxxingABI, "Withdraw">);
}
